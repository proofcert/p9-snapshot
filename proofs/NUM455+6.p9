============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n097.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 08:03:43 CDT 2014
% CPUTime    : 0.52 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 5870 was started by sandbox on n097.star.cs.uiowa.edu,
Fri Jun  6 08:03:44 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_5838_n097.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.08 (+ 0.00) seconds.
% Length of proof is 24.
% Level of proof is 5.
% Maximum clause weight is 15.000.
% Given clauses 188.


1 (all A ((aElementOf0(A,szAzrzSzezqlpdtcmdtrp0(sz10,xp)) -> aInteger0(A) & (exists B (aInteger0(B) & sdtasdt0(xp,B) = sdtpldt0(A,smndt0(sz10)))) & aDivisorOf0(xp,sdtpldt0(A,smndt0(sz10))) & sdteqdtlpzmzozddtrp0(A,sz10,xp)) & (aInteger0(A) & ((exists B (aInteger0(B) & sdtasdt0(xp,B) = sdtpldt0(A,smndt0(sz10)))) | aDivisorOf0(xp,sdtpldt0(A,smndt0(sz10))) | sdteqdtlpzmzozddtrp0(A,sz10,xp)) -> aElementOf0(A,szAzrzSzezqlpdtcmdtrp0(sz10,xp))))).  [assumption].
2 (exists A (aInteger0(A) & sdtasdt0(xp,A) = sdtpldt0(sdtpldt0(sz10,xp),smndt0(sz10)))).  [assumption].
3 (exists A (aInteger0(A) & sdtasdt0(xp,A) = sdtpldt0(sdtpldt0(sz10,smndt0(xp)),smndt0(sz10)))).  [assumption].
4 -(exists A ((aInteger0(A) & ((exists B (aInteger0(B) & sdtasdt0(xp,B) = sdtpldt0(A,smndt0(sz10)))) | aDivisorOf0(xp,sdtpldt0(A,smndt0(sz10))) | sdteqdtlpzmzozddtrp0(A,sz10,xp)) | aElementOf0(A,szAzrzSzezqlpdtcmdtrp0(sz10,xp))) & -((A = sz10 | A = smndt0(sz10)) & aElementOf0(A,cS2200)))).  [assumption].
5 -aElementOf0(A,szAzrzSzezqlpdtcmdtrp0(sz10,xp)) | aInteger0(A).  [clausify(1)].
6 sdtasdt0(xp,c1) = sdtpldt0(sdtpldt0(sz10,xp),smndt0(sz10)).  [clausify(2)].
7 sdtpldt0(sdtpldt0(sz10,xp),smndt0(sz10)) = sdtasdt0(xp,c1).  [copy(6),flip(a)].
8 aDivisorOf0(xp,sdtpldt0(sdtpldt0(sz10,xp),smndt0(sz10))).  [assumption].
9 aDivisorOf0(xp,sdtasdt0(xp,c1)).  [para(7(a,1),8(a,2))].
10 aElementOf0(sdtpldt0(sz10,xp),szAzrzSzezqlpdtcmdtrp0(sz10,xp)).  [assumption].
11 sdtasdt0(xp,c2) = sdtpldt0(sdtpldt0(sz10,smndt0(xp)),smndt0(sz10)).  [clausify(3)].
12 sdtpldt0(sdtpldt0(sz10,smndt0(xp)),smndt0(sz10)) = sdtasdt0(xp,c2).  [copy(11),flip(a)].
13 aDivisorOf0(xp,sdtpldt0(sdtpldt0(sz10,smndt0(xp)),smndt0(sz10))).  [assumption].
14 aDivisorOf0(xp,sdtasdt0(xp,c2)).  [para(12(a,1),13(a,2))].
15 aElementOf0(sdtpldt0(sz10,smndt0(xp)),szAzrzSzezqlpdtcmdtrp0(sz10,xp)).  [assumption].
16 sdtpldt0(sz10,xp) != sz10.  [assumption].
17 sdtpldt0(sz10,smndt0(xp)) != sz10.  [assumption].
18 sdtpldt0(sz10,xp) != smndt0(sz10) | sdtpldt0(sz10,smndt0(xp)) != smndt0(sz10).  [assumption].
19 -aInteger0(A) | -aDivisorOf0(xp,sdtpldt0(A,smndt0(sz10))) | sz10 = A | smndt0(sz10) = A.  [clausify(4)].
20 aInteger0(sdtpldt0(sz10,xp)).  [resolve(10,a,5,a)].
21 aInteger0(sdtpldt0(sz10,smndt0(xp))).  [resolve(15,a,5,a)].
22 -aInteger0(sdtpldt0(sz10,xp)) | -aDivisorOf0(xp,sdtasdt0(xp,c1)) | sz10 = sdtpldt0(sz10,xp) | smndt0(sz10) = sdtpldt0(sz10,xp).  [para(7(a,1),19(b,2))].
23 -aInteger0(sdtpldt0(sz10,xp)) | -aDivisorOf0(xp,sdtasdt0(xp,c1)) | sdtpldt0(sz10,xp) = sz10 | smndt0(sz10) = sdtpldt0(sz10,xp).  [copy(22),flip(c)].
24 -aInteger0(sdtpldt0(sz10,xp)) | -aDivisorOf0(xp,sdtasdt0(xp,c1)) | sdtpldt0(sz10,xp) = sz10 | sdtpldt0(sz10,xp) = smndt0(sz10).  [copy(23),flip(d)].
25 -aDivisorOf0(xp,sdtasdt0(xp,c1)) | sdtpldt0(sz10,xp) = sz10 | sdtpldt0(sz10,xp) = smndt0(sz10).  [resolve(20,a,24,a)].
26 sdtpldt0(sz10,xp) = sz10 | sdtpldt0(sz10,xp) = smndt0(sz10).  [resolve(9,a,25,a)].
27 sdtpldt0(sz10,xp) = smndt0(sz10).  [resolve(16,a,26,a)].
28 -aInteger0(sdtpldt0(sz10,smndt0(xp))) | -aDivisorOf0(xp,sdtasdt0(xp,c2)) | sz10 = sdtpldt0(sz10,smndt0(xp)) | smndt0(sz10) = sdtpldt0(sz10,smndt0(xp)).  [para(12(a,1),19(b,2))].
29 -aInteger0(sdtpldt0(sz10,smndt0(xp))) | -aDivisorOf0(xp,sdtasdt0(xp,c2)) | sdtpldt0(sz10,smndt0(xp)) = sz10 | smndt0(sz10) = sdtpldt0(sz10,smndt0(xp)).  [copy(28),flip(c)].
30 -aInteger0(sdtpldt0(sz10,smndt0(xp))) | -aDivisorOf0(xp,sdtasdt0(xp,c2)) | sdtpldt0(sz10,smndt0(xp)) = sz10 | sdtpldt0(sz10,smndt0(xp)) = smndt0(sz10).  [copy(29),flip(d)].
31 -aDivisorOf0(xp,sdtasdt0(xp,c2)) | sdtpldt0(sz10,smndt0(xp)) = sz10 | sdtpldt0(sz10,smndt0(xp)) = smndt0(sz10).  [resolve(21,a,30,a)].
32 sdtpldt0(sz10,smndt0(xp)) = sz10 | sdtpldt0(sz10,smndt0(xp)) = smndt0(sz10).  [resolve(14,a,31,a)].
33 sdtpldt0(sz10,smndt0(xp)) = smndt0(sz10).  [resolve(17,a,32,a)].
34 smndt0(sz10) != smndt0(sz10) | sdtpldt0(sz10,smndt0(xp)) != smndt0(sz10).  [para(27(a,1),18(a,1))].
35 smndt0(sz10) != smndt0(sz10) | smndt0(sz10) != smndt0(sz10).  [para(33(a,1),34(b,1))].
36 smndt0(sz10) != smndt0(sz10).  [copy(35),xx(a)].
37 $F.  [copy(36),xx(a)].

============================== end of proof ==========================
