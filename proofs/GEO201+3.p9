============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n153.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 06:00:23 CDT 2014
% CPUTime    : 0.14 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 6496 was started by sandbox on n153.star.cs.uiowa.edu,
Fri Jun  6 06:00:23 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_6464_n153.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.01 (+ 0.00) seconds.
% Length of proof is 37.
% Level of proof is 7.
% Maximum clause weight is 23.000.
% Given clauses 45.


1 (all A -distinct_lines(A,A)).  [assumption].
2 (all A -convergent_lines(A,A)).  [assumption].
3 (all A all B all C (distinct_lines(A,B) -> distinct_lines(A,C) | distinct_lines(B,C))).  [assumption].
4 (all A all B all C (convergent_lines(A,B) -> convergent_lines(A,C) | convergent_lines(B,C))).  [assumption].
5 (all A all B all C all D (distinct_points(A,B) & distinct_lines(C,D) -> apart_point_and_line(A,C) | apart_point_and_line(A,D) | apart_point_and_line(B,C) | apart_point_and_line(B,D))).  [assumption].
6 (all A all B all C (apart_point_and_line(A,B) -> distinct_lines(B,C) | apart_point_and_line(A,C))).  [assumption].
7 (all A all B all C (convergent_lines(A,B) -> distinct_lines(B,C) | convergent_lines(A,C))).  [assumption].
8 (all A all B (distinct_lines(A,B) -> convergent_lines(A,B))).  [assumption].
9 (all A all B -convergent_lines(parallel_through_point(B,A),B)).  [assumption].
10 (all A all B -apart_point_and_line(A,parallel_through_point(B,A))).  [assumption].
11 (all A all B (equal_points(A,B) <-> -distinct_points(A,B))).  [assumption].
12 -(all A all B (convergent_lines(A,B) -> equal_points(intersection_point(A,B),intersection_point(B,A)))).  [assumption].
13 equal_points(A,B) | distinct_points(A,B).  [clausify(11)].
14 -equal_points(intersection_point(c1,c2),intersection_point(c2,c1)).  [clausify(12)].
15 convergent_lines(c1,c2).  [clausify(12)].
16 -distinct_lines(A,A).  [clausify(1)].
17 -convergent_lines(A,A).  [clausify(2)].
18 -convergent_lines(parallel_through_point(A,B),A).  [clausify(9)].
19 -apart_point_and_line(A,parallel_through_point(B,A)).  [clausify(10)].
20 -distinct_lines(A,B) | convergent_lines(A,B).  [clausify(8)].
21 -distinct_lines(A,B) | distinct_lines(A,C) | distinct_lines(B,C).  [clausify(3)].
22 -convergent_lines(A,B) | convergent_lines(A,C) | convergent_lines(B,C).  [clausify(4)].
23 -apart_point_and_line(A,B) | distinct_lines(B,C) | apart_point_and_line(A,C).  [clausify(6)].
24 -convergent_lines(A,B) | distinct_lines(B,C) | convergent_lines(A,C).  [clausify(7)].
25 -distinct_points(A,B) | -distinct_lines(C,D) | apart_point_and_line(A,C) | apart_point_and_line(A,D) | apart_point_and_line(B,C) | apart_point_and_line(B,D).  [clausify(5)].
26 distinct_points(intersection_point(c1,c2),intersection_point(c2,c1)).  [resolve(14,a,13,a)].
27 -distinct_lines(parallel_through_point(A,B),A).  [resolve(20,b,18,a)].
28 -convergent_lines(A,B) | convergent_lines(B,A).  [resolve(22,b,17,a)].
29 -convergent_lines(A,parallel_through_point(A,B)).  [resolve(28,b,18,a)].
30 distinct_lines(c2,A) | convergent_lines(c1,A).  [resolve(24,a,15,a)].
31 -distinct_lines(A,B) | apart_point_and_line(intersection_point(c1,c2),A) | apart_point_and_line(intersection_point(c1,c2),B) | apart_point_and_line(intersection_point(c2,c1),A) | apart_point_and_line(intersection_point(c2,c1),B).  [resolve(26,a,25,a)].
32 -distinct_lines(A,B) | distinct_lines(B,A).  [resolve(21,b,16,a)].
33 -distinct_lines(A,parallel_through_point(A,B)).  [resolve(32,b,27,a)].
34 -convergent_lines(A,parallel_through_point(B,C)) | convergent_lines(A,B).  [resolve(24,b,27,a)].
35 -convergent_lines(A,parallel_through_point(parallel_through_point(A,B),C)).  [resolve(34,b,29,a)].
36 convergent_lines(c1,A) | distinct_lines(c2,B) | distinct_lines(A,B).  [resolve(30,a,21,a)].
37 -apart_point_and_line(A,B) | apart_point_and_line(A,parallel_through_point(B,C)).  [resolve(23,b,33,a)].
38 -apart_point_and_line(A,B).  [resolve(37,b,19,a)].
39 -distinct_lines(A,B) | apart_point_and_line(intersection_point(c1,c2),B) | apart_point_and_line(intersection_point(c2,c1),A) | apart_point_and_line(intersection_point(c2,c1),B).  [resolve(38,a,31,b)].
40 -distinct_lines(A,B) | apart_point_and_line(intersection_point(c2,c1),A) | apart_point_and_line(intersection_point(c2,c1),B).  [resolve(38,a,39,b)].
41 -distinct_lines(A,B) | apart_point_and_line(intersection_point(c2,c1),B).  [resolve(38,a,40,b)].
42 -distinct_lines(A,B).  [resolve(38,a,41,b)].
43 convergent_lines(c1,A) | distinct_lines(A,B).  [resolve(42,a,36,b)].
44 convergent_lines(c1,A).  [resolve(42,a,43,b)].
45 $F.  [resolve(44,a,35,a)].

============================== end of proof ==========================
