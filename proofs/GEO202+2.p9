============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n138.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 06:02:43 CDT 2014
% CPUTime    : 0.13 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 1451 was started by sandbox on n138.star.cs.uiowa.edu,
Fri Jun  6 06:02:43 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_1419_n138.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.01 (+ 0.00) seconds.
% Length of proof is 26.
% Level of proof is 4.
% Maximum clause weight is 18.000.
% Given clauses 57.


1 (all A -distinct_points(A,A)).  [assumption].
2 (all A all B all C (distinct_points(A,B) -> distinct_points(A,C) | distinct_points(B,C))).  [assumption].
3 (all A all B all C (distinct_points(A,B) -> (apart_point_and_line(C,line_connecting(A,B)) -> distinct_points(C,A) & distinct_points(C,B)))).  [assumption].
4 (all A all B all C (convergent_lines(A,B) -> (apart_point_and_line(C,A) | apart_point_and_line(C,B) -> distinct_points(C,intersection_point(A,B))))).  [assumption].
5 (all A all B all C all D (distinct_points(A,B) & distinct_lines(C,D) -> apart_point_and_line(A,C) | apart_point_and_line(A,D) | apart_point_and_line(B,C) | apart_point_and_line(B,D))).  [assumption].
6 (all A all B (convergent_lines(A,B) -> distinct_lines(A,B))).  [assumption].
7 -(all A all B all C (distinct_points(A,B) & distinct_points(A,C) & convergent_lines(line_connecting(A,B),line_connecting(A,C)) -> -distinct_points(intersection_point(line_connecting(A,B),line_connecting(A,C)),A))).  [assumption].
8 distinct_points(c1,c2).  [clausify(7)].
9 distinct_points(c1,c3).  [clausify(7)].
10 convergent_lines(line_connecting(c1,c2),line_connecting(c1,c3)).  [clausify(7)].
11 distinct_points(intersection_point(line_connecting(c1,c2),line_connecting(c1,c3)),c1).  [clausify(7)].
12 -distinct_points(A,A).  [clausify(1)].
13 -convergent_lines(A,B) | distinct_lines(A,B).  [clausify(6)].
14 -distinct_points(A,B) | distinct_points(A,C) | distinct_points(B,C).  [clausify(2)].
15 -distinct_points(A,B) | -apart_point_and_line(C,line_connecting(A,B)) | distinct_points(C,A).  [clausify(3)].
16 -convergent_lines(A,B) | -apart_point_and_line(C,A) | distinct_points(C,intersection_point(A,B)).  [clausify(4)].
17 -convergent_lines(A,B) | -apart_point_and_line(C,B) | distinct_points(C,intersection_point(A,B)).  [clausify(4)].
18 -distinct_points(A,B) | -distinct_lines(C,D) | apart_point_and_line(A,C) | apart_point_and_line(A,D) | apart_point_and_line(B,C) | apart_point_and_line(B,D).  [clausify(5)].
19 distinct_lines(line_connecting(c1,c2),line_connecting(c1,c3)).  [resolve(13,a,10,a)].
20 distinct_points(intersection_point(line_connecting(c1,c2),line_connecting(c1,c3)),A) | distinct_points(c1,A).  [resolve(14,a,11,a)].
21 -apart_point_and_line(A,line_connecting(c1,c3)) | distinct_points(A,c1).  [resolve(15,a,9,a)].
22 -apart_point_and_line(c1,line_connecting(c1,c3)).  [resolve(21,b,12,a)].
23 -apart_point_and_line(A,line_connecting(c1,c2)) | distinct_points(A,c1).  [resolve(15,a,8,a)].
24 -apart_point_and_line(c1,line_connecting(c1,c2)).  [resolve(23,b,12,a)].
25 -apart_point_and_line(A,line_connecting(c1,c2)) | distinct_points(A,intersection_point(line_connecting(c1,c2),line_connecting(c1,c3))).  [resolve(16,a,10,a)].
26 -apart_point_and_line(intersection_point(line_connecting(c1,c2),line_connecting(c1,c3)),line_connecting(c1,c2)).  [resolve(25,b,12,a)].
27 -apart_point_and_line(A,line_connecting(c1,c3)) | distinct_points(A,intersection_point(line_connecting(c1,c2),line_connecting(c1,c3))).  [resolve(17,a,10,a)].
28 -apart_point_and_line(intersection_point(line_connecting(c1,c2),line_connecting(c1,c3)),line_connecting(c1,c3)).  [resolve(27,b,12,a)].
29 distinct_points(c1,intersection_point(line_connecting(c1,c2),line_connecting(c1,c3))).  [resolve(20,a,12,a)].
30 -distinct_points(A,B) | apart_point_and_line(A,line_connecting(c1,c2)) | apart_point_and_line(A,line_connecting(c1,c3)) | apart_point_and_line(B,line_connecting(c1,c2)) | apart_point_and_line(B,line_connecting(c1,c3)).  [resolve(18,b,19,a)].
31 -distinct_points(c1,A) | apart_point_and_line(c1,line_connecting(c1,c3)) | apart_point_and_line(A,line_connecting(c1,c2)) | apart_point_and_line(A,line_connecting(c1,c3)).  [resolve(30,b,24,a)].
32 -distinct_points(c1,A) | apart_point_and_line(A,line_connecting(c1,c2)) | apart_point_and_line(A,line_connecting(c1,c3)).  [resolve(31,b,22,a)].
33 -distinct_points(c1,intersection_point(line_connecting(c1,c2),line_connecting(c1,c3))) | apart_point_and_line(intersection_point(line_connecting(c1,c2),line_connecting(c1,c3)),line_connecting(c1,c3)).  [resolve(32,b,26,a)].
34 -distinct_points(c1,intersection_point(line_connecting(c1,c2),line_connecting(c1,c3))).  [resolve(33,b,28,a)].
35 $F.  [resolve(29,a,34,a)].

============================== end of proof ==========================
