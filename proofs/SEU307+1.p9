============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n123.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 07:54:33 CDT 2014
% CPUTime    : 0.31 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 31574 was started by sandbox on n123.star.cs.uiowa.edu,
Fri Jun  6 07:54:33 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_31542_n123.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.05 (+ 0.00) seconds.
% Length of proof is 24.
% Level of proof is 4.
% Maximum clause weight is 16.000.
% Given clauses 360.


1 (all A all B set_intersection2(A,B) = set_intersection2(B,A)).  [assumption].
2 (all A all B subset(A,A)).  [assumption].
3 (all A all B all C (element(B,powerset(A)) & element(C,powerset(A)) -> subset_intersection2(A,B,C) = set_intersection2(B,C))).  [assumption].
4 (all A all B (element(A,powerset(B)) <-> subset(A,B))).  [assumption].
5 (all A (one_sorted_str(A) -> cast_as_carrier_subset(A) = the_carrier(A))).  [assumption].
6 (all A all B (subset(A,B) -> set_intersection2(A,B) = A)).  [assumption].
7 -(all A (one_sorted_str(A) -> (all B (element(B,powerset(the_carrier(A))) -> subset_intersection2(the_carrier(A),B,cast_as_carrier_subset(A)) = B)))).  [assumption].
8 element(A,powerset(B)) | -subset(A,B).  [clausify(4)].
9 subset(A,A).  [clausify(2)].
10 -element(A,powerset(B)) | subset(A,B).  [clausify(4)].
11 -subset(A,B) | set_intersection2(A,B) = A.  [clausify(6)].
12 -one_sorted_str(A) | cast_as_carrier_subset(A) = the_carrier(A).  [clausify(5)].
13 one_sorted_str(c3).  [clausify(7)].
14 set_intersection2(A,B) = set_intersection2(B,A).  [clausify(1)].
15 -element(A,powerset(B)) | -element(C,powerset(B)) | subset_intersection2(B,A,C) = set_intersection2(A,C).  [clausify(3)].
16 element(c4,powerset(the_carrier(c3))).  [clausify(7)].
17 subset_intersection2(the_carrier(c3),c4,cast_as_carrier_subset(c3)) != c4.  [clausify(7)].
18 element(A,powerset(A)).  [resolve(8,b,9,a)].
19 set_intersection2(A,B) = A | -element(A,powerset(B)).  [resolve(11,a,10,b)].
20 cast_as_carrier_subset(c3) = the_carrier(c3).  [resolve(13,a,12,a)].
21 subset_intersection2(the_carrier(c3),c4,the_carrier(c3)) != c4.  [para(20(a,1),17(a,1,3))].
22 -element(A,powerset(the_carrier(c3))) | subset_intersection2(the_carrier(c3),c4,A) = set_intersection2(c4,A).  [resolve(16,a,15,a)].
23 -element(A,powerset(the_carrier(c3))) | subset_intersection2(the_carrier(c3),c4,A) = set_intersection2(A,c4).  [para(14(a,1),22(b,2))].
24 set_intersection2(c4,the_carrier(c3)) = c4.  [resolve(19,b,16,a)].
25 subset_intersection2(the_carrier(c3),c4,the_carrier(c3)) = set_intersection2(the_carrier(c3),c4).  [resolve(23,a,18,a)].
26 subset_intersection2(the_carrier(c3),c4,the_carrier(c3)) = set_intersection2(c4,the_carrier(c3)).  [para(14(a,1),25(a,2))].
27 subset_intersection2(the_carrier(c3),c4,the_carrier(c3)) = c4.  [para(24(a,1),26(a,2))].
28 $F.  [resolve(21,a,27,a)].

============================== end of proof ==========================
