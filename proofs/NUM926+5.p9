============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n125.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 23:48:43 CDT 2014
% CPUTime    : 0.23 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 54509 was started by sandbox on n125.star.cs.uiowa.edu,
Fri Jun  6 23:48:43 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_54477_n125.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.04 (+ 0.00) seconds.
% Length of proof is 19.
% Level of proof is 4.
% Maximum clause weight is 37.000.
% Given clauses 8.


1 t = one_one(int) -> (exists A exists B plus_plus(int,power_power(int,A,number_number_of(nat,bit0(bit1(pls)))),power_power(int,B,number_number_of(nat,bit0(bit1(pls))))) = plus_plus(int,times_times(int,number_number_of(int,bit0(bit0(bit1(pls)))),m),one_one(int))).  [assumption].
2 ord_less(int,one_one(int),t) -> (exists A exists B plus_plus(int,power_power(int,A,number_number_of(nat,bit0(bit1(pls)))),power_power(int,B,number_number_of(nat,bit0(bit1(pls))))) = plus_plus(int,times_times(int,number_number_of(int,bit0(bit0(bit1(pls)))),m),one_one(int))).  [assumption].
3 (all A all B (ord_less(int,A,B) <-> ord_less_eq(int,A,B) & A != B)).  [assumption].
4 (all A all B times_times(int,A,B) = times_times(int,B,A)).  [assumption].
5 (all A number_number_of(int,A) = A).  [assumption].
6 (all A all B plus_plus(int,A,B) = plus_plus(int,B,A)).  [assumption].
7 -(exists A exists B plus_plus(int,power_power(int,A,number_number_of(nat,bit0(bit1(pls)))),power_power(int,B,number_number_of(nat,bit0(bit1(pls))))) = plus_plus(int,times_times(int,number_number_of(int,bit0(bit0(bit1(pls)))),m),one_one(int))).  [assumption].
8 ord_less_eq(int,one_one(int),t).  [assumption].
9 one_one(int) != t | plus_plus(int,power_power(int,c1,number_number_of(nat,bit0(bit1(pls)))),power_power(int,c2,number_number_of(nat,bit0(bit1(pls))))) = plus_plus(int,times_times(int,number_number_of(int,bit0(bit0(bit1(pls)))),m),one_one(int)).  [clausify(1)].
10 -ord_less(int,one_one(int),t) | plus_plus(int,power_power(int,c3,number_number_of(nat,bit0(bit1(pls)))),power_power(int,c4,number_number_of(nat,bit0(bit1(pls))))) = plus_plus(int,times_times(int,number_number_of(int,bit0(bit0(bit1(pls)))),m),one_one(int)).  [clausify(2)].
11 ord_less(int,A,B) | -ord_less_eq(int,A,B) | B = A.  [clausify(3)].
12 times_times(int,A,B) = times_times(int,B,A).  [clausify(4)].
13 number_number_of(int,A) = A.  [clausify(5)].
14 plus_plus(int,A,B) = plus_plus(int,B,A).  [clausify(6)].
15 plus_plus(int,power_power(int,A,number_number_of(nat,bit0(bit1(pls)))),power_power(int,B,number_number_of(nat,bit0(bit1(pls))))) != plus_plus(int,times_times(int,number_number_of(int,bit0(bit0(bit1(pls)))),m),one_one(int)).  [clausify(7)].
16 plus_plus(int,power_power(int,A,number_number_of(nat,bit0(bit1(pls)))),power_power(int,B,number_number_of(nat,bit0(bit1(pls))))) != plus_plus(int,times_times(int,bit0(bit0(bit1(pls))),m),one_one(int)).  [para(13(a,1),15(a,2,2,2))].
17 plus_plus(int,power_power(int,A,number_number_of(nat,bit0(bit1(pls)))),power_power(int,B,number_number_of(nat,bit0(bit1(pls))))) != plus_plus(int,times_times(int,m,bit0(bit0(bit1(pls)))),one_one(int)).  [para(12(a,1),16(a,2,2))].
18 plus_plus(int,power_power(int,A,number_number_of(nat,bit0(bit1(pls)))),power_power(int,B,number_number_of(nat,bit0(bit1(pls))))) != plus_plus(int,one_one(int),times_times(int,m,bit0(bit0(bit1(pls))))).  [para(14(a,1),17(a,2))].
19 -ord_less(int,one_one(int),t) | plus_plus(int,power_power(int,c3,number_number_of(nat,bit0(bit1(pls)))),power_power(int,c4,number_number_of(nat,bit0(bit1(pls))))) = plus_plus(int,times_times(int,bit0(bit0(bit1(pls))),m),one_one(int)).  [para(13(a,1),10(b,2,2,2))].
20 -ord_less(int,one_one(int),t) | plus_plus(int,power_power(int,c3,number_number_of(nat,bit0(bit1(pls)))),power_power(int,c4,number_number_of(nat,bit0(bit1(pls))))) = plus_plus(int,times_times(int,m,bit0(bit0(bit1(pls)))),one_one(int)).  [para(12(a,1),19(b,2,2))].
21 -ord_less(int,one_one(int),t) | plus_plus(int,power_power(int,c3,number_number_of(nat,bit0(bit1(pls)))),power_power(int,c4,number_number_of(nat,bit0(bit1(pls))))) = plus_plus(int,one_one(int),times_times(int,m,bit0(bit0(bit1(pls))))).  [para(14(a,1),20(b,2))].
22 -ord_less(int,one_one(int),t).  [resolve(18,a,21,b)].
23 one_one(int) != t | plus_plus(int,power_power(int,c1,number_number_of(nat,bit0(bit1(pls)))),power_power(int,c2,number_number_of(nat,bit0(bit1(pls))))) = plus_plus(int,times_times(int,bit0(bit0(bit1(pls))),m),one_one(int)).  [para(13(a,1),9(b,2,2,2))].
24 one_one(int) != t | plus_plus(int,power_power(int,c1,number_number_of(nat,bit0(bit1(pls)))),power_power(int,c2,number_number_of(nat,bit0(bit1(pls))))) = plus_plus(int,times_times(int,m,bit0(bit0(bit1(pls)))),one_one(int)).  [para(12(a,1),23(b,2,2))].
25 one_one(int) != t | plus_plus(int,power_power(int,c1,number_number_of(nat,bit0(bit1(pls)))),power_power(int,c2,number_number_of(nat,bit0(bit1(pls))))) = plus_plus(int,one_one(int),times_times(int,m,bit0(bit0(bit1(pls))))).  [para(14(a,1),24(b,2))].
26 one_one(int) != t.  [resolve(18,a,25,b)].
27 ord_less(int,one_one(int),t) | t = one_one(int).  [resolve(11,b,8,a)].
28 ord_less(int,one_one(int),t) | one_one(int) = t.  [copy(27),flip(b)].
29 one_one(int) = t.  [resolve(22,a,28,a)].
30 $F.  [resolve(26,a,29,a)].

============================== end of proof ==========================
