============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n093.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 05:02:28 CDT 2014
% CPUTime    : 0.15 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 57449 was started by sandbox on n093.star.cs.uiowa.edu,
Fri Jun  6 05:02:28 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_57417_n093.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.01 (+ 0.00) seconds.
% Length of proof is 31.
% Level of proof is 5.
% Maximum clause weight is 18.000.
% Given clauses 48.


1 (all A -convergent_lines(A,A)).  [assumption].
2 (all A all B all C (convergent_lines(A,B) -> convergent_lines(A,C) | convergent_lines(B,C))).  [assumption].
3 (all A all B (convergent_lines(A,B) -> -apart_point_and_line(intersection_point(A,B),A))).  [assumption].
4 (all A all B (convergent_lines(A,B) -> -apart_point_and_line(intersection_point(A,B),B))).  [assumption].
5 (all A all B all C all D (distinct_points(A,B) & distinct_lines(C,D) -> apart_point_and_line(A,C) | apart_point_and_line(A,D) | apart_point_and_line(B,C) | apart_point_and_line(B,D))).  [assumption].
6 (all A all B all C (convergent_lines(A,B) -> distinct_lines(B,C) | convergent_lines(A,C))).  [assumption].
7 (all A all B (equal_points(A,B) <-> -distinct_points(A,B))).  [assumption].
8 (all A all B (incident_point_and_line(A,B) <-> -apart_point_and_line(A,B))).  [assumption].
9 -(all A all B all C all D (distinct_points(A,B) & convergent_lines(C,D) & incident_point_and_line(A,C) & incident_point_and_line(A,D) -> equal_points(A,intersection_point(C,D)))).  [assumption].
10 -incident_point_and_line(A,B) | -apart_point_and_line(A,B).  [clausify(8)].
11 incident_point_and_line(c1,c3).  [clausify(9)].
12 incident_point_and_line(c1,c4).  [clausify(9)].
13 -equal_points(c1,intersection_point(c3,c4)).  [clausify(9)].
14 equal_points(A,B) | distinct_points(A,B).  [clausify(7)].
15 convergent_lines(c3,c4).  [clausify(9)].
16 -convergent_lines(A,A).  [clausify(1)].
17 -convergent_lines(A,B) | -apart_point_and_line(intersection_point(A,B),A).  [clausify(3)].
18 -convergent_lines(A,B) | -apart_point_and_line(intersection_point(A,B),B).  [clausify(4)].
19 -convergent_lines(A,B) | convergent_lines(A,C) | convergent_lines(B,C).  [clausify(2)].
20 -convergent_lines(A,B) | distinct_lines(B,C) | convergent_lines(A,C).  [clausify(6)].
21 -distinct_points(A,B) | -distinct_lines(C,D) | apart_point_and_line(A,C) | apart_point_and_line(A,D) | apart_point_and_line(B,C) | apart_point_and_line(B,D).  [clausify(5)].
22 -apart_point_and_line(c1,c3).  [resolve(10,a,11,a)].
23 -apart_point_and_line(c1,c4).  [resolve(10,a,12,a)].
24 distinct_points(c1,intersection_point(c3,c4)).  [resolve(13,a,14,a)].
25 -apart_point_and_line(intersection_point(c3,c4),c3).  [resolve(17,a,15,a)].
26 -apart_point_and_line(intersection_point(c3,c4),c4).  [resolve(18,a,15,a)].
27 convergent_lines(c3,A) | convergent_lines(c4,A).  [resolve(19,a,15,a)].
28 -distinct_lines(A,B) | apart_point_and_line(c1,A) | apart_point_and_line(c1,B) | apart_point_and_line(intersection_point(c3,c4),A) | apart_point_and_line(intersection_point(c3,c4),B).  [resolve(21,a,24,a)].
29 -distinct_lines(c3,A) | apart_point_and_line(c1,A) | apart_point_and_line(intersection_point(c3,c4),c3) | apart_point_and_line(intersection_point(c3,c4),A).  [resolve(28,b,22,a)].
30 -distinct_lines(c3,c4) | apart_point_and_line(intersection_point(c3,c4),c3) | apart_point_and_line(intersection_point(c3,c4),c4).  [resolve(29,b,23,a)].
31 -distinct_lines(c3,c4) | apart_point_and_line(intersection_point(c3,c4),c4).  [resolve(30,b,25,a)].
32 -distinct_lines(c3,c4).  [resolve(31,b,26,a)].
33 convergent_lines(c3,A) | convergent_lines(c4,B) | convergent_lines(A,B).  [resolve(27,b,19,a)].
34 convergent_lines(c3,c3) | convergent_lines(c4,c3).  [factor(33,a,c)].
35 convergent_lines(c4,c3).  [resolve(16,a,34,a)].
36 -convergent_lines(A,c3) | convergent_lines(A,c4).  [resolve(20,b,32,a)].
37 -convergent_lines(c4,c3).  [resolve(36,b,16,a)].
38 $F.  [resolve(35,a,37,a)].

============================== end of proof ==========================
