============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n165.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 04:58:08 CDT 2014
% CPUTime    : 0.15 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 25249 was started by sandbox on n165.star.cs.uiowa.edu,
Fri Jun  6 04:58:08 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_25216_n165.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.01 (+ 0.00) seconds.
% Length of proof is 21.
% Level of proof is 5.
% Maximum clause weight is 9.000.
% Given clauses 48.


1 (all A all B (convergent_lines(A,B) -> -apart_point_and_line(intersection_point(A,B),A))).  [assumption].
2 (all A all B (convergent_lines(A,B) -> -apart_point_and_line(intersection_point(A,B),B))).  [assumption].
3 (all A all B all C (apart_point_and_line(A,B) -> distinct_points(A,C) | apart_point_and_line(C,B))).  [assumption].
4 (all A all B (equal_points(A,B) <-> -distinct_points(A,B))).  [assumption].
5 (all A all B (incident_point_and_line(A,B) <-> -apart_point_and_line(A,B))).  [assumption].
6 -(all A all B all C all D (distinct_points(A,B) & convergent_lines(C,D) & equal_points(A,intersection_point(C,D)) -> incident_point_and_line(A,C) & incident_point_and_line(A,D))).  [assumption].
7 -equal_points(A,B) | -distinct_points(A,B).  [clausify(4)].
8 equal_points(c1,intersection_point(c3,c4)).  [clausify(6)].
9 convergent_lines(c3,c4).  [clausify(6)].
10 incident_point_and_line(A,B) | apart_point_and_line(A,B).  [clausify(5)].
11 -incident_point_and_line(c1,c3) | -incident_point_and_line(c1,c4).  [clausify(6)].
12 -convergent_lines(A,B) | -apart_point_and_line(intersection_point(A,B),A).  [clausify(1)].
13 -convergent_lines(A,B) | -apart_point_and_line(intersection_point(A,B),B).  [clausify(2)].
14 -apart_point_and_line(A,B) | distinct_points(A,C) | apart_point_and_line(C,B).  [clausify(3)].
15 -distinct_points(c1,intersection_point(c3,c4)).  [resolve(7,a,8,a)].
16 -incident_point_and_line(c1,c3) | apart_point_and_line(c1,c4).  [resolve(11,b,10,a)].
17 -apart_point_and_line(intersection_point(c3,c4),c3).  [resolve(12,a,9,a)].
18 -apart_point_and_line(intersection_point(c3,c4),c4).  [resolve(13,a,9,a)].
19 -apart_point_and_line(c1,A) | apart_point_and_line(intersection_point(c3,c4),A).  [resolve(14,b,15,a)].
20 -apart_point_and_line(c1,c3).  [resolve(19,b,17,a)].
21 apart_point_and_line(c1,c4) | apart_point_and_line(c1,c3).  [resolve(16,a,10,a)].
22 apart_point_and_line(c1,c4).  [resolve(20,a,21,b)].
23 -apart_point_and_line(c1,A) | apart_point_and_line(intersection_point(c3,c4),A).  [resolve(14,b,15,a)].
24 -apart_point_and_line(c1,c4).  [resolve(23,b,18,a)].
25 $F.  [resolve(22,a,24,a)].

============================== end of proof ==========================
