============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n099.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 08:25:28 CDT 2014
% CPUTime    : 0.28 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 36413 was started by sandbox on n099.star.cs.uiowa.edu,
Fri Jun  6 08:25:28 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_36381_n099.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.06 (+ 0.00) seconds.
% Length of proof is 50.
% Level of proof is 8.
% Maximum clause weight is 18.000.
% Given clauses 499.


1 (all A (-empty_carrier(A) & one_sorted_str(A) -> (exists B (element(B,powerset(the_carrier(A))) & -empty(B))))).  [assumption].
2 (all A all B (element(A,B) -> empty(B) | in(A,B))).  [assumption].
3 (all A all B (element(B,powerset(A)) -> subset_complement(A,subset_complement(A,B)) = B)).  [assumption].
4 (all A exists B element(B,A)).  [assumption].
5 (all A all B (element(B,powerset(A)) -> element(subset_complement(A,B),powerset(A)))).  [assumption].
6 (all A (-empty_carrier(A) & one_sorted_str(A) -> -empty(the_carrier(A)))).  [assumption].
7 (all A all B all C (in(A,B) & element(B,powerset(C)) -> element(A,C))).  [assumption].
8 (all A all B -(in(A,B) & empty(B))).  [assumption].
9 (all A (A != empty_set -> (all B (element(B,powerset(A)) -> (all C (element(C,A) -> (-in(C,B) -> in(C,subset_complement(A,B))))))))).  [assumption].
10 (all A all B all C (element(C,powerset(A)) -> -(in(B,subset_complement(A,C)) & in(B,C)))).  [assumption].
11 -(all A (-empty_carrier(A) & one_sorted_str(A) -> (all B (element(B,powerset(the_carrier(A))) -> (all C (element(C,the_carrier(A)) -> (in(C,subset_complement(the_carrier(A),B)) <-> -in(C,B)))))))).  [assumption].
12 empty_carrier(A) | -one_sorted_str(A) | -empty(f1(A)).  [clausify(1)].
13 one_sorted_str(c4).  [clausify(11)].
14 empty_carrier(A) | -one_sorted_str(A) | -empty(the_carrier(A)).  [clausify(6)].
15 empty_carrier(A) | -one_sorted_str(A) | element(f1(A),powerset(the_carrier(A))).  [clausify(1)].
16 empty(empty_set).  [assumption].
17 element(f2(A),A).  [clausify(4)].
18 element(c6,the_carrier(c4)).  [clausify(11)].
19 element(c5,powerset(the_carrier(c4))).  [clausify(11)].
20 -empty_carrier(c4).  [clausify(11)].
21 -in(A,B) | -empty(B).  [clausify(8)].
22 -element(A,powerset(B)) | -in(C,subset_complement(B,A)) | -in(C,A).  [clausify(10)].
23 -element(A,B) | empty(B) | in(A,B).  [clausify(2)].
24 in(c6,subset_complement(the_carrier(c4),c5)) | -in(c6,c5).  [clausify(11)].
25 -in(c6,subset_complement(the_carrier(c4),c5)) | in(c6,c5).  [clausify(11)].
26 -element(A,powerset(B)) | element(subset_complement(B,A),powerset(B)).  [clausify(5)].
27 -in(A,B) | -element(B,powerset(C)) | element(A,C).  [clausify(7)].
28 -element(A,powerset(B)) | subset_complement(B,subset_complement(B,A)) = A.  [clausify(3)].
29 empty_set = A | -element(B,powerset(A)) | -element(C,A) | in(C,B) | in(C,subset_complement(A,B)).  [clausify(9)].
30 empty_carrier(c4) | -empty(f1(c4)).  [resolve(12,b,13,a)].
31 -empty(f1(c4)).  [resolve(20,a,30,a)].
32 empty_carrier(c4) | -empty(the_carrier(c4)).  [resolve(14,b,13,a)].
33 -empty(the_carrier(c4)).  [resolve(20,a,32,a)].
34 empty_carrier(c4) | element(f1(c4),powerset(the_carrier(c4))).  [resolve(15,b,13,a)].
35 element(f1(c4),powerset(the_carrier(c4))).  [resolve(20,a,34,a)].
36 -in(A,empty_set).  [resolve(21,b,16,a)].
37 empty(A) | in(f2(A),A).  [resolve(23,a,17,a)].
38 element(subset_complement(the_carrier(c4),c5),powerset(the_carrier(c4))).  [resolve(26,a,19,a)].
39 subset_complement(the_carrier(c4),subset_complement(the_carrier(c4),c5)) = c5.  [resolve(28,a,19,a)].
40 empty_set = the_carrier(c4) | -element(A,the_carrier(c4)) | in(A,c5) | in(A,subset_complement(the_carrier(c4),c5)).  [resolve(29,b,19,a)].
41 the_carrier(c4) = empty_set | -element(A,the_carrier(c4)) | in(A,c5) | in(A,subset_complement(the_carrier(c4),c5)).  [copy(40),flip(a)].
42 empty(A) | -element(A,powerset(B)) | element(f2(A),B).  [resolve(37,b,27,a)].
43 -element(subset_complement(the_carrier(c4),c5),powerset(the_carrier(c4))) | -in(A,c5) | -in(A,subset_complement(the_carrier(c4),c5)).  [para(39(a,1),22(b,2))].
44 -in(A,c5) | -in(A,subset_complement(the_carrier(c4),c5)).  [resolve(38,a,43,a)].
45 the_carrier(c4) = empty_set | in(c6,c5) | in(c6,subset_complement(the_carrier(c4),c5)).  [resolve(41,b,18,a)].
46 empty(f1(c4)) | element(f2(f1(c4)),the_carrier(c4)).  [resolve(42,b,35,a)].
47 element(f2(f1(c4)),the_carrier(c4)).  [resolve(31,a,46,a)].
48 empty(the_carrier(c4)) | in(f2(f1(c4)),the_carrier(c4)).  [resolve(47,a,23,a)].
49 in(f2(f1(c4)),the_carrier(c4)).  [resolve(33,a,48,a)].
50 the_carrier(c4) = empty_set | in(c6,c5) | in(c6,c5).  [resolve(45,c,25,a)].
51 the_carrier(c4) = empty_set | in(c6,c5).  [copy(50),merge(c)].
52 the_carrier(c4) = empty_set | in(c6,subset_complement(the_carrier(c4),c5)).  [resolve(51,b,24,b)].
53 the_carrier(c4) = empty_set | -in(c6,c5).  [resolve(52,b,44,b)].
54 the_carrier(c4) = empty_set | the_carrier(c4) = empty_set.  [resolve(53,b,51,b)].
55 the_carrier(c4) = empty_set.  [copy(54),merge(b)].
56 in(f2(f1(c4)),empty_set).  [para(55(a,1),49(a,2))].
57 $F.  [resolve(36,a,56,a)].

============================== end of proof ==========================
