============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n078.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 07:49:03 CDT 2014
% CPUTime    : 0.16 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 63842 was started by sandbox on n078.star.cs.uiowa.edu,
Fri Jun  6 07:49:03 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_63810_n078.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.02 (+ 0.00) seconds.
% Length of proof is 20.
% Level of proof is 6.
% Maximum clause weight is 25.000.
% Given clauses 97.


1 (all A all B (ok(triple(A,B,bad)) <-> $F)).  [assumption].
2 (all A all B all C (-ok(triple(A,B,C)) -> C = bad)).  [assumption].
3 (all A all B all C all D all E all F (succ_cpq(triple(A,B,C),triple(D,E,F)) -> (-ok(triple(D,E,F)) -> -ok(im_succ_cpq(triple(D,E,F)))))) -> (all V6 all V7 all V8 (-ok(triple(V6,V7,V8)) -> (all V9 all V10 all V11 (succ_cpq(triple(V6,V7,V8),triple(V9,V10,V11)) -> -ok(triple(V9,V10,V11)))))).  [assumption].
4 (all A all B all C (-ok(triple(A,B,C)) -> -ok(im_succ_cpq(triple(A,B,C))))).  [assumption].
5 -(all A all B all C (-ok(triple(A,B,C)) -> (all D all E all F (succ_cpq(triple(A,B,C),triple(D,E,F)) -> -ok(triple(D,E,F)))))).  [assumption].
6 ok(triple(c10,c11,c12)).  [clausify(5)].
7 ok(triple(A,B,C)) | bad = C.  [clausify(2)].
8 succ_cpq(triple(c7,c8,c9),triple(c10,c11,c12)).  [clausify(5)].
9 -ok(triple(A,B,bad)).  [clausify(1)].
10 -ok(triple(c7,c8,c9)).  [clausify(5)].
11 ok(triple(A,B,C)) | -ok(im_succ_cpq(triple(A,B,C))).  [clausify(4)].
12 -ok(triple(c4,c5,c6)) | ok(triple(A,B,C)) | -succ_cpq(triple(A,B,C),triple(D,E,F)) | -ok(triple(D,E,F)).  [clausify(3)].
13 ok(im_succ_cpq(triple(c4,c5,c6))) | ok(triple(A,B,C)) | -succ_cpq(triple(A,B,C),triple(D,E,F)) | -ok(triple(D,E,F)).  [clausify(3)].
14 bad = c9.  [resolve(10,a,7,a)].
15 c9 = bad.  [copy(14),flip(a)].
16 succ_cpq(triple(c7,c8,bad),triple(c10,c11,c12)).  [para(15(a,1),8(a,1,3))].
17 -ok(im_succ_cpq(triple(A,B,bad))).  [resolve(11,a,9,a)].
18 ok(im_succ_cpq(triple(c4,c5,c6))) | ok(triple(c7,c8,bad)) | -ok(triple(c10,c11,c12)).  [resolve(16,a,13,c)].
19 ok(im_succ_cpq(triple(c4,c5,c6))) | -ok(triple(c10,c11,c12)).  [resolve(9,a,18,b)].
20 ok(im_succ_cpq(triple(c4,c5,c6))).  [resolve(6,a,19,b)].
21 -ok(triple(c4,c5,c6)) | ok(triple(c7,c8,bad)) | -ok(triple(c10,c11,c12)).  [resolve(16,a,12,c)].
22 -ok(triple(c4,c5,c6)) | -ok(triple(c10,c11,c12)).  [resolve(9,a,21,b)].
23 -ok(triple(c4,c5,c6)).  [resolve(6,a,22,b)].
24 bad = c6.  [resolve(23,a,7,a)].
25 c6 = bad.  [copy(24),flip(a)].
26 ok(im_succ_cpq(triple(c4,c5,bad))).  [para(25(a,1),20(a,1,1,3))].
27 $F.  [resolve(17,a,26,a)].

============================== end of proof ==========================
