============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n123.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 00:35:08 CDT 2014
% CPUTime    : 9.10 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 30953 was started by sandbox on n123.star.cs.uiowa.edu,
Fri Jun  6 00:35:08 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_30921_n123.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 8.82 (+ 0.07) seconds.
% Length of proof is 26.
% Level of proof is 7.
% Maximum clause weight is 14.000.
% Given clauses 2371.


1 (all A (ssList(A) -> (all B (ssList(B) -> (frontsegP(A,B) <-> (exists C (ssList(C) & app(B,C) = A))))))).  [assumption].
2 (all A (ssList(A) -> (all B (ssList(B) -> (neq(A,B) <-> A != B))))).  [assumption].
3 -(all A (ssList(A) -> (all B (ssList(B) -> (all C (ssList(C) -> (all D (ssList(D) -> B != D | A != C | -neq(B,nil) | (all E (ssList(E) -> app(C,E) != D | -totalorderedP(C) | (exists F (ssItem(F) & (exists V6 (ssList(V6) & app(cons(F,nil),V6) = E & (exists V7 (ssItem(V7) & (exists V8 (ssList(V8) & app(V8,cons(V7,nil)) = C & leq(V7,F))))))))))) | nil != D & nil = C | neq(A,nil) & frontsegP(B,A))))))))).  [assumption].
4 -ssList(A) | -ssList(B) | frontsegP(A,B) | -ssList(C) | app(B,C) != A.  [clausify(1)].
5 -ssList(A) | -ssList(B) | -neq(A,B) | B != A.  [clausify(2)].
6 -ssList(A) | -ssList(B) | neq(A,B) | B = A.  [clausify(2)].
7 ssList(nil).  [assumption].
8 ssList(c3).  [clausify(3)].
9 ssList(c4).  [clausify(3)].
10 c6 = c4.  [clausify(3)].
11 c5 = c3.  [clausify(3)].
12 neq(c4,nil).  [clausify(3)].
13 ssList(c7).  [clausify(3)].
14 app(c5,c7) = c6.  [clausify(3)].
15 app(c3,c7) = c6.  [para(11(a,1),14(a,1,1))].
16 app(c3,c7) = c4.  [para(10(a,1),15(a,2))].
17 nil = c6 | nil != c5.  [clausify(3)].
18 nil = c4 | nil != c5.  [para(10(a,1),17(a,2))].
19 nil = c4 | nil != c3.  [para(11(a,1),18(b,2))].
20 c4 = nil | nil != c3.  [copy(19),flip(a)].
21 c4 = nil | c3 != nil.  [copy(20),flip(b)].
22 -neq(c3,nil) | -frontsegP(c4,c3).  [clausify(3)].
23 -ssList(A) | neq(A,nil) | nil = A.  [resolve(7,a,6,b)].
24 -ssList(A) | frontsegP(A,c3) | -ssList(B) | app(c3,B) != A.  [resolve(8,a,4,b)].
25 -ssList(c4) | -ssList(nil) | nil != c4.  [resolve(12,a,5,c)].
26 -ssList(c4) | -ssList(nil) | c4 != nil.  [copy(25),flip(c)].
27 -ssList(nil) | c4 != nil.  [resolve(9,a,26,a)].
28 c4 != nil.  [resolve(7,a,27,a)].
29 c3 != nil.  [resolve(28,a,21,a)].
30 neq(c3,nil) | nil = c3.  [resolve(23,a,8,a)].
31 neq(c3,nil) | c3 = nil.  [copy(30),flip(b)].
32 neq(c3,nil).  [resolve(29,a,31,b)].
33 -frontsegP(c4,c3).  [resolve(32,a,22,a)].
34 frontsegP(c4,c3) | -ssList(A) | app(c3,A) != c4.  [resolve(24,a,9,a)].
35 -ssList(A) | app(c3,A) != c4.  [resolve(33,a,34,a)].
36 app(c3,c7) != c4.  [resolve(35,a,13,a)].
37 c4 != c4.  [para(16(a,1),36(a,1))].
38 $F.  [copy(37),xx(a)].

============================== end of proof ==========================
