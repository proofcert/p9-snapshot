============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n149.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Thu Jun  5 15:35:38 CDT 2014
% CPUTime    : 0.12 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 48407 was started by sandbox on n149.star.cs.uiowa.edu,
Thu Jun  5 15:35:38 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_48375_n149.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.01 (+ 0.00) seconds.
% Length of proof is 48.
% Level of proof is 10.
% Maximum clause weight is 22.000.
% Given clauses 20.


1 (all A (environment(A) & stable(A) & (exists B (in_environment(A,B) & (all C (subpopulations(first_movers,efficient_producers,A,C) & greater_or_equal(C,B) -> greater(zero,growth_rate(first_movers,C)))))) -> (exists D (greater(D,appear(efficient_producers,A)) & (all C (subpopulations(first_movers,efficient_producers,A,C) & greater_or_equal(C,D) -> greater(zero,growth_rate(first_movers,C)))))))).  [assumption].
2 (all A (environment(A) & stable(A) -> (exists B (in_environment(A,B) & (all C (subpopulations(first_movers,efficient_producers,A,C) & greater_or_equal(C,B) -> greater(growth_rate(efficient_producers,C),zero) & greater(zero,growth_rate(first_movers,C)))))))).  [assumption].
3 -(all A (environment(A) & stable(A) -> (exists B (greater(B,appear(efficient_producers,A)) & (all C (subpopulations(first_movers,efficient_producers,A,C) & greater_or_equal(C,B) -> greater(zero,growth_rate(first_movers,C)))))))).  [assumption].
4 -environment(A) | -stable(A) | in_environment(A,f3(A)).  [clausify(2)].
5 environment(c1).  [clausify(3)].
6 -environment(A) | -stable(A) | -in_environment(A,B) | greater_or_equal(f1(A,B),B) | greater(f2(A),appear(efficient_producers,A)).  [clausify(1)].
7 -environment(A) | -stable(A) | -subpopulations(first_movers,efficient_producers,A,B) | -greater_or_equal(B,f3(A)) | greater(zero,growth_rate(first_movers,B)).  [clausify(2)].
8 -environment(A) | -stable(A) | -in_environment(A,B) | subpopulations(first_movers,efficient_producers,A,f1(A,B)) | greater(f2(A),appear(efficient_producers,A)).  [clausify(1)].
9 -environment(A) | -stable(A) | -in_environment(A,B) | -greater(zero,growth_rate(first_movers,f1(A,B))) | greater(f2(A),appear(efficient_producers,A)).  [clausify(1)].
10 -environment(A) | -stable(A) | -in_environment(A,B) | greater_or_equal(f1(A,B),B) | -subpopulations(first_movers,efficient_producers,A,C) | -greater_or_equal(C,f2(A)) | greater(zero,growth_rate(first_movers,C)).  [clausify(1)].
11 -environment(A) | -stable(A) | -in_environment(A,B) | subpopulations(first_movers,efficient_producers,A,f1(A,B)) | -subpopulations(first_movers,efficient_producers,A,C) | -greater_or_equal(C,f2(A)) | greater(zero,growth_rate(first_movers,C)).  [clausify(1)].
12 -environment(A) | -stable(A) | -in_environment(A,B) | -greater(zero,growth_rate(first_movers,f1(A,B))) | -subpopulations(first_movers,efficient_producers,A,C) | -greater_or_equal(C,f2(A)) | greater(zero,growth_rate(first_movers,C)).  [clausify(1)].
13 -stable(c1) | in_environment(c1,f3(c1)).  [resolve(4,a,5,a)].
14 stable(c1).  [clausify(3)].
15 -stable(c1) | -in_environment(c1,A) | greater_or_equal(f1(c1,A),A) | greater(f2(c1),appear(efficient_producers,c1)).  [resolve(6,a,5,a)].
16 -stable(c1) | -subpopulations(first_movers,efficient_producers,c1,A) | -greater_or_equal(A,f3(c1)) | greater(zero,growth_rate(first_movers,A)).  [resolve(7,a,5,a)].
17 -stable(c1) | -in_environment(c1,A) | subpopulations(first_movers,efficient_producers,c1,f1(c1,A)) | greater(f2(c1),appear(efficient_producers,c1)).  [resolve(8,a,5,a)].
18 -stable(c1) | -in_environment(c1,A) | -greater(zero,growth_rate(first_movers,f1(c1,A))) | greater(f2(c1),appear(efficient_producers,c1)).  [resolve(9,a,5,a)].
19 -stable(c1) | -in_environment(c1,A) | greater_or_equal(f1(c1,A),A) | -subpopulations(first_movers,efficient_producers,c1,B) | -greater_or_equal(B,f2(c1)) | greater(zero,growth_rate(first_movers,B)).  [resolve(10,a,5,a)].
20 -stable(c1) | -in_environment(c1,A) | subpopulations(first_movers,efficient_producers,c1,f1(c1,A)) | -subpopulations(first_movers,efficient_producers,c1,B) | -greater_or_equal(B,f2(c1)) | greater(zero,growth_rate(first_movers,B)).  [resolve(11,a,5,a)].
21 -stable(c1) | -in_environment(c1,A) | -greater(zero,growth_rate(first_movers,f1(c1,A))) | -subpopulations(first_movers,efficient_producers,c1,B) | -greater_or_equal(B,f2(c1)) | greater(zero,growth_rate(first_movers,B)).  [resolve(12,a,5,a)].
22 -in_environment(c1,A) | greater_or_equal(f1(c1,A),A) | greater(f2(c1),appear(efficient_producers,c1)).  [resolve(15,a,14,a)].
23 in_environment(c1,f3(c1)).  [resolve(13,a,14,a)].
24 -in_environment(c1,A) | subpopulations(first_movers,efficient_producers,c1,f1(c1,A)) | greater(f2(c1),appear(efficient_producers,c1)).  [resolve(17,a,14,a)].
25 -in_environment(c1,A) | -greater(zero,growth_rate(first_movers,f1(c1,A))) | greater(f2(c1),appear(efficient_producers,c1)).  [resolve(18,a,14,a)].
26 -in_environment(c1,A) | greater_or_equal(f1(c1,A),A) | -subpopulations(first_movers,efficient_producers,c1,B) | -greater_or_equal(B,f2(c1)) | greater(zero,growth_rate(first_movers,B)).  [resolve(19,a,14,a)].
27 -in_environment(c1,A) | subpopulations(first_movers,efficient_producers,c1,f1(c1,A)) | -subpopulations(first_movers,efficient_producers,c1,B) | -greater_or_equal(B,f2(c1)) | greater(zero,growth_rate(first_movers,B)).  [resolve(20,a,14,a)].
28 -in_environment(c1,A) | -greater(zero,growth_rate(first_movers,f1(c1,A))) | -subpopulations(first_movers,efficient_producers,c1,B) | -greater_or_equal(B,f2(c1)) | greater(zero,growth_rate(first_movers,B)).  [resolve(21,a,14,a)].
29 -greater(A,appear(efficient_producers,c1)) | -greater(zero,growth_rate(first_movers,f4(A))).  [clausify(3)].
30 -greater(A,appear(efficient_producers,c1)) | greater_or_equal(f4(A),A).  [clausify(3)].
31 -greater(A,appear(efficient_producers,c1)) | subpopulations(first_movers,efficient_producers,c1,f4(A)).  [clausify(3)].
32 -subpopulations(first_movers,efficient_producers,c1,A) | -greater_or_equal(A,f3(c1)) | greater(zero,growth_rate(first_movers,A)).  [resolve(16,a,14,a)].
33 greater_or_equal(f1(c1,f3(c1)),f3(c1)) | greater(f2(c1),appear(efficient_producers,c1)).  [resolve(22,a,23,a)].
34 subpopulations(first_movers,efficient_producers,c1,f1(c1,f3(c1))) | greater(f2(c1),appear(efficient_producers,c1)).  [resolve(24,a,23,a)].
35 -greater(zero,growth_rate(first_movers,f1(c1,f3(c1)))) | greater(f2(c1),appear(efficient_producers,c1)).  [resolve(25,a,23,a)].
36 greater_or_equal(f1(c1,f3(c1)),f3(c1)) | -subpopulations(first_movers,efficient_producers,c1,A) | -greater_or_equal(A,f2(c1)) | greater(zero,growth_rate(first_movers,A)).  [resolve(26,a,23,a)].
37 subpopulations(first_movers,efficient_producers,c1,f1(c1,f3(c1))) | -subpopulations(first_movers,efficient_producers,c1,A) | -greater_or_equal(A,f2(c1)) | greater(zero,growth_rate(first_movers,A)).  [resolve(27,a,23,a)].
38 -greater(zero,growth_rate(first_movers,f1(c1,f3(c1)))) | -subpopulations(first_movers,efficient_producers,c1,A) | -greater_or_equal(A,f2(c1)) | greater(zero,growth_rate(first_movers,A)).  [resolve(28,a,23,a)].
39 greater(f2(c1),appear(efficient_producers,c1)) | -greater_or_equal(f1(c1,f3(c1)),f3(c1)) | greater(zero,growth_rate(first_movers,f1(c1,f3(c1)))).  [resolve(34,a,32,a)].
40 greater(f2(c1),appear(efficient_producers,c1)) | greater(zero,growth_rate(first_movers,f1(c1,f3(c1)))) | greater(f2(c1),appear(efficient_producers,c1)).  [resolve(39,b,33,a)].
41 greater(f2(c1),appear(efficient_producers,c1)) | greater(zero,growth_rate(first_movers,f1(c1,f3(c1)))).  [copy(40),merge(c)].
42 greater(f2(c1),appear(efficient_producers,c1)) | greater(f2(c1),appear(efficient_producers,c1)).  [resolve(41,b,35,a)].
43 greater(f2(c1),appear(efficient_producers,c1)).  [copy(42),merge(b)].
44 subpopulations(first_movers,efficient_producers,c1,f4(f2(c1))).  [resolve(43,a,31,a)].
45 greater_or_equal(f4(f2(c1)),f2(c1)).  [resolve(43,a,30,a)].
46 -greater(zero,growth_rate(first_movers,f4(f2(c1)))).  [resolve(29,a,43,a)].
47 -greater(zero,growth_rate(first_movers,f1(c1,f3(c1)))) | -greater_or_equal(f4(f2(c1)),f2(c1)) | greater(zero,growth_rate(first_movers,f4(f2(c1)))).  [resolve(44,a,38,b)].
48 -greater(zero,growth_rate(first_movers,f1(c1,f3(c1)))) | greater(zero,growth_rate(first_movers,f4(f2(c1)))).  [resolve(45,a,47,b)].
49 -greater(zero,growth_rate(first_movers,f1(c1,f3(c1)))).  [resolve(46,a,48,b)].
50 subpopulations(first_movers,efficient_producers,c1,f1(c1,f3(c1))) | -greater_or_equal(f4(f2(c1)),f2(c1)) | greater(zero,growth_rate(first_movers,f4(f2(c1)))).  [resolve(44,a,37,b)].
51 subpopulations(first_movers,efficient_producers,c1,f1(c1,f3(c1))) | greater(zero,growth_rate(first_movers,f4(f2(c1)))).  [resolve(45,a,50,b)].
52 subpopulations(first_movers,efficient_producers,c1,f1(c1,f3(c1))).  [resolve(46,a,51,b)].
53 greater_or_equal(f1(c1,f3(c1)),f3(c1)) | -greater_or_equal(f4(f2(c1)),f2(c1)) | greater(zero,growth_rate(first_movers,f4(f2(c1)))).  [resolve(44,a,36,b)].
54 greater_or_equal(f1(c1,f3(c1)),f3(c1)) | greater(zero,growth_rate(first_movers,f4(f2(c1)))).  [resolve(45,a,53,b)].
55 greater_or_equal(f1(c1,f3(c1)),f3(c1)).  [resolve(46,a,54,b)].
56 -subpopulations(first_movers,efficient_producers,c1,f1(c1,f3(c1))) | greater(zero,growth_rate(first_movers,f1(c1,f3(c1)))).  [resolve(32,b,55,a)].
57 -subpopulations(first_movers,efficient_producers,c1,f1(c1,f3(c1))).  [resolve(56,b,49,a)].
58 $F.  [resolve(52,a,57,a)].

============================== end of proof ==========================
