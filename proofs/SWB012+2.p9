============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n164.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Thu Jun  5 14:57:18 CDT 2014
% CPUTime    : 1.63 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 33051 was started by sandbox on n164.star.cs.uiowa.edu,
Thu Jun  5 14:57:18 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_33019_n164.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 1.51 (+ 0.01) seconds.
% Length of proof is 41.
% Level of proof is 14.
% Maximum clause weight is 34.000.
% Given clauses 655.


1 (all A all B (iext(uri_rdf_type,A,B) <-> icext(B,A))).  [assumption].
2 (all A all B all C all D (iext(uri_rdfs_domain,A,B) & iext(A,C,D) -> icext(B,C))).  [assumption].
3 (all A all B all C all D all E all F all V6 (iext(uri_rdf_first,B,C) & iext(uri_rdf_rest,B,D) & iext(uri_rdf_first,D,E) & iext(uri_rdf_rest,D,F) & iext(uri_rdf_first,F,V6) & iext(uri_rdf_rest,F,uri_rdf_nil) -> (iext(uri_owl_intersectionOf,A,B) <-> ic(A) & ic(C) & ic(E) & ic(V6) & (all V7 (icext(A,V7) <-> icext(C,V7) & icext(E,V7) & icext(V6,V7)))))).  [assumption].
4 (all A all B all C (iext(uri_owl_hasValue,A,C) & iext(uri_owl_onProperty,A,B) -> (all D (icext(A,D) <-> iext(B,D,C))))).  [assumption].
5 (exists A exists B exists C exists D (iext(uri_rdf_type,uri_foaf_Person,uri_owl_Class) & iext(uri_owl_intersectionOf,uri_ex_PersonAttribute,A) & iext(uri_rdf_first,A,uri_owl_DatatypeProperty) & iext(uri_rdf_rest,A,B) & iext(uri_rdf_first,B,uri_owl_FunctionalProperty) & iext(uri_rdf_rest,B,C) & iext(uri_rdf_first,C,D) & iext(uri_rdf_rest,C,uri_rdf_nil) & iext(uri_rdf_type,D,uri_owl_Restriction) & iext(uri_owl_onProperty,D,uri_rdfs_domain) & iext(uri_owl_hasValue,D,uri_foaf_Person) & iext(uri_rdf_type,uri_ex_name,uri_ex_PersonAttribute) & iext(uri_ex_name,uri_ex_alice,literal_plain(dat_str_alice)))).  [assumption].
6 -(iext(uri_rdf_type,uri_ex_name,uri_owl_FunctionalProperty) & iext(uri_rdf_type,uri_ex_alice,uri_foaf_Person)).  [assumption].
7 iext(uri_owl_intersectionOf,uri_ex_PersonAttribute,c1).  [clausify(5)].
8 iext(uri_rdf_first,c1,uri_owl_DatatypeProperty).  [clausify(5)].
9 iext(uri_rdf_rest,c1,c2).  [clausify(5)].
10 iext(uri_rdf_first,c2,uri_owl_FunctionalProperty).  [clausify(5)].
11 iext(uri_rdf_rest,c2,c3).  [clausify(5)].
12 iext(uri_rdf_first,c3,c4).  [clausify(5)].
13 iext(uri_rdf_rest,c3,uri_rdf_nil).  [clausify(5)].
14 iext(uri_owl_onProperty,c4,uri_rdfs_domain).  [clausify(5)].
15 iext(uri_owl_hasValue,c4,uri_foaf_Person).  [clausify(5)].
16 iext(uri_rdf_type,uri_ex_name,uri_ex_PersonAttribute).  [clausify(5)].
17 iext(uri_ex_name,uri_ex_alice,literal_plain(dat_str_alice)).  [clausify(5)].
18 -iext(uri_rdf_type,uri_ex_name,uri_owl_FunctionalProperty) | -iext(uri_rdf_type,uri_ex_alice,uri_foaf_Person).  [clausify(6)].
19 -iext(uri_rdf_type,A,B) | icext(B,A).  [clausify(1)].
20 iext(uri_rdf_type,A,B) | -icext(B,A).  [clausify(1)].
21 -iext(uri_rdfs_domain,A,B) | -iext(A,C,D) | icext(B,C).  [clausify(2)].
22 -iext(uri_owl_hasValue,A,B) | -iext(uri_owl_onProperty,A,C) | -icext(A,D) | iext(C,D,B).  [clausify(4)].
23 -iext(uri_rdf_first,A,B) | -iext(uri_rdf_rest,A,C) | -iext(uri_rdf_first,C,D) | -iext(uri_rdf_rest,C,E) | -iext(uri_rdf_first,E,F) | -iext(uri_rdf_rest,E,uri_rdf_nil) | -iext(uri_owl_intersectionOf,V6,A) | -icext(V6,V7) | icext(D,V7).  [clausify(3)].
24 -iext(uri_rdf_first,A,B) | -iext(uri_rdf_rest,A,C) | -iext(uri_rdf_first,C,D) | -iext(uri_rdf_rest,C,E) | -iext(uri_rdf_first,E,F) | -iext(uri_rdf_rest,E,uri_rdf_nil) | -iext(uri_owl_intersectionOf,V6,A) | -icext(V6,V7) | icext(F,V7).  [clausify(3)].
25 icext(uri_ex_PersonAttribute,uri_ex_name).  [resolve(19,a,16,a)].
26 -iext(uri_rdfs_domain,uri_ex_name,A) | icext(A,uri_ex_alice).  [resolve(21,b,17,a)].
27 -iext(uri_owl_onProperty,c4,A) | -icext(c4,B) | iext(A,B,uri_foaf_Person).  [resolve(22,a,15,a)].
28 -iext(uri_rdf_rest,c1,A) | -iext(uri_rdf_first,A,B) | -iext(uri_rdf_rest,A,C) | -iext(uri_rdf_first,C,D) | -iext(uri_rdf_rest,C,uri_rdf_nil) | -iext(uri_owl_intersectionOf,E,c1) | -icext(E,F) | icext(B,F).  [resolve(23,a,8,a)].
29 -icext(c4,A) | iext(uri_rdfs_domain,A,uri_foaf_Person).  [resolve(27,a,14,a)].
30 -iext(uri_rdf_rest,c1,c2) | -iext(uri_rdf_first,c2,A) | -iext(uri_rdf_first,c3,B) | -iext(uri_rdf_rest,c3,uri_rdf_nil) | -iext(uri_owl_intersectionOf,C,c1) | -icext(C,D) | icext(A,D).  [resolve(28,c,11,a)].
31 -iext(uri_rdf_first,c2,A) | -iext(uri_rdf_first,c3,B) | -iext(uri_rdf_rest,c3,uri_rdf_nil) | -iext(uri_owl_intersectionOf,C,c1) | -icext(C,D) | icext(A,D).  [resolve(9,a,30,a)].
32 -iext(uri_rdf_first,c2,A) | -iext(uri_rdf_first,c3,B) | -iext(uri_owl_intersectionOf,C,c1) | -icext(C,D) | icext(A,D).  [resolve(13,a,31,c)].
33 -iext(uri_rdf_first,c3,A) | -iext(uri_owl_intersectionOf,B,c1) | -icext(B,C) | icext(uri_owl_FunctionalProperty,C).  [resolve(32,a,10,a)].
34 -iext(uri_owl_intersectionOf,A,c1) | -icext(A,B) | icext(uri_owl_FunctionalProperty,B).  [resolve(33,a,12,a)].
35 -icext(uri_ex_PersonAttribute,A) | icext(uri_owl_FunctionalProperty,A).  [resolve(34,a,7,a)].
36 icext(uri_owl_FunctionalProperty,uri_ex_name).  [resolve(35,a,25,a)].
37 iext(uri_rdf_type,uri_ex_name,uri_owl_FunctionalProperty).  [resolve(36,a,20,b)].
38 -iext(uri_rdf_type,uri_ex_alice,uri_foaf_Person).  [resolve(37,a,18,a)].
39 -icext(uri_foaf_Person,uri_ex_alice).  [resolve(20,a,38,a)].
40 -iext(uri_rdfs_domain,uri_ex_name,uri_foaf_Person).  [resolve(26,b,39,a)].
41 -icext(c4,uri_ex_name).  [resolve(29,b,40,a)].
42 -iext(uri_rdf_first,c1,A) | -iext(uri_rdf_first,c2,B) | -iext(uri_rdf_rest,c2,C) | -iext(uri_rdf_first,C,D) | -iext(uri_rdf_rest,C,uri_rdf_nil) | -iext(uri_owl_intersectionOf,E,c1) | -icext(E,F) | icext(D,F).  [resolve(24,b,9,a)].
43 -iext(uri_rdf_first,c1,A) | -iext(uri_rdf_rest,c2,B) | -iext(uri_rdf_first,B,C) | -iext(uri_rdf_rest,B,uri_rdf_nil) | -iext(uri_owl_intersectionOf,D,c1) | -icext(D,E) | icext(C,E).  [resolve(42,b,10,a)].
44 -iext(uri_rdf_first,c1,A) | -iext(uri_rdf_first,c3,B) | -iext(uri_rdf_rest,c3,uri_rdf_nil) | -iext(uri_owl_intersectionOf,C,c1) | -icext(C,D) | icext(B,D).  [resolve(43,b,11,a)].
45 -iext(uri_rdf_first,c1,A) | -iext(uri_rdf_rest,c3,uri_rdf_nil) | -iext(uri_owl_intersectionOf,B,c1) | -icext(B,C) | icext(c4,C).  [resolve(44,b,12,a)].
46 -iext(uri_rdf_first,c1,A) | -iext(uri_owl_intersectionOf,B,c1) | -icext(B,C) | icext(c4,C).  [resolve(45,b,13,a)].
47 -iext(uri_rdf_first,c1,A) | -icext(uri_ex_PersonAttribute,B) | icext(c4,B).  [resolve(46,b,7,a)].
48 -iext(uri_rdf_first,c1,A) | icext(c4,uri_ex_name).  [resolve(47,b,25,a)].
49 -iext(uri_rdf_first,c1,A).  [resolve(48,b,41,a)].
50 $F.  [resolve(49,a,8,a)].

============================== end of proof ==========================
