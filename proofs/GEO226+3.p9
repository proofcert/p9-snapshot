============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n114.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 07:35:33 CDT 2014
% CPUTime    : 0.14 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 945 was started by sandbox on n114.star.cs.uiowa.edu,
Fri Jun  6 07:35:33 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_913_n114.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.01 (+ 0.00) seconds.
% Length of proof is 22.
% Level of proof is 5.
% Maximum clause weight is 9.000.
% Given clauses 49.


1 (all A -distinct_lines(A,A)).  [assumption].
2 (all A all B all C (distinct_lines(A,B) -> distinct_lines(A,C) | distinct_lines(B,C))).  [assumption].
3 (all A all B all C (apart_point_and_line(A,B) -> distinct_lines(B,C) | apart_point_and_line(A,C))).  [assumption].
4 (all A all B (distinct_lines(A,B) -> convergent_lines(A,B))).  [assumption].
5 (all A all B -convergent_lines(parallel_through_point(B,A),B)).  [assumption].
6 (all A all B -apart_point_and_line(A,parallel_through_point(B,A))).  [assumption].
7 (all A all B (incident_point_and_line(A,B) <-> -apart_point_and_line(A,B))).  [assumption].
8 -(all A all B (line(A) & line(B) & convergent_lines(A,B) -> (exists C (point(C) -> incident_point_and_line(C,A) & incident_point_and_line(C,B))))).  [assumption].
9 incident_point_and_line(A,B) | apart_point_and_line(A,B).  [clausify(7)].
10 -distinct_lines(A,A).  [clausify(1)].
11 -convergent_lines(parallel_through_point(A,B),A).  [clausify(5)].
12 -apart_point_and_line(A,parallel_through_point(B,A)).  [clausify(6)].
13 -incident_point_and_line(A,c1) | -incident_point_and_line(A,c2).  [clausify(8)].
14 -distinct_lines(A,B) | convergent_lines(A,B).  [clausify(4)].
15 -distinct_lines(A,B) | distinct_lines(A,C) | distinct_lines(B,C).  [clausify(2)].
16 -apart_point_and_line(A,B) | distinct_lines(B,C) | apart_point_and_line(A,C).  [clausify(3)].
17 -incident_point_and_line(A,c1) | apart_point_and_line(A,c2).  [resolve(13,b,9,a)].
18 -distinct_lines(parallel_through_point(A,B),A).  [resolve(14,b,11,a)].
19 -distinct_lines(A,B) | distinct_lines(B,A).  [resolve(15,b,10,a)].
20 -distinct_lines(A,parallel_through_point(A,B)).  [resolve(19,b,18,a)].
21 apart_point_and_line(A,c2) | apart_point_and_line(A,c1).  [resolve(17,a,9,a)].
22 -apart_point_and_line(A,B) | apart_point_and_line(A,parallel_through_point(B,C)).  [resolve(16,b,20,a)].
23 -apart_point_and_line(A,B).  [resolve(22,b,12,a)].
24 apart_point_and_line(A,c1).  [resolve(23,a,21,a)].
25 $F.  [resolve(23,a,24,a)].

============================== end of proof ==========================
