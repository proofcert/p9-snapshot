============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n084.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Thu Jun  5 17:05:28 CDT 2014
% CPUTime    : 7.10 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 26792 was started by sandbox on n084.star.cs.uiowa.edu,
Thu Jun  5 17:05:28 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_26760_n084.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 6.82 (+ 0.07) seconds.
% Length of proof is 28.
% Level of proof is 8.
% Maximum clause weight is 11.000.
% Given clauses 2517.


1 (all A (ssList(A) -> (all B (ssList(B) -> (neq(A,B) <-> A != B))))).  [assumption].
2 (all A (ssList(A) -> rearsegP(A,A))).  [assumption].
3 -(all A (ssList(A) -> (all B (ssList(B) -> (all C (ssList(C) -> (all D (ssList(D) -> B != D | A != C | (exists E (ssList(E) & neq(E,nil) & rearsegP(B,E) & rearsegP(A,E))) | nil != C & nil = D | nil = B & nil = A | neq(D,nil) & (-neq(C,nil) | -rearsegP(D,C)))))))))).  [assumption].
4 -ssList(A) | -ssList(B) | neq(A,B) | B = A.  [clausify(1)].
5 ssList(nil).  [assumption].
6 -ssList(A) | rearsegP(A,A).  [clausify(2)].
7 ssList(c3).  [clausify(3)].
8 ssList(c4).  [clausify(3)].
9 c6 = c4.  [clausify(3)].
10 c5 = c3.  [clausify(3)].
11 -ssList(A) | -neq(A,nil) | -rearsegP(c4,A) | -rearsegP(c3,A).  [clausify(3)].
12 nil = c5 | nil != c6.  [clausify(3)].
13 nil = c3 | nil != c6.  [para(10(a,1),12(a,2))].
14 nil = c3 | nil != c4.  [para(9(a,1),13(b,2))].
15 c3 = nil | nil != c4.  [copy(14),flip(a)].
16 c3 = nil | c4 != nil.  [copy(15),flip(b)].
17 nil != c4 | nil != c3.  [clausify(3)].
18 c4 != nil | nil != c3.  [copy(17),flip(a)].
19 c4 != nil | c3 != nil.  [copy(18),flip(b)].
20 -neq(c6,nil) | neq(c5,nil).  [clausify(3)].
21 -neq(c4,nil) | neq(c5,nil).  [para(9(a,1),20(a,1))].
22 -neq(c4,nil) | neq(c3,nil).  [para(10(a,1),21(b,1))].
23 -neq(c6,nil) | rearsegP(c6,c5).  [clausify(3)].
24 -neq(c4,nil) | rearsegP(c6,c5).  [para(9(a,1),23(a,1))].
25 -neq(c4,nil) | rearsegP(c4,c5).  [para(9(a,1),24(b,1))].
26 -neq(c4,nil) | rearsegP(c4,c3).  [para(10(a,1),25(b,2))].
27 -ssList(A) | neq(A,nil) | nil = A.  [resolve(5,a,4,b)].
28 rearsegP(c3,c3).  [resolve(7,a,6,a)].
29 neq(c4,nil) | nil = c4.  [resolve(27,a,8,a)].
30 neq(c4,nil) | c4 = nil.  [copy(29),flip(b)].
31 c4 = nil | rearsegP(c4,c3).  [resolve(30,a,26,a)].
32 c4 = nil | neq(c3,nil).  [resolve(30,a,22,a)].
33 c4 = nil | -ssList(c3) | -rearsegP(c4,c3) | -rearsegP(c3,c3).  [resolve(32,b,11,b)].
34 c4 = nil | -rearsegP(c4,c3) | -rearsegP(c3,c3).  [resolve(7,a,33,b)].
35 c4 = nil | -rearsegP(c4,c3).  [resolve(28,a,34,c)].
36 c4 = nil | c4 = nil.  [resolve(35,b,31,b)].
37 c4 = nil.  [copy(36),merge(b)].
38 nil != nil | c3 != nil.  [para(37(a,1),19(a,1))].
39 c3 != nil.  [copy(38),xx(a)].
40 c3 = nil | nil != nil.  [para(37(a,1),16(b,1))].
41 c3 = nil.  [copy(40),xx(b)].
42 $F.  [resolve(39,a,41,a)].

============================== end of proof ==========================
