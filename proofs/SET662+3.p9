============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n066.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 19:57:58 CDT 2014
% CPUTime    : 0.14 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 17503 was started by sandbox on n066.star.cs.uiowa.edu,
Fri Jun  6 19:57:58 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_17471_n066.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.01 (+ 0.00) seconds.
% Length of proof is 27.
% Level of proof is 5.
% Maximum clause weight is 11.000.
% Given clauses 31.


1 (all A (ilf_type(A,set_type) -> (all B (ilf_type(B,set_type) -> (all C (ilf_type(C,subset_type(cross_product(A,B))) -> ilf_type(C,relation_type(A,B)))) & (all D (ilf_type(D,relation_type(A,B)) -> ilf_type(D,subset_type(cross_product(A,B))))))))).  [assumption].
2 (all A (ilf_type(A,set_type) -> -member(A,empty_set))).  [assumption].
3 (all A (ilf_type(A,set_type) -> (all B (ilf_type(B,set_type) -> (ilf_type(B,subset_type(A)) <-> ilf_type(B,member_type(power_set(A)))))))).  [assumption].
4 (all A (ilf_type(A,set_type) -> (all B (ilf_type(B,set_type) -> (member(A,power_set(B)) <-> (all C (ilf_type(C,set_type) -> (member(C,A) -> member(C,B))))))))).  [assumption].
5 (all A (ilf_type(A,set_type) -> -empty(power_set(A)) & ilf_type(power_set(A),set_type))).  [assumption].
6 (all A (ilf_type(A,set_type) -> (all B (-empty(B) & ilf_type(B,set_type) -> (ilf_type(A,member_type(B)) <-> member(A,B)))))).  [assumption].
7 (all A ilf_type(A,set_type)).  [assumption].
8 -(all A (ilf_type(A,set_type) -> (all B (ilf_type(B,set_type) -> ilf_type(empty_set,relation_type(A,B)))))).  [assumption].
9 ilf_type(A,set_type).  [clausify(7)].
10 -ilf_type(empty_set,relation_type(c1,c2)).  [clausify(8)].
11 -ilf_type(A,set_type) | -member(A,empty_set).  [clausify(2)].
12 -member(A,empty_set).  [resolve(9,a,11,a)].
13 -ilf_type(A,set_type) | -empty(power_set(A)).  [clausify(5)].
14 -empty(power_set(A)).  [resolve(9,a,13,a)].
15 -ilf_type(A,set_type) | -ilf_type(B,set_type) | ilf_type(B,subset_type(A)) | -ilf_type(B,member_type(power_set(A))).  [clausify(3)].
16 -ilf_type(A,set_type) | ilf_type(A,subset_type(B)) | -ilf_type(A,member_type(power_set(B))).  [resolve(9,a,15,a)].
17 ilf_type(A,subset_type(B)) | -ilf_type(A,member_type(power_set(B))).  [resolve(9,a,16,a)].
18 -ilf_type(A,set_type) | -ilf_type(B,set_type) | member(A,power_set(B)) | member(f5(A,B),A).  [clausify(4)].
19 -ilf_type(A,set_type) | member(B,power_set(A)) | member(f5(B,A),B).  [resolve(9,a,18,a)].
20 member(A,power_set(B)) | member(f5(A,B),A).  [resolve(9,a,19,a)].
21 -ilf_type(A,set_type) | empty(B) | -ilf_type(B,set_type) | ilf_type(A,member_type(B)) | -member(A,B).  [clausify(6)].
22 empty(A) | -ilf_type(A,set_type) | ilf_type(B,member_type(A)) | -member(B,A).  [resolve(9,a,21,a)].
23 empty(A) | ilf_type(B,member_type(A)) | -member(B,A).  [resolve(9,a,22,b)].
24 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -ilf_type(C,subset_type(cross_product(A,B))) | ilf_type(C,relation_type(A,B)).  [clausify(1)].
25 -ilf_type(A,set_type) | -ilf_type(B,subset_type(cross_product(C,A))) | ilf_type(B,relation_type(C,A)).  [resolve(9,a,24,a)].
26 -ilf_type(A,subset_type(cross_product(B,C))) | ilf_type(A,relation_type(B,C)).  [resolve(9,a,25,a)].
27 member(empty_set,power_set(A)).  [resolve(20,b,12,a)].
28 -ilf_type(empty_set,subset_type(cross_product(c1,c2))).  [resolve(26,b,10,a)].
29 -ilf_type(empty_set,member_type(power_set(cross_product(c1,c2)))).  [resolve(17,a,28,a)].
30 empty(power_set(A)) | ilf_type(empty_set,member_type(power_set(A))).  [resolve(27,a,23,c)].
31 ilf_type(empty_set,member_type(power_set(A))).  [resolve(14,a,30,a)].
32 $F.  [resolve(31,a,29,a)].

============================== end of proof ==========================
