============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n036.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 23:41:33 CDT 2014
% CPUTime    : 0.21 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 2501 was started by sandbox on n036.star.cs.uiowa.edu,
Fri Jun  6 23:41:33 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_2467_n036.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.02 (+ 0.00) seconds.
% Length of proof is 23.
% Level of proof is 4.
% Maximum clause weight is 26.000.
% Given clauses 6.


1 t = one_one_int -> (exists A exists B plus_plus_int(power_power_int(A,number_number_of_nat(bit0(bit1(pls)))),power_power_int(B,number_number_of_nat(bit0(bit1(pls))))) = plus_plus_int(times_times_int(number_number_of_int(bit0(bit0(bit1(pls)))),m),one_one_int)).  [assumption].
2 ord_less_int(one_one_int,t) -> (exists A exists B plus_plus_int(power_power_int(A,number_number_of_nat(bit0(bit1(pls)))),power_power_int(B,number_number_of_nat(bit0(bit1(pls))))) = plus_plus_int(times_times_int(number_number_of_int(bit0(bit0(bit1(pls)))),m),one_one_int)).  [assumption].
3 (all A all B (ord_less_int(A,B) <-> ord_less_eq_int(A,B) & A != B)).  [assumption].
4 (all A all B times_times_int(A,B) = times_times_int(B,A)).  [assumption].
5 (all A all B plus_plus_int(A,B) = plus_plus_int(B,A)).  [assumption].
6 (all A number_number_of_int(A) = A).  [assumption].
7 -(exists A exists B plus_plus_int(power_power_int(A,number_number_of_nat(bit0(bit1(pls)))),power_power_int(B,number_number_of_nat(bit0(bit1(pls))))) = plus_plus_int(times_times_int(number_number_of_int(bit0(bit0(bit1(pls)))),m),one_one_int)).  [assumption].
8 ord_less_eq_int(one_one_int,t).  [assumption].
9 t != one_one_int | plus_plus_int(times_times_int(number_number_of_int(bit0(bit0(bit1(pls)))),m),one_one_int) = plus_plus_int(power_power_int(c1,number_number_of_nat(bit0(bit1(pls)))),power_power_int(c2,number_number_of_nat(bit0(bit1(pls))))).  [clausify(1)].
10 t != one_one_int | plus_plus_int(power_power_int(c1,number_number_of_nat(bit0(bit1(pls)))),power_power_int(c2,number_number_of_nat(bit0(bit1(pls))))) = plus_plus_int(times_times_int(number_number_of_int(bit0(bit0(bit1(pls)))),m),one_one_int).  [copy(9),flip(b)].
11 -ord_less_int(one_one_int,t) | plus_plus_int(times_times_int(number_number_of_int(bit0(bit0(bit1(pls)))),m),one_one_int) = plus_plus_int(power_power_int(c3,number_number_of_nat(bit0(bit1(pls)))),power_power_int(c4,number_number_of_nat(bit0(bit1(pls))))).  [clausify(2)].
12 -ord_less_int(one_one_int,t) | plus_plus_int(power_power_int(c3,number_number_of_nat(bit0(bit1(pls)))),power_power_int(c4,number_number_of_nat(bit0(bit1(pls))))) = plus_plus_int(times_times_int(number_number_of_int(bit0(bit0(bit1(pls)))),m),one_one_int).  [copy(11),flip(b)].
13 ord_less_int(A,B) | -ord_less_eq_int(A,B) | B = A.  [clausify(3)].
14 plus_plus_nat(one_one_nat,one_one_nat) = number_number_of_nat(bit0(bit1(pls))).  [assumption].
15 number_number_of_nat(bit0(bit1(pls))) = plus_plus_nat(one_one_nat,one_one_nat).  [copy(14),flip(a)].
16 times_times_int(A,B) = times_times_int(B,A).  [clausify(4)].
17 plus_plus_int(A,B) = plus_plus_int(B,A).  [clausify(5)].
18 number_number_of_int(A) = A.  [clausify(6)].
19 plus_plus_int(times_times_int(number_number_of_int(bit0(bit0(bit1(pls)))),m),one_one_int) != plus_plus_int(power_power_int(A,number_number_of_nat(bit0(bit1(pls)))),power_power_int(B,number_number_of_nat(bit0(bit1(pls))))).  [clausify(7)].
20 plus_plus_int(times_times_int(bit0(bit0(bit1(pls))),m),one_one_int) != plus_plus_int(power_power_int(A,number_number_of_nat(bit0(bit1(pls)))),power_power_int(B,number_number_of_nat(bit0(bit1(pls))))).  [para(18(a,1),19(a,1,1,1))].
21 plus_plus_int(times_times_int(m,bit0(bit0(bit1(pls)))),one_one_int) != plus_plus_int(power_power_int(A,number_number_of_nat(bit0(bit1(pls)))),power_power_int(B,number_number_of_nat(bit0(bit1(pls))))).  [para(16(a,1),20(a,1,1))].
22 plus_plus_int(one_one_int,times_times_int(m,bit0(bit0(bit1(pls))))) != plus_plus_int(power_power_int(A,number_number_of_nat(bit0(bit1(pls)))),power_power_int(B,number_number_of_nat(bit0(bit1(pls))))).  [para(17(a,1),21(a,1))].
23 plus_plus_int(one_one_int,times_times_int(m,bit0(bit0(bit1(pls))))) != plus_plus_int(power_power_int(A,plus_plus_nat(one_one_nat,one_one_nat)),power_power_int(B,number_number_of_nat(bit0(bit1(pls))))).  [para(15(a,1),22(a,2,1,2))].
24 plus_plus_int(one_one_int,times_times_int(m,bit0(bit0(bit1(pls))))) != plus_plus_int(power_power_int(A,plus_plus_nat(one_one_nat,one_one_nat)),power_power_int(B,plus_plus_nat(one_one_nat,one_one_nat))).  [para(15(a,1),23(a,2,2,2))].
25 plus_plus_int(power_power_int(A,plus_plus_nat(one_one_nat,one_one_nat)),power_power_int(B,plus_plus_nat(one_one_nat,one_one_nat))) != plus_plus_int(one_one_int,times_times_int(m,bit0(bit0(bit1(pls))))).  [copy(24),flip(a)].
26 -ord_less_int(one_one_int,t) | plus_plus_int(power_power_int(c3,plus_plus_nat(one_one_nat,one_one_nat)),power_power_int(c4,number_number_of_nat(bit0(bit1(pls))))) = plus_plus_int(times_times_int(number_number_of_int(bit0(bit0(bit1(pls)))),m),one_one_int).  [para(15(a,1),12(b,1,1,2))].
27 -ord_less_int(one_one_int,t) | plus_plus_int(power_power_int(c3,plus_plus_nat(one_one_nat,one_one_nat)),power_power_int(c4,plus_plus_nat(one_one_nat,one_one_nat))) = plus_plus_int(times_times_int(number_number_of_int(bit0(bit0(bit1(pls)))),m),one_one_int).  [para(15(a,1),26(b,1,2,2))].
28 -ord_less_int(one_one_int,t) | plus_plus_int(power_power_int(c3,plus_plus_nat(one_one_nat,one_one_nat)),power_power_int(c4,plus_plus_nat(one_one_nat,one_one_nat))) = plus_plus_int(times_times_int(bit0(bit0(bit1(pls))),m),one_one_int).  [para(18(a,1),27(b,2,1,1))].
29 -ord_less_int(one_one_int,t) | plus_plus_int(power_power_int(c3,plus_plus_nat(one_one_nat,one_one_nat)),power_power_int(c4,plus_plus_nat(one_one_nat,one_one_nat))) = plus_plus_int(times_times_int(m,bit0(bit0(bit1(pls)))),one_one_int).  [para(16(a,1),28(b,2,1))].
30 -ord_less_int(one_one_int,t) | plus_plus_int(power_power_int(c3,plus_plus_nat(one_one_nat,one_one_nat)),power_power_int(c4,plus_plus_nat(one_one_nat,one_one_nat))) = plus_plus_int(one_one_int,times_times_int(m,bit0(bit0(bit1(pls))))).  [para(17(a,1),29(b,2))].
31 -ord_less_int(one_one_int,t).  [resolve(25,a,30,b)].
32 t != one_one_int | plus_plus_int(power_power_int(c1,plus_plus_nat(one_one_nat,one_one_nat)),power_power_int(c2,number_number_of_nat(bit0(bit1(pls))))) = plus_plus_int(times_times_int(number_number_of_int(bit0(bit0(bit1(pls)))),m),one_one_int).  [para(15(a,1),10(b,1,1,2))].
33 t != one_one_int | plus_plus_int(power_power_int(c1,plus_plus_nat(one_one_nat,one_one_nat)),power_power_int(c2,plus_plus_nat(one_one_nat,one_one_nat))) = plus_plus_int(times_times_int(number_number_of_int(bit0(bit0(bit1(pls)))),m),one_one_int).  [para(15(a,1),32(b,1,2,2))].
34 t != one_one_int | plus_plus_int(power_power_int(c1,plus_plus_nat(one_one_nat,one_one_nat)),power_power_int(c2,plus_plus_nat(one_one_nat,one_one_nat))) = plus_plus_int(times_times_int(bit0(bit0(bit1(pls))),m),one_one_int).  [para(18(a,1),33(b,2,1,1))].
35 t != one_one_int | plus_plus_int(power_power_int(c1,plus_plus_nat(one_one_nat,one_one_nat)),power_power_int(c2,plus_plus_nat(one_one_nat,one_one_nat))) = plus_plus_int(times_times_int(m,bit0(bit0(bit1(pls)))),one_one_int).  [para(16(a,1),34(b,2,1))].
36 t != one_one_int | plus_plus_int(power_power_int(c1,plus_plus_nat(one_one_nat,one_one_nat)),power_power_int(c2,plus_plus_nat(one_one_nat,one_one_nat))) = plus_plus_int(one_one_int,times_times_int(m,bit0(bit0(bit1(pls))))).  [para(17(a,1),35(b,2))].
37 t != one_one_int.  [resolve(25,a,36,b)].
38 ord_less_int(one_one_int,t) | t = one_one_int.  [resolve(13,b,8,a)].
39 t = one_one_int.  [resolve(31,a,38,a)].
40 $F.  [resolve(37,a,39,a)].

============================== end of proof ==========================
