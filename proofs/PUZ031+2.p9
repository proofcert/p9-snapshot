============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n102.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Thu Jun  5 15:15:53 CDT 2014
% CPUTime    : 0.13 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 10711 was started by sandbox on n102.star.cs.uiowa.edu,
Thu Jun  5 15:15:53 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_10679_n102.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.01 (+ 0.00) seconds.
% Length of proof is 71.
% Level of proof is 9.
% Maximum clause weight is 13.000.
% Given clauses 31.


1 (exists A wolf(A)).  [assumption].
2 (exists A fox(A)).  [assumption].
3 (exists A bird(A)).  [assumption].
4 (exists A snail(A)).  [assumption].
5 (all A (wolf(A) -> animal(A))).  [assumption].
6 (all A (fox(A) -> animal(A))).  [assumption].
7 (all A (bird(A) -> animal(A))).  [assumption].
8 (all A (snail(A) -> animal(A))).  [assumption].
9 (exists A grain(A)).  [assumption].
10 (all A (grain(A) -> plant(A))).  [assumption].
11 (all A (animal(A) -> (all B (plant(B) -> eats(A,B))) | (all C (animal(C) & much_smaller(C,A) & (exists D (plant(D) & eats(C,D))) -> eats(A,C))))).  [assumption].
12 (all A all B (bird(A) & snail(B) -> much_smaller(B,A))).  [assumption].
13 (all A all B (bird(A) & fox(B) -> much_smaller(A,B))).  [assumption].
14 (all A all B (fox(A) & wolf(B) -> much_smaller(A,B))).  [assumption].
15 (all A all B (wolf(A) & fox(B) -> -eats(A,B))).  [assumption].
16 (all A all B (wolf(A) & grain(B) -> -eats(A,B))).  [assumption].
17 (all A all B (bird(A) & snail(B) -> -eats(A,B))).  [assumption].
18 (all A (snail(A) -> (exists B (plant(B) & eats(A,B))))).  [assumption].
19 -(exists A exists B (animal(A) & animal(B) & (exists C (grain(C) & eats(B,C) & eats(A,B))))).  [assumption].
20 -wolf(A) | -fox(B) | -eats(A,B).  [clausify(15)].
21 wolf(c1).  [clausify(1)].
22 -wolf(A) | -grain(B) | -eats(A,B).  [clausify(16)].
23 -wolf(A) | animal(A).  [clausify(5)].
24 -fox(A) | -wolf(B) | much_smaller(A,B).  [clausify(14)].
25 -fox(A) | animal(A).  [clausify(6)].
26 fox(c2).  [clausify(2)].
27 -bird(A) | -fox(B) | much_smaller(A,B).  [clausify(13)].
28 -fox(A) | -eats(c1,A).  [resolve(20,a,21,a)].
29 -fox(A) | much_smaller(A,c1).  [resolve(24,b,21,a)].
30 -bird(A) | -snail(B) | -eats(A,B).  [clausify(17)].
31 bird(c3).  [clausify(3)].
32 -bird(A) | animal(A).  [clausify(7)].
33 -bird(A) | -snail(B) | much_smaller(B,A).  [clausify(12)].
34 -bird(A) | much_smaller(A,c2).  [resolve(27,b,26,a)].
35 -snail(A) | animal(A).  [clausify(8)].
36 snail(c5).  [clausify(4)].
37 -snail(A) | plant(f2(A)).  [clausify(18)].
38 -snail(A) | eats(A,f2(A)).  [clausify(18)].
39 -snail(A) | -eats(c3,A).  [resolve(30,a,31,a)].
40 -snail(A) | much_smaller(A,c3).  [resolve(33,a,31,a)].
41 -animal(A) | -animal(B) | -grain(C) | -eats(B,C) | -eats(A,B).  [clausify(19)].
42 grain(c6).  [clausify(9)].
43 -grain(A) | plant(A).  [clausify(10)].
44 -grain(A) | -eats(c1,A).  [resolve(22,a,21,a)].
45 much_smaller(c2,c1).  [resolve(29,a,26,a)].
46 -animal(A) | -plant(B) | eats(A,B) | -animal(C) | -much_smaller(C,A) | -plant(D) | -eats(C,D) | eats(A,C).  [clausify(11)].
47 much_smaller(c3,c2).  [resolve(34,a,31,a)].
48 much_smaller(c5,c3).  [resolve(40,a,36,a)].
49 animal(c1).  [resolve(23,a,21,a)].
50 animal(c2).  [resolve(25,a,26,a)].
51 -eats(c1,c2).  [resolve(28,a,26,a)].
52 animal(c3).  [resolve(32,a,31,a)].
53 animal(c5).  [resolve(35,a,36,a)].
54 plant(f2(c5)).  [resolve(37,a,36,a)].
55 eats(c5,f2(c5)).  [resolve(38,a,36,a)].
56 -eats(c3,c5).  [resolve(39,a,36,a)].
57 -animal(A) | -animal(B) | -eats(B,c6) | -eats(A,B).  [resolve(41,c,42,a)].
58 plant(c6).  [resolve(43,a,42,a)].
59 -eats(c1,c6).  [resolve(44,a,42,a)].
60 -animal(c1) | -plant(A) | eats(c1,A) | -animal(c2) | -plant(B) | -eats(c2,B) | eats(c1,c2).  [resolve(45,a,46,e)].
61 -plant(A) | eats(c1,A) | -animal(c2) | -plant(B) | -eats(c2,B) | eats(c1,c2).  [resolve(49,a,60,a)].
62 -plant(A) | eats(c1,A) | -plant(B) | -eats(c2,B) | eats(c1,c2).  [resolve(50,a,61,c)].
63 -plant(A) | eats(c1,A) | -plant(B) | -eats(c2,B).  [resolve(51,a,62,e)].
64 -animal(c2) | -plant(A) | eats(c2,A) | -animal(c3) | -plant(B) | -eats(c3,B) | eats(c2,c3).  [resolve(47,a,46,e)].
65 -plant(A) | eats(c2,A) | -animal(c3) | -plant(B) | -eats(c3,B) | eats(c2,c3).  [resolve(50,a,64,a)].
66 -plant(A) | eats(c2,A) | -plant(B) | -eats(c3,B) | eats(c2,c3).  [resolve(52,a,65,c)].
67 -animal(c3) | -plant(A) | eats(c3,A) | -animal(c5) | -plant(B) | -eats(c5,B) | eats(c3,c5).  [resolve(48,a,46,e)].
68 -plant(A) | eats(c3,A) | -animal(c5) | -plant(B) | -eats(c5,B) | eats(c3,c5).  [resolve(52,a,67,a)].
69 -plant(A) | eats(c3,A) | -plant(B) | -eats(c5,B) | eats(c3,c5).  [resolve(53,a,68,c)].
70 -plant(A) | eats(c3,A) | -plant(B) | -eats(c5,B).  [resolve(56,a,69,e)].
71 -plant(A) | eats(c2,A) | -eats(c3,A) | eats(c2,c3).  [factor(66,a,c)].
72 eats(c1,c6) | -plant(A) | -eats(c2,A).  [resolve(63,a,58,a)].
73 -plant(A) | -eats(c2,A).  [resolve(72,a,59,a)].
74 -eats(c2,c6).  [resolve(73,a,58,a)].
75 -plant(A) | eats(c3,A) | -plant(f2(c5)).  [resolve(70,d,55,a)].
76 -plant(A) | eats(c3,A).  [resolve(54,a,75,c)].
77 eats(c3,c6).  [resolve(76,a,58,a)].
78 -plant(c6) | eats(c2,c6) | eats(c2,c3).  [resolve(77,a,71,c)].
79 eats(c2,c6) | eats(c2,c3).  [resolve(58,a,78,a)].
80 eats(c2,c3).  [resolve(74,a,79,a)].
81 -animal(A) | -eats(A,c6) | -eats(c2,A).  [resolve(57,a,50,a)].
82 -eats(c3,c6) | -eats(c2,c3).  [resolve(81,a,52,a)].
83 -eats(c2,c3).  [resolve(82,a,77,a)].
84 $F.  [resolve(80,a,83,a)].

============================== end of proof ==========================
