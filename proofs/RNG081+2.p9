============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n136.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Thu Jun  5 22:15:53 CDT 2014
% CPUTime    : 173.50 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 36508 was started by sandbox on n136.star.cs.uiowa.edu,
Thu Jun  5 22:15:53 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_36476_n136.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 173.18 (+ 0.02) seconds.
% Length of proof is 25.
% Level of proof is 6.
% Maximum clause weight is 19.000.
% Given clauses 313.


1 (all A (aScalar0(A) -> sdtpldt0(A,sz0z00) = A & sdtpldt0(sz0z00,A) = A & sdtasdt0(A,sz0z00) = sz0z00 & sdtasdt0(sz0z00,A) = sz0z00 & sdtpldt0(A,smndt0(A)) = sz0z00 & sdtpldt0(smndt0(A),A) = sz0z00 & smndt0(smndt0(A)) = A & smndt0(sz0z00) = sz0z00)).  [assumption].
2 (all A (aScalar0(A) -> sdtlseqdt0(A,A))).  [assumption].
3 (all A all B (aVector0(A) & aVector0(B) -> (aDimensionOf0(A) = aDimensionOf0(B) & aDimensionOf0(B) = sz00 -> sdtasasdt0(A,B) = sz0z00))).  [assumption].
4 -((aDimensionOf0(xs) != sz00 -> (exists A (aVector0(A) & szszuzczcdt0(aDimensionOf0(A)) = aDimensionOf0(xs) & (all B (aNaturalNumber0(B) -> sdtlbdtrb0(A,B) = sdtlbdtrb0(xs,B))) & A = sziznziztdt0(xs) & (exists B (aVector0(B) & szszuzczcdt0(aDimensionOf0(B)) = aDimensionOf0(xt) & (all C (aNaturalNumber0(C) -> sdtlbdtrb0(B,C) = sdtlbdtrb0(xt,C))) & B = sziznziztdt0(xt) & (exists C (aScalar0(C) & C = sdtlbdtrb0(xs,aDimensionOf0(xs)) & (exists D (aScalar0(D) & D = sdtlbdtrb0(xt,aDimensionOf0(xt)) & (exists E (aScalar0(E) & E = sdtasasdt0(A,A) & (exists F (aScalar0(F) & F = sdtasasdt0(B,B) & (exists V6 (aScalar0(V6) & V6 = sdtasasdt0(A,B) & (exists V7 (aScalar0(V7) & V7 = sdtasdt0(C,C) & (exists V8 (aScalar0(V8) & V8 = sdtasdt0(D,D) & (exists V9 (aScalar0(V9) & V9 = sdtasdt0(C,D) & (exists V10 (aScalar0(V10) & V10 = sdtasdt0(E,V8) & (exists V11 (aScalar0(V11) & V11 = sdtasdt0(V6,V9) & (exists V12 (aScalar0(V12) & V12 = sdtasdt0(V7,F) & (exists V13 (aScalar0(V13) & V13 = sdtasdt0(V10,V12) & sdtlseqdt0(sdtasdt0(V6,V6),sdtasdt0(E,F)) & sdtlseqdt0(sdtpldt0(V11,V11),sdtpldt0(V10,V12)) & sdtlseqdt0(sdtasdt0(sdtpldt0(V6,V9),sdtpldt0(V6,V9)),sdtasdt0(sdtpldt0(E,V7),sdtpldt0(F,V8))) & sdtlseqdt0(sdtasdt0(sdtasasdt0(xs,xt),sdtasasdt0(xs,xt)),sdtasdt0(sdtasasdt0(xs,xs),sdtasasdt0(xt,xt)))))))))))))))))))))))))))))))) -> sdtlseqdt0(sdtasdt0(sdtasasdt0(xs,xt),sdtasasdt0(xs,xt)),sdtasdt0(sdtasasdt0(xs,xs),sdtasasdt0(xt,xt)))).  [assumption].
5 aScalar0(sz0z00).  [assumption].
6 aVector0(xs).  [assumption].
7 aVector0(xt).  [assumption].
8 aDimensionOf0(xs) = aDimensionOf0(xt).  [assumption].
9 aDimensionOf0(xt) = aDimensionOf0(xs).  [copy(8),flip(a)].
10 aDimensionOf0(xs) = sz00 | sdtlseqdt0(sdtasdt0(sdtasasdt0(xs,xt),sdtasasdt0(xs,xt)),sdtasdt0(sdtasasdt0(xs,xs),sdtasasdt0(xt,xt))).  [clausify(4)].
11 -sdtlseqdt0(sdtasdt0(sdtasasdt0(xs,xt),sdtasasdt0(xs,xt)),sdtasdt0(sdtasasdt0(xs,xs),sdtasasdt0(xt,xt))).  [clausify(4)].
12 -aScalar0(A) | sdtlseqdt0(A,A).  [clausify(2)].
13 -aScalar0(A) | sdtasdt0(A,sz0z00) = sz0z00.  [clausify(1)].
14 -aVector0(A) | -aVector0(B) | aDimensionOf0(B) != aDimensionOf0(A) | aDimensionOf0(B) != sz00 | sdtasasdt0(A,B) = sz0z00.  [clausify(3)].
15 aDimensionOf0(xs) = sz00.  [resolve(11,a,10,b)].
16 -aVector0(A) | aDimensionOf0(A) != aDimensionOf0(A) | aDimensionOf0(A) != sz00 | sdtasasdt0(A,A) = sz0z00.  [factor(14,a,b)].
17 -aVector0(A) | aDimensionOf0(A) != sz00 | sdtasasdt0(A,A) = sz0z00.  [copy(16),xx(b)].
18 aDimensionOf0(xt) = sz00.  [para(15(a,1),9(a,2))].
19 sdtlseqdt0(sz0z00,sz0z00).  [resolve(12,a,5,a)].
20 sdtasdt0(sz0z00,sz0z00) = sz0z00.  [resolve(13,a,5,a)].
21 -aVector0(A) | aDimensionOf0(A) != aDimensionOf0(xs) | aDimensionOf0(A) != sz00 | sdtasasdt0(xs,A) = sz0z00.  [resolve(14,a,6,a)].
22 -aVector0(A) | aDimensionOf0(A) != sz00 | aDimensionOf0(A) != sz00 | sdtasasdt0(xs,A) = sz0z00.  [para(15(a,1),21(b,2))].
23 -aVector0(A) | aDimensionOf0(A) != sz00 | sdtasasdt0(xs,A) = sz0z00.  [copy(22),merge(c)].
24 aDimensionOf0(xt) != sz00 | sdtasasdt0(xt,xt) = sz0z00.  [resolve(17,a,7,a)].
25 sz00 != sz00 | sdtasasdt0(xt,xt) = sz0z00.  [para(18(a,1),24(a,1))].
26 sdtasasdt0(xt,xt) = sz0z00.  [copy(25),xx(a)].
27 aDimensionOf0(xs) != sz00 | sdtasasdt0(xs,xs) = sz0z00.  [resolve(17,a,6,a)].
28 sz00 != sz00 | sdtasasdt0(xs,xs) = sz0z00.  [para(15(a,1),27(a,1))].
29 sdtasasdt0(xs,xs) = sz0z00.  [copy(28),xx(a)].
30 -sdtlseqdt0(sdtasdt0(sdtasasdt0(xs,xt),sdtasasdt0(xs,xt)),sdtasdt0(sz0z00,sdtasasdt0(xt,xt))).  [para(29(a,1),11(a,2,1))].
31 -sdtlseqdt0(sdtasdt0(sdtasasdt0(xs,xt),sdtasasdt0(xs,xt)),sdtasdt0(sz0z00,sz0z00)).  [para(26(a,1),30(a,2,2))].
32 -sdtlseqdt0(sdtasdt0(sdtasasdt0(xs,xt),sdtasasdt0(xs,xt)),sz0z00).  [para(20(a,1),31(a,2))].
33 aDimensionOf0(xt) != sz00 | sdtasasdt0(xs,xt) = sz0z00.  [resolve(23,a,7,a)].
34 sz00 != sz00 | sdtasasdt0(xs,xt) = sz0z00.  [para(18(a,1),33(a,1))].
35 sdtasasdt0(xs,xt) = sz0z00.  [copy(34),xx(a)].
36 -sdtlseqdt0(sdtasdt0(sz0z00,sdtasasdt0(xs,xt)),sz0z00).  [para(35(a,1),32(a,1,1))].
37 -sdtlseqdt0(sdtasdt0(sz0z00,sz0z00),sz0z00).  [para(35(a,1),36(a,1,2))].
38 -sdtlseqdt0(sz0z00,sz0z00).  [para(20(a,1),37(a,1))].
39 $F.  [resolve(19,a,38,a)].

============================== end of proof ==========================
