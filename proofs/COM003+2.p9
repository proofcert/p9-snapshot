============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n135.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Thu Jun  5 13:23:58 CDT 2014
% CPUTime    : 0.15 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 34585 was started by sandbox on n135.star.cs.uiowa.edu,
Thu Jun  5 13:23:58 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_34553_n135.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.02 (+ 0.00) seconds.
% Length of proof is 64.
% Level of proof is 11.
% Maximum clause weight is 13.000.
% Given clauses 83.


1 (all A (program_program_decides(A) <-> program(A) & program_decides(A))).  [assumption].
2 (all A all B (program_halts2(A,B) <-> program(A) & halts2(A,B))).  [assumption].
3 (all A all B (program_not_halts2(A,B) <-> program(A) & -halts2(A,B))).  [assumption].
4 (all A all B all C (halts2_outputs(A,B,C) <-> halts2(A,B) & outputs(A,C))).  [assumption].
5 (all A all B all C (program_not_halts2_halts2_outputs(A,B,C) <-> (program_not_halts2(B,B) -> halts2_outputs(A,B,C)))).  [assumption].
6 (exists A algorithm_program_decides(A)) -> (exists B program_program_decides(B)).  [assumption].
7 (all A (program_program_decides(A) -> (all B all C (program_halts2_halts3_outputs(A,B,C,good) & program_not_halts2_halts3_outputs(A,B,C,bad))))).  [assumption].
8 (exists A (program(A) & (all B (program_halts2_halts3_outputs(A,B,B,good) & program_not_halts2_halts3_outputs(A,B,B,bad))))) -> (exists C (program(C) & (all B (program_halts2_halts2_outputs(C,B,good) & program_not_halts2_halts2_outputs(C,B,bad))))).  [assumption].
9 (exists A (program(A) & (all B (program_halts2_halts2_outputs(A,B,good) & program_not_halts2_halts2_outputs(A,B,bad))))) -> (exists C (program(C) & (all B ((program_halts2(B,B) -> -halts2(C,B)) & program_not_halts2_halts2_outputs(C,B,good))))).  [assumption].
10 --(exists A algorithm_program_decides(A)).  [assumption].
11 algorithm_program_decides(c4).  [clausify(10)].
12 -algorithm_program_decides(A) | program_program_decides(c1).  [clausify(6)].
13 -program(A) | -program_halts2_halts2_outputs(A,f4(A),good) | -program_not_halts2_halts2_outputs(A,f4(A),bad) | -program_halts2(B,B) | -halts2(c3,B).  [clausify(9)].
14 -program(A) | -program_halts2_halts2_outputs(A,f4(A),good) | -program_not_halts2_halts2_outputs(A,f4(A),bad) | program(c3).  [clausify(9)].
15 -program(A) | -program_halts2_halts2_outputs(A,f4(A),good) | -program_not_halts2_halts2_outputs(A,f4(A),bad) | program_not_halts2_halts2_outputs(c3,B,good).  [clausify(9)].
16 -program(A) | -program_halts2_halts3_outputs(A,f3(A),f3(A),good) | -program_not_halts2_halts3_outputs(A,f3(A),f3(A),bad) | program_halts2_halts2_outputs(c2,B,good).  [clausify(8)].
17 -program_not_halts2(A,B) | -halts2(A,B).  [clausify(3)].
18 program_not_halts2_halts2_outputs(A,B,C) | program_not_halts2(B,B).  [clausify(5)].
19 program_not_halts2(A,B) | -program(A) | halts2(A,B).  [clausify(3)].
20 -program_not_halts2_halts2_outputs(A,B,C) | -program_not_halts2(B,B) | halts2_outputs(A,B,C).  [clausify(5)].
21 -program_program_decides(A) | program_halts2_halts3_outputs(A,B,C,good).  [clausify(7)].
22 -program(A) | -program_halts2_halts3_outputs(A,f3(A),f3(A),good) | -program_not_halts2_halts3_outputs(A,f3(A),f3(A),bad) | program(c2).  [clausify(8)].
23 -program(A) | -program_halts2_halts3_outputs(A,f3(A),f3(A),good) | -program_not_halts2_halts3_outputs(A,f3(A),f3(A),bad) | program_not_halts2_halts2_outputs(c2,B,bad).  [clausify(8)].
24 -program(A) | -program_halts2_halts3_outputs(A,f3(A),f3(A),good) | -program_not_halts2_halts3_outputs(A,f3(A),f3(A),bad) | -program(c2) | -program_not_halts2_halts2_outputs(c2,f4(c2),bad) | -program_halts2(B,B) | -halts2(c3,B).  [resolve(16,d,13,b)].
25 -program(A) | -program_halts2_halts3_outputs(A,f3(A),f3(A),good) | -program_not_halts2_halts3_outputs(A,f3(A),f3(A),bad) | -program(c2) | -program_not_halts2_halts2_outputs(c2,f4(c2),bad) | program(c3).  [resolve(16,d,14,b)].
26 -program(A) | -program_halts2_halts3_outputs(A,f3(A),f3(A),good) | -program_not_halts2_halts3_outputs(A,f3(A),f3(A),bad) | -program(c2) | -program_not_halts2_halts2_outputs(c2,f4(c2),bad) | program_not_halts2_halts2_outputs(c3,B,good).  [resolve(16,d,15,b)].
27 program_program_decides(c1).  [resolve(12,a,11,a)].
28 -program_program_decides(A) | program(A).  [clausify(1)].
29 -program_program_decides(A) | program_not_halts2_halts3_outputs(A,B,C,bad).  [clausify(7)].
30 -program(A) | -program_not_halts2_halts3_outputs(A,f3(A),f3(A),bad) | program(c2) | -program_program_decides(A).  [resolve(22,b,21,b)].
31 -program(A) | -program_not_halts2_halts3_outputs(A,f3(A),f3(A),bad) | program_not_halts2_halts2_outputs(c2,B,bad) | -program_program_decides(A).  [resolve(23,b,21,b)].
32 -program(A) | -program_not_halts2_halts3_outputs(A,f3(A),f3(A),bad) | -program(c2) | -program_not_halts2_halts2_outputs(c2,f4(c2),bad) | -program_halts2(B,B) | -halts2(c3,B) | -program_program_decides(A).  [resolve(24,b,21,b)].
33 -program(A) | -program_not_halts2_halts3_outputs(A,f3(A),f3(A),bad) | -program(c2) | -program_not_halts2_halts2_outputs(c2,f4(c2),bad) | program(c3) | -program_program_decides(A).  [resolve(25,b,21,b)].
34 -program(A) | -program_not_halts2_halts3_outputs(A,f3(A),f3(A),bad) | -program(c2) | -program_not_halts2_halts2_outputs(c2,f4(c2),bad) | program_not_halts2_halts2_outputs(c3,B,good) | -program_program_decides(A).  [resolve(26,b,21,b)].
35 program_halts2(A,B) | -program(A) | -halts2(A,B).  [clausify(2)].
36 -program_halts2(A,B) | halts2(A,B).  [clausify(2)].
37 -halts2_outputs(A,B,C) | halts2(A,B).  [clausify(4)].
38 -halts2(A,A) | program_not_halts2_halts2_outputs(B,A,C).  [resolve(17,a,18,b)].
39 -program_not_halts2_halts2_outputs(A,B,C) | halts2_outputs(A,B,C) | -program(B) | halts2(B,B).  [resolve(20,b,19,a)].
40 -program(c1) | -program_not_halts2_halts3_outputs(c1,f3(c1),f3(c1),bad) | -program(c2) | -program_not_halts2_halts2_outputs(c2,f4(c2),bad) | -program_halts2(A,A) | -halts2(c3,A).  [resolve(32,g,27,a)].
41 -program_not_halts2_halts2_outputs(A,B,C) | halts2_outputs(A,B,C) | program_not_halts2_halts2_outputs(D,B,E).  [resolve(20,b,18,b)].
42 program(c1).  [resolve(27,a,28,a)].
43 program_not_halts2_halts3_outputs(c1,A,B,bad).  [resolve(27,a,29,a)].
44 -program(c1) | -program_not_halts2_halts3_outputs(c1,f3(c1),f3(c1),bad) | program(c2).  [resolve(30,d,27,a)].
45 -program_not_halts2_halts3_outputs(c1,f3(c1),f3(c1),bad) | program(c2).  [resolve(42,a,44,a)].
46 program(c2).  [resolve(43,a,45,a)].
47 -program(c1) | -program_not_halts2_halts3_outputs(c1,f3(c1),f3(c1),bad) | program_not_halts2_halts2_outputs(c2,A,bad).  [resolve(31,d,27,a)].
48 -program_not_halts2_halts3_outputs(c1,f3(c1),f3(c1),bad) | program_not_halts2_halts2_outputs(c2,A,bad).  [resolve(42,a,47,a)].
49 program_not_halts2_halts2_outputs(c2,A,bad).  [resolve(43,a,48,a)].
50 -program(c1) | -program_not_halts2_halts3_outputs(c1,f3(c1),f3(c1),bad) | -program(c2) | -program_not_halts2_halts2_outputs(c2,f4(c2),bad) | program(c3).  [resolve(33,f,27,a)].
51 -program_not_halts2_halts3_outputs(c1,f3(c1),f3(c1),bad) | -program(c2) | -program_not_halts2_halts2_outputs(c2,f4(c2),bad) | program(c3).  [resolve(42,a,50,a)].
52 -program(c2) | -program_not_halts2_halts2_outputs(c2,f4(c2),bad) | program(c3).  [resolve(43,a,51,a)].
53 -program_not_halts2_halts2_outputs(c2,f4(c2),bad) | program(c3).  [resolve(46,a,52,a)].
54 program(c3).  [resolve(49,a,53,a)].
55 -program(c1) | -program_not_halts2_halts3_outputs(c1,f3(c1),f3(c1),bad) | -program(c2) | -program_not_halts2_halts2_outputs(c2,f4(c2),bad) | program_not_halts2_halts2_outputs(c3,A,good).  [resolve(34,f,27,a)].
56 -program_not_halts2_halts3_outputs(c1,f3(c1),f3(c1),bad) | -program(c2) | -program_not_halts2_halts2_outputs(c2,f4(c2),bad) | program_not_halts2_halts2_outputs(c3,A,good).  [resolve(42,a,55,a)].
57 -program(c2) | -program_not_halts2_halts2_outputs(c2,f4(c2),bad) | program_not_halts2_halts2_outputs(c3,A,good).  [resolve(43,a,56,a)].
58 -program_not_halts2_halts2_outputs(c2,f4(c2),bad) | program_not_halts2_halts2_outputs(c3,A,good).  [resolve(46,a,57,a)].
59 program_not_halts2_halts2_outputs(c3,A,good).  [resolve(49,a,58,a)].
60 program_halts2(A,B) | -program(A) | -halts2_outputs(A,B,C).  [resolve(35,c,37,b)].
61 program_not_halts2_halts2_outputs(A,B,C) | -halts2_outputs(B,B,D).  [resolve(38,a,37,b)].
62 -program_not_halts2_halts2_outputs(A,B,C) | halts2_outputs(A,B,C) | -program(B) | program_halts2(B,B) | -program(B).  [resolve(39,d,35,c)].
63 -program_not_halts2_halts2_outputs(A,B,C) | halts2_outputs(A,B,C) | -program(B) | program_halts2(B,B).  [copy(62),merge(e)].
64 -program(c1) | -program_not_halts2_halts3_outputs(c1,f3(c1),f3(c1),bad) | -program(c2) | -program_not_halts2_halts2_outputs(c2,f4(c2),bad) | -program_halts2(A,A) | -program_halts2(c3,A).  [resolve(40,f,36,b)].
65 -program_not_halts2_halts3_outputs(c1,f3(c1),f3(c1),bad) | -program(c2) | -program_not_halts2_halts2_outputs(c2,f4(c2),bad) | -program_halts2(A,A) | -program_halts2(c3,A).  [resolve(42,a,64,a)].
66 -program(c2) | -program_not_halts2_halts2_outputs(c2,f4(c2),bad) | -program_halts2(A,A) | -program_halts2(c3,A).  [resolve(43,a,65,a)].
67 -program_not_halts2_halts2_outputs(c2,f4(c2),bad) | -program_halts2(A,A) | -program_halts2(c3,A).  [resolve(46,a,66,a)].
68 -program_halts2(A,A) | -program_halts2(c3,A).  [resolve(49,a,67,a)].
69 -program_halts2(c3,c3).  [factor(68,a,b)].
70 halts2_outputs(c3,A,good) | program_not_halts2_halts2_outputs(B,A,C).  [resolve(59,a,41,a)].
71 program_not_halts2_halts2_outputs(A,c3,B) | program_not_halts2_halts2_outputs(C,c3,D).  [resolve(70,a,61,b)].
72 program_not_halts2_halts2_outputs(A,c3,B).  [factor(71,a,b)].
73 halts2_outputs(A,c3,B) | -program(c3) | program_halts2(c3,c3).  [resolve(72,a,63,a)].
74 halts2_outputs(A,c3,B) | program_halts2(c3,c3).  [resolve(54,a,73,b)].
75 halts2_outputs(A,c3,B).  [resolve(69,a,74,b)].
76 program_halts2(A,c3) | -program(A).  [resolve(75,a,60,c)].
77 program_halts2(c3,c3).  [resolve(76,b,54,a)].
78 $F.  [resolve(69,a,77,a)].

============================== end of proof ==========================
