============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n159.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 06:12:58 CDT 2014
% CPUTime    : 0.13 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 39701 was started by sandbox on n159.star.cs.uiowa.edu,
Fri Jun  6 06:12:58 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_39669_n159.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.01 (+ 0.00) seconds.
% Length of proof is 35.
% Level of proof is 7.
% Maximum clause weight is 18.000.
% Given clauses 46.


1 (all A -distinct_lines(A,A)).  [assumption].
2 (all A -convergent_lines(A,A)).  [assumption].
3 (all A all B all C (distinct_lines(A,B) -> distinct_lines(A,C) | distinct_lines(B,C))).  [assumption].
4 (all A all B all C (convergent_lines(A,B) -> convergent_lines(A,C) | convergent_lines(B,C))).  [assumption].
5 (all A all B (convergent_lines(A,B) -> -apart_point_and_line(intersection_point(A,B),A))).  [assumption].
6 (all A all B (convergent_lines(A,B) -> -apart_point_and_line(intersection_point(A,B),B))).  [assumption].
7 (all A all B all C all D (distinct_points(A,B) & distinct_lines(C,D) -> apart_point_and_line(A,C) | apart_point_and_line(A,D) | apart_point_and_line(B,C) | apart_point_and_line(B,D))).  [assumption].
8 (all A all B all C (apart_point_and_line(A,B) -> distinct_lines(B,C) | apart_point_and_line(A,C))).  [assumption].
9 (all A all B all C (convergent_lines(A,B) -> distinct_lines(B,C) | convergent_lines(A,C))).  [assumption].
10 -(all A all B all C (convergent_lines(A,B) & -distinct_lines(B,C) -> convergent_lines(A,C) & -distinct_points(intersection_point(A,B),intersection_point(A,C)))).  [assumption].
11 convergent_lines(c1,c2).  [clausify(10)].
12 -distinct_lines(A,A).  [clausify(1)].
13 -convergent_lines(A,A).  [clausify(2)].
14 -distinct_lines(c2,c3).  [clausify(10)].
15 -convergent_lines(A,B) | -apart_point_and_line(intersection_point(A,B),A).  [clausify(5)].
16 -convergent_lines(A,B) | -apart_point_and_line(intersection_point(A,B),B).  [clausify(6)].
17 -distinct_lines(A,B) | distinct_lines(A,C) | distinct_lines(B,C).  [clausify(3)].
18 -convergent_lines(A,B) | convergent_lines(A,C) | convergent_lines(B,C).  [clausify(4)].
19 -apart_point_and_line(A,B) | distinct_lines(B,C) | apart_point_and_line(A,C).  [clausify(8)].
20 -convergent_lines(A,B) | distinct_lines(B,C) | convergent_lines(A,C).  [clausify(9)].
21 -convergent_lines(c1,c3) | distinct_points(intersection_point(c1,c2),intersection_point(c1,c3)).  [clausify(10)].
22 -distinct_points(A,B) | -distinct_lines(C,D) | apart_point_and_line(A,C) | apart_point_and_line(A,D) | apart_point_and_line(B,C) | apart_point_and_line(B,D).  [clausify(7)].
23 -apart_point_and_line(intersection_point(c1,c2),c1).  [resolve(15,a,11,a)].
24 -apart_point_and_line(intersection_point(c1,c2),c2).  [resolve(16,a,11,a)].
25 -distinct_lines(A,B) | distinct_lines(B,A).  [resolve(17,b,12,a)].
26 -distinct_lines(c3,c2).  [resolve(25,b,14,a)].
27 convergent_lines(c1,A) | convergent_lines(c2,A).  [resolve(18,a,11,a)].
28 -convergent_lines(A,c3) | convergent_lines(A,c2).  [resolve(20,b,26,a)].
29 -convergent_lines(c2,c3).  [resolve(28,b,13,a)].
30 -apart_point_and_line(A,c3) | apart_point_and_line(A,c2).  [resolve(19,b,26,a)].
31 -apart_point_and_line(intersection_point(c1,c2),c3).  [resolve(30,b,24,a)].
32 convergent_lines(c1,c3).  [resolve(27,b,29,a)].
33 distinct_points(intersection_point(c1,c2),intersection_point(c1,c3)).  [resolve(32,a,21,a)].
34 distinct_lines(c3,A) | convergent_lines(c1,A).  [resolve(32,a,20,a)].
35 -apart_point_and_line(intersection_point(c1,c3),c3).  [resolve(32,a,16,a)].
36 -apart_point_and_line(intersection_point(c1,c3),c1).  [resolve(32,a,15,a)].
37 -distinct_lines(A,B) | apart_point_and_line(intersection_point(c1,c2),A) | apart_point_and_line(intersection_point(c1,c2),B) | apart_point_and_line(intersection_point(c1,c3),A) | apart_point_and_line(intersection_point(c1,c3),B).  [resolve(22,a,33,a)].
38 -distinct_lines(c3,A) | apart_point_and_line(intersection_point(c1,c2),A) | apart_point_and_line(intersection_point(c1,c3),c3) | apart_point_and_line(intersection_point(c1,c3),A).  [resolve(37,b,31,a)].
39 -distinct_lines(c3,c1) | apart_point_and_line(intersection_point(c1,c3),c3) | apart_point_and_line(intersection_point(c1,c3),c1).  [resolve(38,b,23,a)].
40 -distinct_lines(c3,c1) | apart_point_and_line(intersection_point(c1,c3),c1).  [resolve(39,b,35,a)].
41 -distinct_lines(c3,c1).  [resolve(40,b,36,a)].
42 convergent_lines(c1,c1).  [resolve(41,a,34,a)].
43 $F.  [resolve(13,a,42,a)].

============================== end of proof ==========================
