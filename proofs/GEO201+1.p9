============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n078.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 05:57:48 CDT 2014
% CPUTime    : 0.13 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 21234 was started by sandbox on n078.star.cs.uiowa.edu,
Fri Jun  6 05:57:48 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_21202_n078.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.01 (+ 0.00) seconds.
% Length of proof is 25.
% Level of proof is 7.
% Maximum clause weight is 18.000.
% Given clauses 28.


1 (all A -convergent_lines(A,A)).  [assumption].
2 (all A all B all C (convergent_lines(A,B) -> convergent_lines(A,C) | convergent_lines(B,C))).  [assumption].
3 (all A all B (convergent_lines(A,B) -> -apart_point_and_line(intersection_point(A,B),A))).  [assumption].
4 (all A all B (convergent_lines(A,B) -> -apart_point_and_line(intersection_point(A,B),B))).  [assumption].
5 (all A all B all C all D (distinct_points(A,B) & distinct_lines(C,D) -> apart_point_and_line(A,C) | apart_point_and_line(A,D) | apart_point_and_line(B,C) | apart_point_and_line(B,D))).  [assumption].
6 (all A all B all C (convergent_lines(A,B) -> distinct_lines(B,C) | convergent_lines(A,C))).  [assumption].
7 -(all A all B (convergent_lines(A,B) -> -distinct_points(intersection_point(A,B),intersection_point(B,A)))).  [assumption].
8 convergent_lines(c1,c2).  [clausify(7)].
9 distinct_points(intersection_point(c1,c2),intersection_point(c2,c1)).  [clausify(7)].
10 -convergent_lines(A,A).  [clausify(1)].
11 -convergent_lines(A,B) | -apart_point_and_line(intersection_point(A,B),A).  [clausify(3)].
12 -convergent_lines(A,B) | -apart_point_and_line(intersection_point(A,B),B).  [clausify(4)].
13 -convergent_lines(A,B) | convergent_lines(A,C) | convergent_lines(B,C).  [clausify(2)].
14 -convergent_lines(A,B) | distinct_lines(B,C) | convergent_lines(A,C).  [clausify(6)].
15 -distinct_points(A,B) | -distinct_lines(C,D) | apart_point_and_line(A,C) | apart_point_and_line(A,D) | apart_point_and_line(B,C) | apart_point_and_line(B,D).  [clausify(5)].
16 -apart_point_and_line(intersection_point(c1,c2),c1).  [resolve(11,a,8,a)].
17 -apart_point_and_line(intersection_point(c1,c2),c2).  [resolve(12,a,8,a)].
18 convergent_lines(c1,A) | convergent_lines(c2,A).  [resolve(13,a,8,a)].
19 convergent_lines(c1,A) | convergent_lines(c2,B) | convergent_lines(A,B).  [resolve(18,b,13,a)].
20 convergent_lines(c1,c1) | convergent_lines(c2,c1).  [factor(19,a,c)].
21 convergent_lines(c2,c1).  [resolve(10,a,20,a)].
22 distinct_lines(c1,A) | convergent_lines(c2,A).  [resolve(21,a,14,a)].
23 -apart_point_and_line(intersection_point(c2,c1),c1).  [resolve(21,a,12,a)].
24 -apart_point_and_line(intersection_point(c2,c1),c2).  [resolve(21,a,11,a)].
25 -distinct_lines(A,B) | apart_point_and_line(intersection_point(c1,c2),A) | apart_point_and_line(intersection_point(c1,c2),B) | apart_point_and_line(intersection_point(c2,c1),A) | apart_point_and_line(intersection_point(c2,c1),B).  [resolve(15,a,9,a)].
26 -distinct_lines(c1,A) | apart_point_and_line(intersection_point(c1,c2),A) | apart_point_and_line(intersection_point(c2,c1),c1) | apart_point_and_line(intersection_point(c2,c1),A).  [resolve(25,b,16,a)].
27 -distinct_lines(c1,c2) | apart_point_and_line(intersection_point(c2,c1),c1) | apart_point_and_line(intersection_point(c2,c1),c2).  [resolve(26,b,17,a)].
28 -distinct_lines(c1,c2) | apart_point_and_line(intersection_point(c2,c1),c2).  [resolve(27,b,23,a)].
29 -distinct_lines(c1,c2).  [resolve(28,b,24,a)].
30 convergent_lines(c2,c2).  [resolve(29,a,22,a)].
31 $F.  [resolve(10,a,30,a)].

============================== end of proof ==========================
