============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n035.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Thu Jun  5 20:02:08 CDT 2014
% CPUTime    : 174.25 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 17917 was started by sandbox on n035.star.cs.uiowa.edu,
Thu Jun  5 20:02:08 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_17885_n035.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 170.31 (+ 3.71) seconds.
% Length of proof is 77.
% Level of proof is 10.
% Maximum clause weight is 18.000.
% Given clauses 21139.


1 (all A (ssList(A) -> (all B (ssList(B) -> (frontsegP(A,B) <-> (exists C (ssList(C) & app(B,C) = A))))))).  [assumption].
2 (all A (ssList(A) -> (all B (ssList(B) -> (rearsegP(A,B) <-> (exists C (ssList(C) & app(C,B) = A))))))).  [assumption].
3 (all A (ssList(A) -> (all B (ssList(B) -> (neq(A,B) <-> A != B))))).  [assumption].
4 (all A (ssList(A) -> app(nil,A) = A)).  [assumption].
5 (all A (ssList(A) -> frontsegP(A,A))).  [assumption].
6 (all A (ssList(A) -> rearsegP(A,A))).  [assumption].
7 (all A (ssList(A) -> segmentP(A,A))).  [assumption].
8 (all A (ssList(A) -> (all B (ssList(B) -> (all C (ssList(C) -> (all D (ssList(D) -> (segmentP(A,B) -> segmentP(app(app(C,A),D),B)))))))))).  [assumption].
9 (all A (ssList(A) -> (all B (ssList(B) -> (all C (ssList(C) -> app(app(A,B),C) = app(A,app(B,C)))))))).  [assumption].
10 (all A (ssList(A) -> app(A,nil) = A)).  [assumption].
11 -(all A (ssList(A) -> (all B (ssList(B) -> (all C (ssList(C) -> (all D (-ssList(D) | B != D | A != C | (exists E (ssList(E) & neq(E,nil) & segmentP(B,E) & segmentP(A,E))) | (all F (ssList(F) -> (all V6 (-ssList(V6) | app(F,V6) != D | app(V6,F) != C)))) | nil = B & nil = A)))))))).  [assumption].
12 -ssList(A) | -ssList(B) | -frontsegP(A,B) | ssList(f4(A,B)).  [clausify(1)].
13 -ssList(A) | -ssList(B) | -frontsegP(A,B) | app(B,f4(A,B)) = A.  [clausify(1)].
14 -ssList(A) | -ssList(B) | -rearsegP(A,B) | ssList(f5(A,B)).  [clausify(2)].
15 -ssList(A) | -ssList(B) | -rearsegP(A,B) | app(f5(A,B),B) = A.  [clausify(2)].
16 -ssList(A) | -ssList(B) | neq(A,B) | B = A.  [clausify(3)].
17 ssList(nil).  [assumption].
18 -ssList(A) | app(nil,A) = A.  [clausify(4)].
19 -ssList(A) | frontsegP(A,A).  [clausify(5)].
20 -ssList(A) | rearsegP(A,A).  [clausify(6)].
21 -ssList(A) | segmentP(A,A).  [clausify(7)].
22 -ssList(A) | -ssList(B) | -ssList(C) | -ssList(D) | -segmentP(A,B) | segmentP(app(app(C,A),D),B).  [clausify(8)].
23 -ssList(A) | -ssList(B) | -ssList(C) | app(app(A,B),C) = app(A,app(B,C)).  [clausify(9)].
24 -ssList(A) | app(A,nil) = A.  [clausify(10)].
25 ssList(c3).  [clausify(11)].
26 ssList(c4).  [clausify(11)].
27 c6 = c4.  [clausify(11)].
28 c5 = c3.  [clausify(11)].
29 -ssList(A) | -neq(A,nil) | -segmentP(c4,A) | -segmentP(c3,A).  [clausify(11)].
30 ssList(c7).  [clausify(11)].
31 ssList(c8).  [clausify(11)].
32 app(c7,c8) = c6.  [clausify(11)].
33 app(c7,c8) = c4.  [para(27(a,1),32(a,2))].
34 app(c8,c7) = c5.  [clausify(11)].
35 app(c8,c7) = c3.  [para(28(a,1),34(a,2))].
36 nil != c4 | nil != c3.  [clausify(11)].
37 c4 != nil | nil != c3.  [copy(36),flip(a)].
38 c4 != nil | c3 != nil.  [copy(37),flip(b)].
39 -ssList(A) | -frontsegP(A,A) | ssList(f4(A,A)).  [factor(12,a,b)].
40 -ssList(A) | -frontsegP(A,A) | app(A,f4(A,A)) = A.  [factor(13,a,b)].
41 -ssList(A) | -rearsegP(A,A) | ssList(f5(A,A)).  [factor(14,a,b)].
42 -ssList(A) | -rearsegP(A,A) | app(f5(A,A),A) = A.  [factor(15,a,b)].
43 -ssList(A) | -ssList(B) | -ssList(C) | -segmentP(A,A) | segmentP(app(app(B,A),C),A).  [factor(22,a,b)].
44 -ssList(A) | neq(A,nil) | nil = A.  [resolve(17,a,16,b)].
45 app(nil,nil) = nil.  [resolve(18,a,17,a)].
46 app(c3,nil) = c3.  [resolve(25,a,24,a)].
47 segmentP(c3,c3).  [resolve(25,a,21,a)].
48 frontsegP(c3,c3).  [resolve(25,a,19,a)].
49 app(nil,c3) = c3.  [resolve(25,a,18,a)].
50 app(c4,nil) = c4.  [resolve(26,a,24,a)].
51 segmentP(c7,c7).  [resolve(30,a,21,a)].
52 rearsegP(c7,c7).  [resolve(30,a,20,a)].
53 app(c8,nil) = c8.  [resolve(31,a,24,a)].
54 -ssList(A) | -ssList(B) | app(app(A,c8),B) = app(A,app(c8,B)).  [resolve(31,a,23,b)].
55 -ssList(A) | -ssList(B) | app(app(c8,A),B) = app(c8,app(A,B)).  [resolve(31,a,23,a)].
56 -ssList(A) | app(app(A,c8),A) = app(A,app(c8,A)).  [factor(54,a,b)].
57 -ssList(A) | app(app(c8,A),A) = app(c8,app(A,A)).  [factor(55,a,b)].
58 -ssList(c3) | app(c3,f4(c3,c3)) = c3.  [resolve(48,a,40,b)].
59 app(c3,f4(c3,c3)) = c3.  [resolve(25,a,58,a)].
60 -ssList(c3) | ssList(f4(c3,c3)).  [resolve(48,a,39,b)].
61 ssList(f4(c3,c3)).  [resolve(25,a,60,a)].
62 -ssList(c7) | -ssList(A) | -ssList(B) | segmentP(app(app(A,c7),B),c7).  [resolve(51,a,43,d)].
63 -ssList(A) | -ssList(B) | segmentP(app(app(A,c7),B),c7).  [resolve(30,a,62,a)].
64 -ssList(c7) | app(f5(c7,c7),c7) = c7.  [resolve(52,a,42,b)].
65 app(f5(c7,c7),c7) = c7.  [resolve(30,a,64,a)].
66 -ssList(c7) | ssList(f5(c7,c7)).  [resolve(52,a,41,b)].
67 ssList(f5(c7,c7)).  [resolve(30,a,66,a)].
68 neq(c8,nil) | nil = c8.  [resolve(44,a,31,a)].
69 neq(c8,nil) | c8 = nil.  [copy(68),flip(b)].
70 neq(c7,nil) | nil = c7.  [resolve(44,a,30,a)].
71 neq(c7,nil) | c7 = nil.  [copy(70),flip(b)].
72 c8 = nil | -ssList(c8) | -segmentP(c4,c8) | -segmentP(c3,c8).  [resolve(69,a,29,b)].
73 c8 = nil | -segmentP(c4,c8) | -segmentP(c3,c8).  [resolve(31,a,72,b)].
74 c7 = nil | -ssList(c7) | -segmentP(c4,c7) | -segmentP(c3,c7).  [resolve(71,a,29,b)].
75 c7 = nil | -segmentP(c4,c7) | -segmentP(c3,c7).  [resolve(30,a,74,b)].
76 app(app(c7,c8),c7) = app(c7,app(c8,c7)).  [resolve(56,a,30,a)].
77 app(c4,c7) = app(c7,app(c8,c7)).  [para(33(a,1),76(a,1,1))].
78 app(c4,c7) = app(c7,c3).  [para(35(a,1),77(a,2,2))].
79 app(c7,c3) = app(c4,c7).  [copy(78),flip(a)].
80 app(app(c8,c7),c7) = app(c8,app(c7,c7)).  [resolve(57,a,30,a)].
81 app(c3,c7) = app(c8,app(c7,c7)).  [para(35(a,1),80(a,1,1))].
82 app(c8,app(c7,c7)) = app(c3,c7).  [copy(81),flip(a)].
83 -ssList(A) | segmentP(app(app(f5(c7,c7),c7),A),c7).  [resolve(63,a,67,a)].
84 -ssList(A) | segmentP(app(c7,A),c7).  [para(65(a,1),83(b,1,1))].
85 -ssList(A) | segmentP(app(app(c8,c7),A),c7).  [resolve(63,a,31,a)].
86 -ssList(A) | segmentP(app(c3,A),c7).  [para(35(a,1),85(b,1,1))].
87 segmentP(app(c7,c8),c7).  [resolve(84,a,31,a)].
88 segmentP(c4,c7).  [para(33(a,1),87(a,1))].
89 c7 = nil | -segmentP(c3,c7).  [resolve(88,a,75,b)].
90 segmentP(app(c3,f4(c3,c3)),c7).  [resolve(86,a,61,a)].
91 segmentP(c3,c7).  [para(59(a,1),90(a,1))].
92 c7 = nil.  [resolve(91,a,89,b)].
93 app(c8,app(nil,c7)) = app(c3,c7).  [para(92(a,1),82(a,1,2,1))].
94 app(c8,app(nil,nil)) = app(c3,c7).  [para(92(a,1),93(a,1,2,2))].
95 app(c8,nil) = app(c3,c7).  [para(45(a,1),94(a,1,2))].
96 c8 = app(c3,c7).  [para(53(a,1),95(a,1))].
97 c8 = app(c3,nil).  [para(92(a,1),96(a,2,2))].
98 c8 = c3.  [para(46(a,1),97(a,2))].
99 app(nil,c3) = app(c4,c7).  [para(92(a,1),79(a,1,1))].
100 c3 = app(c4,c7).  [para(49(a,1),99(a,1))].
101 c3 = app(c4,nil).  [para(92(a,1),100(a,2,2))].
102 c3 = c4.  [para(50(a,1),101(a,2))].
103 c4 = c3.  [copy(102),flip(a)].
104 c3 = nil | -segmentP(c4,c8) | -segmentP(c3,c8).  [para(98(a,1),73(a,1))].
105 c3 = nil | -segmentP(c3,c8) | -segmentP(c3,c8).  [para(103(a,1),104(b,1))].
106 c3 = nil | -segmentP(c3,c3) | -segmentP(c3,c8).  [para(98(a,1),105(b,2))].
107 c3 = nil | -segmentP(c3,c3) | -segmentP(c3,c3).  [para(98(a,1),106(c,2))].
108 c3 = nil | -segmentP(c3,c3).  [copy(107),merge(c)].
109 c3 = nil.  [resolve(47,a,108,b)].
110 c3 != nil | c3 != nil.  [para(103(a,1),38(a,1))].
111 nil != nil | c3 != nil.  [para(109(a,1),110(a,1))].
112 nil != nil | nil != nil.  [para(109(a,1),111(b,1))].
113 nil != nil.  [copy(112),xx(a)].
114 $F.  [copy(113),xx(a)].

============================== end of proof ==========================
