============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n118.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 05:25:53 CDT 2014
% CPUTime    : 0.13 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 51425 was started by sandbox on n118.star.cs.uiowa.edu,
Fri Jun  6 05:25:53 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_51393_n118.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.02 (+ 0.00) seconds.
% Length of proof is 21.
% Level of proof is 5.
% Maximum clause weight is 11.000.
% Given clauses 85.


1 (all A -distinct_points(A,A)).  [assumption].
2 (all A -distinct_lines(A,A)).  [assumption].
3 (all A all B all C (distinct_lines(A,B) -> distinct_lines(A,C) | distinct_lines(B,C))).  [assumption].
4 (all A all B all C (convergent_lines(A,B) -> (apart_point_and_line(C,A) | apart_point_and_line(C,B) -> distinct_points(C,intersection_point(A,B))))).  [assumption].
5 (all A all B all C (apart_point_and_line(A,B) -> distinct_lines(B,C) | apart_point_and_line(A,C))).  [assumption].
6 -(all A all B all C (convergent_lines(A,B) -> (apart_point_and_line(intersection_point(A,B),C) -> distinct_lines(A,C) & distinct_lines(B,C)))).  [assumption].
7 convergent_lines(c1,c2).  [clausify(6)].
8 apart_point_and_line(intersection_point(c1,c2),c3).  [clausify(6)].
9 -distinct_points(A,A).  [clausify(1)].
10 -distinct_lines(A,A).  [clausify(2)].
11 -distinct_lines(c1,c3) | -distinct_lines(c2,c3).  [clausify(6)].
12 -distinct_lines(A,B) | distinct_lines(A,C) | distinct_lines(B,C).  [clausify(3)].
13 -apart_point_and_line(A,B) | distinct_lines(B,C) | apart_point_and_line(A,C).  [clausify(5)].
14 -convergent_lines(A,B) | -apart_point_and_line(C,A) | distinct_points(C,intersection_point(A,B)).  [clausify(4)].
15 -convergent_lines(A,B) | -apart_point_and_line(C,B) | distinct_points(C,intersection_point(A,B)).  [clausify(4)].
16 distinct_lines(c3,A) | apart_point_and_line(intersection_point(c1,c2),A).  [resolve(13,a,8,a)].
17 -apart_point_and_line(A,c1) | distinct_points(A,intersection_point(c1,c2)).  [resolve(14,a,7,a)].
18 -apart_point_and_line(intersection_point(c1,c2),c1).  [resolve(17,b,9,a)].
19 -apart_point_and_line(A,c2) | distinct_points(A,intersection_point(c1,c2)).  [resolve(15,a,7,a)].
20 -apart_point_and_line(intersection_point(c1,c2),c2).  [resolve(19,b,9,a)].
21 apart_point_and_line(intersection_point(c1,c2),A) | distinct_lines(c3,B) | distinct_lines(A,B).  [resolve(16,a,12,a)].
22 apart_point_and_line(intersection_point(c1,c2),c2) | distinct_lines(c3,c3) | -distinct_lines(c1,c3).  [resolve(21,c,11,b)].
23 distinct_lines(c3,c3) | -distinct_lines(c1,c3).  [resolve(20,a,22,a)].
24 -distinct_lines(c1,c3).  [resolve(10,a,23,a)].
25 apart_point_and_line(intersection_point(c1,c2),c1) | distinct_lines(c3,c3).  [resolve(24,a,21,c)].
26 distinct_lines(c3,c3).  [resolve(18,a,25,a)].
27 $F.  [resolve(10,a,26,a)].

============================== end of proof ==========================
