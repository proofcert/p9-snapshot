============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n156.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 23:39:23 CDT 2014
% CPUTime    : 24.59 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 52402 was started by sandbox on n156.star.cs.uiowa.edu,
Fri Jun  6 23:39:37 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_52370_n156.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 10.41 (+ 0.04) seconds.
% Length of proof is 80.
% Level of proof is 8.
% Maximum clause weight is 40.000.
% Given clauses 1573.


1 (all A (one(A) -> ti(A,one_one(A)) = one_one(A))).  [assumption].
2 (all A all B all C (monoid_add(C) -> ti(C,plus_plus(C,A,B)) = plus_plus(C,A,B))).  [assumption].
3 (all A (zero(A) -> ti(A,zero_zero(A)) = zero_zero(A))).  [assumption].
4 (all A nat_1(ti(int,A)) = nat_1(A)).  [assumption].
5 (all A (number_semiring(A) -> plus_plus(A,one_one(A),one_one(A)) = number_number_of(A,bit0(bit1(pls))))).  [assumption].
6 (all A all B all C plus_plus(int,plus_plus(int,A,B),C) = plus_plus(int,A,plus_plus(int,B,C))).  [assumption].
7 (all A all B plus_plus(int,A,B) = plus_plus(int,B,A)).  [assumption].
8 (all A plus_plus(int,A,pls) = ti(int,A)).  [assumption].
9 (all A bit0(A) = plus_plus(int,A,A)).  [assumption].
10 (all A bit1(A) = plus_plus(int,plus_plus(int,one_one(int),A),A)).  [assumption].
11 (all A (number_semiring(A) -> number_number_of(A,bit1(pls)) = one_one(A))).  [assumption].
12 (all A number_number_of(int,A) = ti(int,A)).  [assumption].
13 (all A (power(A) & mult_zero(A) & no_zero_divisors(A) & zero_neq_one(A) -> (all B all C (hAPP(nat,A,power_power(A,B),C) = zero_zero(A) <-> ti(A,B) = zero_zero(A) & C != zero_zero(nat))))).  [assumption].
14 (all A all B (hBOOL(hAPP(int,bool,hAPP(int,fun(int,bool),ord_less(int),A),B)) <-> hBOOL(hAPP(int,bool,hAPP(int,fun(int,bool),ord_less_eq(int),A),B)) & ti(int,A) != ti(int,B))).  [assumption].
15 (all A nat_1(number_number_of(int,A)) = number_number_of(nat,A)).  [assumption].
16 (all A succ(A) = plus_plus(int,A,one_one(int))).  [assumption].
17 (all A minus_minus(int,A,min) = succ(A)).  [assumption].
18 -(hAPP(nat,int,power_power(int,plus_plus(int,one_one(int),hAPP(nat,int,semiring_1_of_nat(int),n))),number_number_of(nat,bit0(bit1(pls)))) != zero_zero(int)).  [assumption].
19 one(int).  [assumption].
20 -one(A) | one_one(A) = ti(A,one_one(A)).  [clausify(1)].
21 monoid_add(int).  [assumption].
22 -monoid_add(A) | plus_plus(A,B,C) = ti(A,plus_plus(A,B,C)).  [clausify(2)].
23 power(int).  [assumption].
24 -power(A) | -mult_zero(A) | -no_zero_divisors(A) | -zero_neq_one(A) | hAPP(nat,A,power_power(A,B),C) != zero_zero(A) | zero_zero(A) = ti(A,B).  [clausify(13)].
25 zero(int).  [assumption].
26 -zero(A) | zero_zero(A) = ti(A,zero_zero(A)).  [clausify(3)].
27 number_semiring(int).  [assumption].
28 -number_semiring(A) | number_number_of(A,bit0(bit1(pls))) = plus_plus(A,one_one(A),one_one(A)).  [clausify(5)].
29 -number_semiring(A) | number_number_of(A,bit1(pls)) = one_one(A).  [clausify(11)].
30 nat_1(ti(int,A)) = nat_1(A).  [clausify(4)].
31 hBOOL(hAPP(int,bool,hAPP(int,fun(int,bool),ord_less(int),zero_zero(int)),plus_plus(int,one_one(int),hAPP(nat,int,semiring_1_of_nat(int),n)))).  [assumption].
32 plus_plus(int,plus_plus(int,A,B),C) = plus_plus(int,A,plus_plus(int,B,C)).  [clausify(6)].
33 plus_plus(int,A,B) = plus_plus(int,B,A).  [clausify(7)].
34 pls = zero_zero(int).  [assumption].
35 zero_zero(int) != one_one(int).  [assumption].
36 one_one(int) != zero_zero(int).  [copy(35),flip(a)].
37 plus_plus(int,A,pls) = ti(int,A).  [clausify(8)].
38 plus_plus(int,A,zero_zero(int)) = ti(int,A).  [para(34(a,1),37(a,1,3))].
39 bit0(A) = plus_plus(int,A,A).  [clausify(9)].
40 bit1(A) = plus_plus(int,plus_plus(int,one_one(int),A),A).  [clausify(10)].
41 bit1(A) = plus_plus(int,plus_plus(int,A,one_one(int)),A).  [para(33(a,1),40(a,2,2))].
42 bit1(A) = plus_plus(int,A,plus_plus(int,A,one_one(int))).  [para(33(a,1),41(a,2))].
43 number_number_of(int,A) = ti(int,A).  [clausify(12)].
44 ti(int,A) = number_number_of(int,A).  [copy(43),flip(a)].
45 -hBOOL(hAPP(int,bool,hAPP(int,fun(int,bool),ord_less(int),A),B)) | ti(int,A) != ti(int,B).  [clausify(14)].
46 -hBOOL(hAPP(int,bool,hAPP(int,fun(int,bool),ord_less(int),A),B)) | number_number_of(int,A) != ti(int,B).  [para(44(a,1),45(b,1))].
47 -hBOOL(hAPP(int,bool,hAPP(int,fun(int,bool),ord_less(int),A),B)) | number_number_of(int,A) != number_number_of(int,B).  [para(44(a,1),46(b,2))].
48 number_number_of(nat,A) = nat_1(number_number_of(int,A)).  [clausify(15)].
49 nat_1(number_number_of(int,A)) = number_number_of(nat,A).  [copy(48),flip(a)].
50 succ(A) = plus_plus(int,A,one_one(int)).  [clausify(16)].
51 succ(A) = minus_minus(int,A,min).  [clausify(17)].
52 plus_plus(int,A,one_one(int)) = minus_minus(int,A,min).  [para(50(a,1),51(a,1))].
53 no_zero_divisors(int).  [assumption].
54 zero_neq_one(int).  [assumption].
55 mult_zero(int).  [assumption].
56 hAPP(nat,int,power_power(int,plus_plus(int,one_one(int),hAPP(nat,int,semiring_1_of_nat(int),n))),number_number_of(nat,bit0(bit1(pls)))) = zero_zero(int).  [clausify(18)].
57 hAPP(nat,int,power_power(int,plus_plus(int,one_one(int),hAPP(nat,int,semiring_1_of_nat(int),n))),number_number_of(nat,bit0(bit1(zero_zero(int))))) = zero_zero(int).  [para(34(a,1),56(a,1,4,2,1,1))].
58 hAPP(nat,int,power_power(int,plus_plus(int,one_one(int),hAPP(nat,int,semiring_1_of_nat(int),n))),number_number_of(nat,bit0(plus_plus(int,zero_zero(int),plus_plus(int,zero_zero(int),one_one(int)))))) = zero_zero(int).  [para(42(a,1),57(a,1,4,2,1))].
59 hAPP(nat,int,power_power(int,plus_plus(int,one_one(int),hAPP(nat,int,semiring_1_of_nat(int),n))),number_number_of(nat,bit0(plus_plus(int,zero_zero(int),minus_minus(int,zero_zero(int),min))))) = zero_zero(int).  [para(52(a,1),58(a,1,4,2,1,3))].
60 hAPP(nat,int,power_power(int,plus_plus(int,one_one(int),hAPP(nat,int,semiring_1_of_nat(int),n))),number_number_of(nat,plus_plus(int,plus_plus(int,zero_zero(int),minus_minus(int,zero_zero(int),min)),plus_plus(int,zero_zero(int),minus_minus(int,zero_zero(int),min))))) = zero_zero(int).  [para(39(a,1),59(a,1,4,2))].
61 hAPP(nat,int,power_power(int,plus_plus(int,one_one(int),hAPP(nat,int,semiring_1_of_nat(int),n))),number_number_of(nat,plus_plus(int,zero_zero(int),plus_plus(int,minus_minus(int,zero_zero(int),min),plus_plus(int,zero_zero(int),minus_minus(int,zero_zero(int),min)))))) = zero_zero(int).  [para(32(a,1),60(a,1,4,2))].
62 one_one(int) = ti(int,one_one(int)).  [resolve(19,a,20,a)].
63 one_one(int) = number_number_of(int,one_one(int)).  [para(44(a,1),62(a,2))].
64 number_number_of(int,one_one(int)) = one_one(int).  [copy(63),flip(a)].
65 plus_plus(int,A,B) = ti(int,plus_plus(int,A,B)).  [resolve(21,a,22,a)].
66 plus_plus(int,A,B) = number_number_of(int,plus_plus(int,A,B)).  [para(44(a,1),65(a,2))].
67 number_number_of(int,plus_plus(int,A,B)) = plus_plus(int,A,B).  [copy(66),flip(a)].
68 -mult_zero(int) | -no_zero_divisors(int) | -zero_neq_one(int) | hAPP(nat,int,power_power(int,A),B) != zero_zero(int) | zero_zero(int) = ti(int,A).  [resolve(23,a,24,a)].
69 -mult_zero(int) | -no_zero_divisors(int) | -zero_neq_one(int) | hAPP(nat,int,power_power(int,A),B) != zero_zero(int) | zero_zero(int) = number_number_of(int,A).  [para(44(a,1),68(e,2))].
70 -mult_zero(int) | -no_zero_divisors(int) | -zero_neq_one(int) | hAPP(nat,int,power_power(int,A),B) != zero_zero(int) | number_number_of(int,A) = zero_zero(int).  [copy(69),flip(e)].
71 -no_zero_divisors(int) | -zero_neq_one(int) | hAPP(nat,int,power_power(int,A),B) != zero_zero(int) | number_number_of(int,A) = zero_zero(int).  [resolve(55,a,70,a)].
72 -zero_neq_one(int) | hAPP(nat,int,power_power(int,A),B) != zero_zero(int) | number_number_of(int,A) = zero_zero(int).  [resolve(53,a,71,a)].
73 hAPP(nat,int,power_power(int,A),B) != zero_zero(int) | number_number_of(int,A) = zero_zero(int).  [resolve(54,a,72,a)].
74 zero_zero(int) = ti(int,zero_zero(int)).  [resolve(25,a,26,a)].
75 zero_zero(int) = number_number_of(int,zero_zero(int)).  [para(44(a,1),74(a,2))].
76 number_number_of(int,zero_zero(int)) = zero_zero(int).  [copy(75),flip(a)].
77 number_number_of(int,bit0(bit1(pls))) = plus_plus(int,one_one(int),one_one(int)).  [resolve(27,a,28,a)].
78 number_number_of(int,bit0(bit1(zero_zero(int)))) = plus_plus(int,one_one(int),one_one(int)).  [para(34(a,1),77(a,1,2,1,1))].
79 number_number_of(int,bit0(plus_plus(int,zero_zero(int),plus_plus(int,zero_zero(int),one_one(int))))) = plus_plus(int,one_one(int),one_one(int)).  [para(42(a,1),78(a,1,2,1))].
80 number_number_of(int,bit0(plus_plus(int,zero_zero(int),minus_minus(int,zero_zero(int),min)))) = plus_plus(int,one_one(int),one_one(int)).  [para(52(a,1),79(a,1,2,1,3))].
81 number_number_of(int,plus_plus(int,plus_plus(int,zero_zero(int),minus_minus(int,zero_zero(int),min)),plus_plus(int,zero_zero(int),minus_minus(int,zero_zero(int),min)))) = plus_plus(int,one_one(int),one_one(int)).  [para(39(a,1),80(a,1,2))].
82 number_number_of(int,plus_plus(int,zero_zero(int),plus_plus(int,minus_minus(int,zero_zero(int),min),plus_plus(int,zero_zero(int),minus_minus(int,zero_zero(int),min))))) = plus_plus(int,one_one(int),one_one(int)).  [para(32(a,1),81(a,1,2))].
83 plus_plus(int,zero_zero(int),plus_plus(int,minus_minus(int,zero_zero(int),min),plus_plus(int,zero_zero(int),minus_minus(int,zero_zero(int),min)))) = plus_plus(int,one_one(int),one_one(int)).  [para(67(a,1),82(a,1))].
84 plus_plus(int,zero_zero(int),plus_plus(int,minus_minus(int,zero_zero(int),min),plus_plus(int,zero_zero(int),minus_minus(int,zero_zero(int),min)))) = minus_minus(int,one_one(int),min).  [para(52(a,1),83(a,2))].
85 number_number_of(int,bit1(pls)) = one_one(int).  [resolve(27,a,29,a)].
86 number_number_of(int,bit1(zero_zero(int))) = one_one(int).  [para(34(a,1),85(a,1,2,1))].
87 number_number_of(int,plus_plus(int,zero_zero(int),plus_plus(int,zero_zero(int),one_one(int)))) = one_one(int).  [para(42(a,1),86(a,1,2))].
88 number_number_of(int,plus_plus(int,zero_zero(int),minus_minus(int,zero_zero(int),min))) = one_one(int).  [para(52(a,1),87(a,1,2,3))].
89 plus_plus(int,zero_zero(int),minus_minus(int,zero_zero(int),min)) = one_one(int).  [para(67(a,1),88(a,1))].
90 one_one(int) = c_0.  [new_symbol(36)].
91 plus_plus(int,A,zero_zero(int)) = number_number_of(int,A).  [para(44(a,1),38(a,2))].
92 nat_1(number_number_of(int,A)) = nat_1(A).  [para(44(a,1),30(a,1,1))].
93 number_number_of(nat,A) = nat_1(A).  [para(49(a,1),92(a,1))].
94 hAPP(nat,int,power_power(int,plus_plus(int,c_0,hAPP(nat,int,semiring_1_of_nat(int),n))),number_number_of(nat,plus_plus(int,zero_zero(int),plus_plus(int,minus_minus(int,zero_zero(int),min),plus_plus(int,zero_zero(int),minus_minus(int,zero_zero(int),min)))))) = zero_zero(int).  [para(90(a,1),61(a,1,3,2,2))].
95 hAPP(nat,int,power_power(int,plus_plus(int,c_0,hAPP(nat,int,semiring_1_of_nat(int),n))),number_number_of(nat,plus_plus(int,zero_zero(int),plus_plus(int,minus_minus(int,zero_zero(int),min),one_one(int))))) = zero_zero(int).  [para(89(a,1),94(a,1,4,2,3,3))].
96 hAPP(nat,int,power_power(int,plus_plus(int,c_0,hAPP(nat,int,semiring_1_of_nat(int),n))),number_number_of(nat,plus_plus(int,zero_zero(int),plus_plus(int,minus_minus(int,zero_zero(int),min),c_0)))) = zero_zero(int).  [para(90(a,1),95(a,1,4,2,3,3))].
97 hAPP(nat,int,power_power(int,plus_plus(int,c_0,hAPP(nat,int,semiring_1_of_nat(int),n))),number_number_of(nat,plus_plus(int,zero_zero(int),plus_plus(int,c_0,minus_minus(int,zero_zero(int),min))))) = zero_zero(int).  [para(33(a,1),96(a,1,4,2,3))].
98 hAPP(nat,int,power_power(int,plus_plus(int,c_0,hAPP(nat,int,semiring_1_of_nat(int),n))),nat_1(plus_plus(int,zero_zero(int),plus_plus(int,c_0,minus_minus(int,zero_zero(int),min))))) = zero_zero(int).  [para(93(a,1),97(a,1,4))].
99 plus_plus(int,zero_zero(int),plus_plus(int,minus_minus(int,zero_zero(int),min),one_one(int))) = minus_minus(int,one_one(int),min).  [para(89(a,1),84(a,1,3,3))].
100 plus_plus(int,zero_zero(int),plus_plus(int,minus_minus(int,zero_zero(int),min),c_0)) = minus_minus(int,one_one(int),min).  [para(90(a,1),99(a,1,3,3))].
101 plus_plus(int,zero_zero(int),plus_plus(int,c_0,minus_minus(int,zero_zero(int),min))) = minus_minus(int,one_one(int),min).  [para(33(a,1),100(a,1,3))].
102 plus_plus(int,zero_zero(int),plus_plus(int,c_0,minus_minus(int,zero_zero(int),min))) = minus_minus(int,c_0,min).  [para(90(a,1),101(a,2,2))].
103 number_number_of(int,c_0) = one_one(int).  [para(90(a,1),64(a,1,2))].
104 number_number_of(int,c_0) = c_0.  [para(90(a,1),103(a,2))].
105 plus_plus(int,A,c_0) = minus_minus(int,A,min).  [para(90(a,1),52(a,1,3))].
106 minus_minus(int,A,min) = plus_plus(int,A,c_0).  [copy(105),flip(a)].
107 hBOOL(hAPP(int,bool,hAPP(int,fun(int,bool),ord_less(int),zero_zero(int)),plus_plus(int,c_0,hAPP(nat,int,semiring_1_of_nat(int),n)))).  [para(90(a,1),31(a,1,4,2))].
108 hAPP(nat,int,power_power(int,plus_plus(int,c_0,hAPP(nat,int,semiring_1_of_nat(int),n))),nat_1(plus_plus(int,zero_zero(int),plus_plus(int,c_0,plus_plus(int,zero_zero(int),c_0))))) = zero_zero(int).  [para(106(a,1),98(a,1,4,1,3,3))].
109 hAPP(nat,int,power_power(int,plus_plus(int,c_0,hAPP(nat,int,semiring_1_of_nat(int),n))),nat_1(plus_plus(int,zero_zero(int),plus_plus(int,c_0,plus_plus(int,c_0,zero_zero(int)))))) = zero_zero(int).  [para(33(a,1),108(a,1,4,1,3,3))].
110 hAPP(nat,int,power_power(int,plus_plus(int,c_0,hAPP(nat,int,semiring_1_of_nat(int),n))),nat_1(plus_plus(int,zero_zero(int),plus_plus(int,c_0,number_number_of(int,c_0))))) = zero_zero(int).  [para(91(a,1),109(a,1,4,1,3,3))].
111 hAPP(nat,int,power_power(int,plus_plus(int,c_0,hAPP(nat,int,semiring_1_of_nat(int),n))),nat_1(plus_plus(int,zero_zero(int),plus_plus(int,c_0,c_0)))) = zero_zero(int).  [para(104(a,1),110(a,1,4,1,3,3))].
112 plus_plus(int,zero_zero(int),plus_plus(int,c_0,plus_plus(int,zero_zero(int),c_0))) = minus_minus(int,c_0,min).  [para(106(a,1),102(a,1,3,3))].
113 plus_plus(int,zero_zero(int),plus_plus(int,c_0,plus_plus(int,c_0,zero_zero(int)))) = minus_minus(int,c_0,min).  [para(33(a,1),112(a,1,3,3))].
114 plus_plus(int,zero_zero(int),plus_plus(int,c_0,number_number_of(int,c_0))) = minus_minus(int,c_0,min).  [para(91(a,1),113(a,1,3,3))].
115 plus_plus(int,zero_zero(int),plus_plus(int,c_0,c_0)) = minus_minus(int,c_0,min).  [para(104(a,1),114(a,1,3,3))].
116 plus_plus(int,zero_zero(int),plus_plus(int,c_0,c_0)) = plus_plus(int,c_0,c_0).  [para(106(a,1),115(a,2))].
117 hAPP(nat,int,power_power(int,plus_plus(int,c_0,hAPP(nat,int,semiring_1_of_nat(int),n))),nat_1(plus_plus(int,c_0,c_0))) = zero_zero(int).  [para(116(a,1),111(a,1,4,1))].
118 number_number_of(int,zero_zero(int)) != number_number_of(int,plus_plus(int,c_0,hAPP(nat,int,semiring_1_of_nat(int),n))).  [resolve(107,a,47,a)].
119 zero_zero(int) != number_number_of(int,plus_plus(int,c_0,hAPP(nat,int,semiring_1_of_nat(int),n))).  [para(76(a,1),118(a,1))].
120 zero_zero(int) != plus_plus(int,c_0,hAPP(nat,int,semiring_1_of_nat(int),n)).  [para(67(a,1),119(a,2))].
121 plus_plus(int,c_0,hAPP(nat,int,semiring_1_of_nat(int),n)) != zero_zero(int).  [copy(120),flip(a)].
122 number_number_of(int,plus_plus(int,c_0,hAPP(nat,int,semiring_1_of_nat(int),n))) = zero_zero(int).  [resolve(117,a,73,a)].
123 plus_plus(int,c_0,hAPP(nat,int,semiring_1_of_nat(int),n)) = zero_zero(int).  [para(67(a,1),122(a,1))].
124 $F.  [resolve(121,a,123,a)].

============================== end of proof ==========================
