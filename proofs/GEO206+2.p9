============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n156.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 06:18:08 CDT 2014
% CPUTime    : 0.13 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 40674 was started by sandbox on n156.star.cs.uiowa.edu,
Fri Jun  6 06:18:08 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_40642_n156.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.01 (+ 0.00) seconds.
% Length of proof is 21.
% Level of proof is 5.
% Maximum clause weight is 12.000.
% Given clauses 23.


1 (all A -distinct_lines(A,A)).  [assumption].
2 (all A all B all C (distinct_lines(A,B) -> distinct_lines(A,C) | distinct_lines(B,C))).  [assumption].
3 (all A all B all C (convergent_lines(A,B) -> convergent_lines(A,C) | convergent_lines(B,C))).  [assumption].
4 (all A all B -convergent_lines(parallel_through_point(B,A),B)).  [assumption].
5 (all A all B -apart_point_and_line(A,parallel_through_point(B,A))).  [assumption].
6 (all A all B all C (distinct_lines(B,C) -> apart_point_and_line(A,B) | apart_point_and_line(A,C) | convergent_lines(B,C))).  [assumption].
7 -(all A all B all C (-apart_point_and_line(A,B) & -convergent_lines(B,C) -> -distinct_lines(B,parallel_through_point(C,A)))).  [assumption].
8 distinct_lines(c2,parallel_through_point(c3,c1)).  [clausify(7)].
9 -distinct_lines(A,A).  [clausify(1)].
10 -apart_point_and_line(c1,c2).  [clausify(7)].
11 -convergent_lines(c2,c3).  [clausify(7)].
12 -convergent_lines(parallel_through_point(A,B),A).  [clausify(4)].
13 -apart_point_and_line(A,parallel_through_point(B,A)).  [clausify(5)].
14 -distinct_lines(A,B) | distinct_lines(A,C) | distinct_lines(B,C).  [clausify(2)].
15 -convergent_lines(A,B) | convergent_lines(A,C) | convergent_lines(B,C).  [clausify(3)].
16 -distinct_lines(A,B) | apart_point_and_line(C,A) | apart_point_and_line(C,B) | convergent_lines(A,B).  [clausify(6)].
17 distinct_lines(c2,A) | distinct_lines(parallel_through_point(c3,c1),A).  [resolve(14,a,8,a)].
18 -convergent_lines(parallel_through_point(A,B),C) | convergent_lines(C,A).  [resolve(15,b,12,a)].
19 -convergent_lines(parallel_through_point(c3,A),c2).  [resolve(18,b,11,a)].
20 distinct_lines(c2,A) | distinct_lines(parallel_through_point(c3,c1),B) | distinct_lines(A,B).  [resolve(17,b,14,a)].
21 distinct_lines(c2,c2) | distinct_lines(parallel_through_point(c3,c1),c2).  [factor(20,a,c)].
22 distinct_lines(parallel_through_point(c3,c1),c2).  [resolve(9,a,21,a)].
23 -distinct_lines(parallel_through_point(A,B),C) | apart_point_and_line(B,C) | convergent_lines(parallel_through_point(A,B),C).  [resolve(16,b,13,a)].
24 -distinct_lines(parallel_through_point(A,c1),c2) | convergent_lines(parallel_through_point(A,c1),c2).  [resolve(23,b,10,a)].
25 -distinct_lines(parallel_through_point(c3,c1),c2).  [resolve(24,b,19,a)].
26 $F.  [resolve(22,a,25,a)].

============================== end of proof ==========================
