============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n060.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 04:32:38 CDT 2014
% CPUTime    : 0.13 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 37203 was started by sandbox on n060.star.cs.uiowa.edu,
Fri Jun  6 04:32:38 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_37171_n060.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.01 (+ 0.00) seconds.
% Length of proof is 22.
% Level of proof is 6.
% Maximum clause weight is 14.000.
% Given clauses 60.


1 (all A all B (distinct_points(A,B) -> -apart_point_and_line(A,line_connecting(A,B)))).  [assumption].
2 (all A all B (distinct_points(A,B) -> -apart_point_and_line(B,line_connecting(A,B)))).  [assumption].
3 (all A all B all C (apart_point_and_line(A,B) -> distinct_points(A,C) | apart_point_and_line(C,B))).  [assumption].
4 (all A all B all C (apart_point_and_line(A,B) -> distinct_lines(B,C) | apart_point_and_line(A,C))).  [assumption].
5 -(all A all B all C (distinct_points(A,B) & apart_point_and_line(C,line_connecting(A,B)) -> distinct_lines(line_connecting(A,B),line_connecting(C,A)) & distinct_lines(line_connecting(A,B),line_connecting(C,B)))).  [assumption].
6 distinct_points(c1,c2).  [clausify(5)].
7 apart_point_and_line(c3,line_connecting(c1,c2)).  [clausify(5)].
8 -distinct_points(A,B) | -apart_point_and_line(A,line_connecting(A,B)).  [clausify(1)].
9 -distinct_points(A,B) | -apart_point_and_line(B,line_connecting(A,B)).  [clausify(2)].
10 -distinct_lines(line_connecting(c1,c2),line_connecting(c3,c1)) | -distinct_lines(line_connecting(c1,c2),line_connecting(c3,c2)).  [clausify(5)].
11 -apart_point_and_line(A,B) | distinct_points(A,C) | apart_point_and_line(C,B).  [clausify(3)].
12 -apart_point_and_line(A,B) | distinct_lines(B,C) | apart_point_and_line(A,C).  [clausify(4)].
13 -apart_point_and_line(c1,line_connecting(c1,c2)).  [resolve(8,a,6,a)].
14 -apart_point_and_line(c2,line_connecting(c1,c2)).  [resolve(9,a,6,a)].
15 distinct_points(c3,A) | apart_point_and_line(A,line_connecting(c1,c2)).  [resolve(11,a,7,a)].
16 distinct_lines(line_connecting(c1,c2),A) | apart_point_and_line(c3,A).  [resolve(12,a,7,a)].
17 apart_point_and_line(A,line_connecting(c1,c2)) | -apart_point_and_line(c3,line_connecting(c3,A)).  [resolve(15,a,8,a)].
18 apart_point_and_line(c3,line_connecting(c3,c2)) | -distinct_lines(line_connecting(c1,c2),line_connecting(c3,c1)).  [resolve(16,a,10,b)].
19 -apart_point_and_line(c3,line_connecting(c3,c2)).  [resolve(17,a,14,a)].
20 -apart_point_and_line(c3,line_connecting(c3,c1)).  [resolve(17,a,13,a)].
21 -distinct_lines(line_connecting(c1,c2),line_connecting(c3,c1)).  [resolve(19,a,18,a)].
22 apart_point_and_line(c3,line_connecting(c3,c1)).  [resolve(21,a,16,a)].
23 $F.  [resolve(20,a,22,a)].

============================== end of proof ==========================
