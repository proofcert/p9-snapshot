============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n137.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 19:49:53 CDT 2014
% CPUTime    : 1.47 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 61794 was started by sandbox on n137.star.cs.uiowa.edu,
Fri Jun  6 19:49:53 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_61762_n137.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 1.30 (+ 0.02) seconds.
% Length of proof is 66.
% Level of proof is 13.
% Maximum clause weight is 22.000.
% Given clauses 1219.


1 (all A (ilf_type(A,binary_relation_type) -> (all B (ilf_type(B,set_type) -> (member(B,range_of(A)) <-> (exists C (ilf_type(C,set_type) & member(ordered_pair(C,B),A)))))))).  [assumption].
2 (all A (ilf_type(A,set_type) -> (all B (ilf_type(B,set_type) -> (all C (ilf_type(C,subset_type(cross_product(A,B))) -> ilf_type(C,relation_type(A,B)))) & (all D (ilf_type(D,relation_type(A,B)) -> ilf_type(D,subset_type(cross_product(A,B))))))))).  [assumption].
3 (all A (ilf_type(A,set_type) -> (ilf_type(A,binary_relation_type) <-> relation_like(A) & ilf_type(A,set_type)))).  [assumption].
4 (all A (ilf_type(A,set_type) -> (all B (ilf_type(B,set_type) -> (ilf_type(B,subset_type(A)) <-> ilf_type(B,member_type(power_set(A)))))))).  [assumption].
5 (all A (ilf_type(A,set_type) -> (all B (ilf_type(B,set_type) -> (A = B <-> (all C (ilf_type(C,set_type) -> (member(C,A) <-> member(C,B))))))))).  [assumption].
6 (all A (ilf_type(A,set_type) -> (all B (ilf_type(B,set_type) -> (member(A,power_set(B)) <-> (all C (ilf_type(C,set_type) -> (member(C,A) -> member(C,B))))))))).  [assumption].
7 (all A (ilf_type(A,set_type) -> -empty(power_set(A)) & ilf_type(power_set(A),set_type))).  [assumption].
8 (all A (ilf_type(A,set_type) -> (all B (-empty(B) & ilf_type(B,set_type) -> (ilf_type(A,member_type(B)) <-> member(A,B)))))).  [assumption].
9 (all A (ilf_type(A,set_type) -> (all B (ilf_type(B,set_type) -> (all C (ilf_type(C,subset_type(cross_product(A,B))) -> relation_like(C))))))).  [assumption].
10 (all A (ilf_type(A,set_type) -> (all B (ilf_type(B,set_type) -> (all C (ilf_type(C,relation_type(A,B)) -> range(A,B,C) = range_of(C))))))).  [assumption].
11 (all A (ilf_type(A,set_type) -> (all B (ilf_type(B,set_type) -> (all C (ilf_type(C,relation_type(A,B)) -> ilf_type(range(A,B,C),subset_type(B)))))))).  [assumption].
12 (all A ilf_type(A,set_type)).  [assumption].
13 -(all A (ilf_type(A,set_type) -> (all B (ilf_type(B,set_type) -> (all C (ilf_type(C,relation_type(A,B)) -> ((all D (ilf_type(D,set_type) -> (member(D,B) -> (exists E (ilf_type(E,set_type) & member(ordered_pair(E,D),C)))))) <-> range(A,B,C) = B))))))).  [assumption].
14 -ilf_type(A,set_type) | ilf_type(A,binary_relation_type) | -relation_like(A).  [clausify(3)].
15 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -ilf_type(C,subset_type(cross_product(A,B))) | relation_like(C).  [clausify(9)].
16 ilf_type(A,set_type).  [clausify(12)].
17 ilf_type(c4,relation_type(c2,c3)).  [clausify(13)].
18 -ilf_type(A,set_type) | -empty(power_set(A)).  [clausify(7)].
19 -empty(power_set(A)).  [resolve(16,a,18,a)].
20 -ilf_type(A,set_type) | -member(ordered_pair(A,c5),c4) | range(c2,c3,c4) != c3.  [clausify(13)].
21 -member(ordered_pair(A,c5),c4) | range(c2,c3,c4) != c3.  [resolve(16,a,20,a)].
22 member(c5,c3) | range(c2,c3,c4) != c3.  [clausify(13)].
23 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -ilf_type(B,subset_type(A)) | ilf_type(B,member_type(power_set(A))).  [clausify(4)].
24 -ilf_type(A,set_type) | -ilf_type(A,subset_type(B)) | ilf_type(A,member_type(power_set(B))).  [resolve(16,a,23,a)].
25 -ilf_type(A,subset_type(B)) | ilf_type(A,member_type(power_set(B))).  [resolve(16,a,24,a)].
26 -ilf_type(A,set_type) | empty(B) | -ilf_type(B,set_type) | -ilf_type(A,member_type(B)) | member(A,B).  [clausify(8)].
27 empty(A) | -ilf_type(A,set_type) | -ilf_type(B,member_type(A)) | member(B,A).  [resolve(16,a,26,a)].
28 empty(A) | -ilf_type(B,member_type(A)) | member(B,A).  [resolve(16,a,27,b)].
29 -ilf_type(A,binary_relation_type) | -ilf_type(B,set_type) | -member(B,range_of(A)) | member(ordered_pair(f1(A,B),B),A).  [clausify(1)].
30 -ilf_type(A,binary_relation_type) | -member(B,range_of(A)) | member(ordered_pair(f1(A,B),B),A).  [resolve(16,a,29,b)].
31 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -ilf_type(C,relation_type(A,B)) | ilf_type(C,subset_type(cross_product(A,B))).  [clausify(2)].
32 -ilf_type(A,set_type) | -ilf_type(B,relation_type(C,A)) | ilf_type(B,subset_type(cross_product(C,A))).  [resolve(16,a,31,a)].
33 -ilf_type(A,relation_type(B,C)) | ilf_type(A,subset_type(cross_product(B,C))).  [resolve(16,a,32,a)].
34 -ilf_type(A,binary_relation_type) | -ilf_type(B,set_type) | member(B,range_of(A)) | -ilf_type(C,set_type) | -member(ordered_pair(C,B),A).  [clausify(1)].
35 -ilf_type(A,binary_relation_type) | member(B,range_of(A)) | -ilf_type(C,set_type) | -member(ordered_pair(C,B),A).  [resolve(16,a,34,b)].
36 -ilf_type(A,binary_relation_type) | member(B,range_of(A)) | -member(ordered_pair(C,B),A).  [resolve(16,a,35,c)].
37 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -ilf_type(C,relation_type(A,B)) | range(A,B,C) = range_of(C).  [clausify(10)].
38 -ilf_type(A,set_type) | -ilf_type(B,relation_type(C,A)) | range(C,A,B) = range_of(B).  [resolve(16,a,37,a)].
39 -ilf_type(A,relation_type(B,C)) | range(B,C,A) = range_of(A).  [resolve(16,a,38,a)].
40 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -ilf_type(C,relation_type(A,B)) | ilf_type(range(A,B,C),subset_type(B)).  [clausify(11)].
41 -ilf_type(A,set_type) | -ilf_type(B,relation_type(C,A)) | ilf_type(range(C,A,B),subset_type(A)).  [resolve(16,a,40,a)].
42 -ilf_type(A,relation_type(B,C)) | ilf_type(range(B,C,A),subset_type(C)).  [resolve(16,a,41,a)].
43 -ilf_type(A,set_type) | -member(A,c3) | member(ordered_pair(f13(A),A),c4) | range(c2,c3,c4) = c3.  [clausify(13)].
44 -member(A,c3) | member(ordered_pair(f13(A),A),c4) | range(c2,c3,c4) = c3.  [resolve(16,a,43,a)].
45 -ilf_type(A,set_type) | -ilf_type(B,set_type) | B = A | member(f5(A,B),A) | member(f5(A,B),B).  [clausify(5)].
46 -ilf_type(A,set_type) | A = B | member(f5(B,A),B) | member(f5(B,A),A).  [resolve(16,a,45,a)].
47 A = B | member(f5(B,A),B) | member(f5(B,A),A).  [resolve(16,a,46,a)].
48 -ilf_type(A,set_type) | -ilf_type(B,set_type) | B = A | -member(f5(A,B),A) | -member(f5(A,B),B).  [clausify(5)].
49 -ilf_type(A,set_type) | A = B | -member(f5(B,A),B) | -member(f5(B,A),A).  [resolve(16,a,48,a)].
50 A = B | -member(f5(B,A),B) | -member(f5(B,A),A).  [resolve(16,a,49,a)].
51 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -member(A,power_set(B)) | -ilf_type(C,set_type) | -member(C,A) | member(C,B).  [clausify(6)].
52 -ilf_type(A,set_type) | -member(B,power_set(A)) | -ilf_type(C,set_type) | -member(C,B) | member(C,A).  [resolve(16,a,51,a)].
53 -member(A,power_set(B)) | -ilf_type(C,set_type) | -member(C,A) | member(C,B).  [resolve(16,a,52,a)].
54 -member(A,power_set(B)) | -member(C,A) | member(C,B).  [resolve(16,a,53,b)].
55 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -ilf_type(C,subset_type(cross_product(A,B))) | -ilf_type(C,set_type) | ilf_type(C,binary_relation_type).  [resolve(15,d,14,c)].
56 -ilf_type(A,set_type) | -ilf_type(B,subset_type(cross_product(C,A))) | -ilf_type(B,set_type) | ilf_type(B,binary_relation_type).  [resolve(16,a,55,a)].
57 -ilf_type(A,subset_type(cross_product(B,C))) | -ilf_type(A,set_type) | ilf_type(A,binary_relation_type).  [resolve(16,a,56,a)].
58 -ilf_type(A,subset_type(cross_product(B,C))) | ilf_type(A,binary_relation_type).  [resolve(16,a,57,b)].
59 ilf_type(c4,subset_type(cross_product(c2,c3))).  [resolve(33,a,17,a)].
60 range(c2,c3,c4) = range_of(c4).  [resolve(39,a,17,a)].
61 -member(A,c3) | member(ordered_pair(f13(A),A),c4) | range_of(c4) = c3.  [para(60(a,1),44(c,1))].
62 member(c5,c3) | range_of(c4) != c3.  [para(60(a,1),22(b,1))].
63 -member(ordered_pair(A,c5),c4) | range_of(c4) != c3.  [para(60(a,1),21(b,1))].
64 ilf_type(range(c2,c3,c4),subset_type(c3)).  [resolve(42,a,17,a)].
65 ilf_type(range_of(c4),subset_type(c3)).  [para(60(a,1),64(a,1))].
66 ilf_type(range_of(c4),member_type(power_set(c3))).  [resolve(65,a,25,a)].
67 ilf_type(c4,binary_relation_type).  [resolve(59,a,58,a)].
68 empty(power_set(c3)) | member(range_of(c4),power_set(c3)).  [resolve(66,a,28,b)].
69 member(range_of(c4),power_set(c3)).  [resolve(19,a,68,a)].
70 -member(A,range_of(c4)) | member(A,c3).  [resolve(69,a,54,a)].
71 member(f5(range_of(c4),A),c3) | A = range_of(c4) | member(f5(range_of(c4),A),A).  [resolve(70,a,47,b)].
72 member(f5(range_of(c4),A),c3) | range_of(c4) = A | member(f5(range_of(c4),A),A).  [copy(71),flip(b)].
73 member(f5(range_of(c4),c3),c3) | range_of(c4) = c3.  [factor(72,a,c)].
74 member(ordered_pair(f13(f5(A,c3)),f5(A,c3)),c4) | range_of(c4) = c3 | c3 = A | member(f5(A,c3),A).  [resolve(61,a,47,c)].
75 range_of(c4) = c3 | c3 = range_of(c4) | -member(f5(range_of(c4),c3),range_of(c4)).  [resolve(73,a,50,c)].
76 range_of(c4) = c3 | range_of(c4) = c3 | -member(f5(range_of(c4),c3),range_of(c4)).  [copy(75),flip(b)].
77 range_of(c4) = c3 | -member(f5(range_of(c4),c3),range_of(c4)).  [copy(76),merge(b)].
78 range_of(c4) = c3 | c3 = A | member(f5(A,c3),A) | -ilf_type(c4,binary_relation_type) | member(f5(A,c3),range_of(c4)).  [resolve(74,a,36,c)].
79 range_of(c4) = c3 | c3 = A | member(f5(A,c3),A) | member(f5(A,c3),range_of(c4)).  [resolve(67,a,78,d)].
80 range_of(c4) = c3 | c3 = range_of(c4) | member(f5(range_of(c4),c3),range_of(c4)).  [factor(79,c,d)].
81 range_of(c4) = c3 | range_of(c4) = c3 | member(f5(range_of(c4),c3),range_of(c4)).  [copy(80),flip(b)].
82 range_of(c4) = c3 | member(f5(range_of(c4),c3),range_of(c4)).  [copy(81),merge(b)].
83 range_of(c4) = c3 | range_of(c4) = c3.  [resolve(82,b,77,b)].
84 range_of(c4) = c3.  [copy(83),merge(b)].
85 -member(ordered_pair(A,c5),c4) | c3 != c3.  [para(84(a,1),63(b,1))].
86 -member(ordered_pair(A,c5),c4).  [copy(85),xx(b)].
87 member(c5,c3) | c3 != c3.  [para(84(a,1),62(b,1))].
88 member(c5,c3).  [copy(87),xx(b)].
89 -member(A,range_of(c4)) | member(ordered_pair(f1(c4,A),A),c4).  [resolve(30,a,67,a)].
90 -member(c5,range_of(c4)).  [resolve(89,b,86,a)].
91 -member(c5,c3).  [para(84(a,1),90(a,2))].
92 $F.  [resolve(88,a,91,a)].

============================== end of proof ==========================
