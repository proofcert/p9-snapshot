============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n051.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 10:26:33 CDT 2014
% CPUTime    : 1.54 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 1440 was started by sandbox on n051.star.cs.uiowa.edu,
Fri Jun  6 10:26:33 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_1408_n051.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 1.28 (+ 0.01) seconds.
% Length of proof is 33.
% Level of proof is 7.
% Maximum clause weight is 42.000.
% Given clauses 2529.


1 (all A (one_sorted_str(A) -> (all B (net_str(B,A) -> (all C (net_str(C,A) -> (subnetstr(C,A,B) <-> subrelstr(C,B) & the_mapping(A,C) = relation_dom_restr_as_relation_of(the_carrier(B),the_carrier(A),the_mapping(A,B),the_carrier(C))))))))).  [assumption].
2 (all A (one_sorted_str(A) -> (all B (net_str(B,A) -> rel_str(B))))).  [assumption].
3 (all A all B (one_sorted_str(A) & net_str(B,A) -> (all C (subnetstr(C,A,B) -> net_str(C,A))))).  [assumption].
4 (all A (rel_str(A) -> (all B (subrelstr(B,A) -> (all C (element(C,the_carrier(A)) -> (all D (element(D,the_carrier(A)) -> (all E (element(E,the_carrier(B)) -> (all F (element(F,the_carrier(B)) -> (E = C & F = D & related(B,E,F) -> related(A,C,D)))))))))))))).  [assumption].
5 -(all A (one_sorted_str(A) -> (all B (net_str(B,A) -> (all C (subnetstr(C,A,B) -> (all D (element(D,the_carrier(B)) -> (all E (element(E,the_carrier(B)) -> (all F (element(F,the_carrier(C)) -> (all V6 (element(V6,the_carrier(C)) -> (D = F & E = V6 & related(C,F,V6) -> related(B,D,E)))))))))))))))).  [assumption].
6 one_sorted_str(c11).  [clausify(5)].
7 -one_sorted_str(A) | -net_str(B,A) | rel_str(B).  [clausify(2)].
8 -one_sorted_str(A) | -net_str(B,A) | -subnetstr(C,A,B) | net_str(C,A).  [clausify(3)].
9 -one_sorted_str(A) | -net_str(B,A) | -net_str(C,A) | -subnetstr(C,A,B) | subrelstr(C,B).  [clausify(1)].
10 -rel_str(A) | -subrelstr(B,A) | -element(C,the_carrier(A)) | -element(D,the_carrier(A)) | -element(E,the_carrier(B)) | -element(F,the_carrier(B)) | E != C | F != D | -related(B,E,F) | related(A,C,D).  [clausify(4)].
11 -net_str(A,c11) | -net_str(B,c11) | -subnetstr(B,c11,A) | subrelstr(B,A).  [resolve(9,a,6,a)].
12 net_str(c12,c11).  [clausify(5)].
13 c16 = c14.  [clausify(5)].
14 c17 = c15.  [clausify(5)].
15 subnetstr(c13,c11,c12).  [clausify(5)].
16 element(c14,the_carrier(c12)).  [clausify(5)].
17 element(c15,the_carrier(c12)).  [clausify(5)].
18 element(c16,the_carrier(c13)).  [clausify(5)].
19 element(c14,the_carrier(c13)).  [para(13(a,1),18(a,1))].
20 element(c17,the_carrier(c13)).  [clausify(5)].
21 element(c15,the_carrier(c13)).  [para(14(a,1),20(a,1))].
22 related(c13,c16,c17).  [clausify(5)].
23 related(c13,c14,c17).  [para(13(a,1),22(a,2))].
24 related(c13,c14,c15).  [para(14(a,1),23(a,3))].
25 -related(c12,c14,c15).  [clausify(5)].
26 -net_str(A,c11) | rel_str(A).  [resolve(7,a,6,a)].
27 -net_str(A,c11) | -subnetstr(B,c11,A) | net_str(B,c11).  [resolve(8,a,6,a)].
28 -net_str(A,c11) | -net_str(B,c11) | -subnetstr(B,c11,A) | -rel_str(A) | -element(C,the_carrier(A)) | -element(D,the_carrier(A)) | -element(E,the_carrier(B)) | -element(F,the_carrier(B)) | E != C | F != D | -related(B,E,F) | related(A,C,D).  [resolve(11,d,10,b)].
29 rel_str(c12).  [resolve(26,a,12,a)].
30 -net_str(c12,c11) | net_str(c13,c11).  [resolve(27,b,15,a)].
31 net_str(c13,c11).  [resolve(12,a,30,a)].
32 -net_str(A,c11) | -net_str(c13,c11) | -subnetstr(c13,c11,A) | -rel_str(A) | -element(B,the_carrier(A)) | -element(C,the_carrier(A)) | -element(c14,the_carrier(c13)) | -element(c15,the_carrier(c13)) | c14 != B | c15 != C | related(A,B,C).  [resolve(28,k,24,a)].
33 -net_str(A,c11) | -subnetstr(c13,c11,A) | -rel_str(A) | -element(B,the_carrier(A)) | -element(C,the_carrier(A)) | -element(c14,the_carrier(c13)) | -element(c15,the_carrier(c13)) | c14 != B | c15 != C | related(A,B,C).  [resolve(31,a,32,b)].
34 -net_str(A,c11) | -subnetstr(c13,c11,A) | -rel_str(A) | -element(B,the_carrier(A)) | -element(C,the_carrier(A)) | -element(c15,the_carrier(c13)) | c14 != B | c15 != C | related(A,B,C).  [resolve(19,a,33,f)].
35 -net_str(A,c11) | -subnetstr(c13,c11,A) | -rel_str(A) | -element(B,the_carrier(A)) | -element(C,the_carrier(A)) | c14 != B | c15 != C | related(A,B,C).  [resolve(21,a,34,f)].
36 -net_str(c12,c11) | -rel_str(c12) | -element(A,the_carrier(c12)) | -element(B,the_carrier(c12)) | c14 != A | c15 != B | related(c12,A,B).  [resolve(35,b,15,a)].
37 -rel_str(c12) | -element(A,the_carrier(c12)) | -element(B,the_carrier(c12)) | c14 != A | c15 != B | related(c12,A,B).  [resolve(12,a,36,a)].
38 -element(A,the_carrier(c12)) | -element(B,the_carrier(c12)) | c14 != A | c15 != B | related(c12,A,B).  [resolve(29,a,37,a)].
39 -element(A,the_carrier(c12)) | c14 != c14 | c15 != A | related(c12,c14,A).  [resolve(38,a,16,a)].
40 -element(A,the_carrier(c12)) | c15 != A | related(c12,c14,A).  [copy(39),xx(b)].
41 c15 != c15 | related(c12,c14,c15).  [resolve(40,a,17,a)].
42 related(c12,c14,c15).  [copy(41),xx(a)].
43 $F.  [resolve(25,a,42,a)].

============================== end of proof ==========================
