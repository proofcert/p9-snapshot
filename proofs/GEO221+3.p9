============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n076.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 07:15:53 CDT 2014
% CPUTime    : 0.15 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 23441 was started by sandbox on n076.star.cs.uiowa.edu,
Fri Jun  6 07:15:53 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_23409_n076.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.01 (+ 0.00) seconds.
% Length of proof is 16.
% Level of proof is 3.
% Maximum clause weight is 15.000.
% Given clauses 33.


1 (all A all B -unorthogonal_lines(orthogonal_through_point(B,A),B)).  [assumption].
2 (all A all B -apart_point_and_line(A,orthogonal_through_point(B,A))).  [assumption].
3 (all A all B all C all D (distinct_lines(B,C) -> apart_point_and_line(A,B) | apart_point_and_line(A,C) | unorthogonal_lines(B,D) | unorthogonal_lines(C,D))).  [assumption].
4 (all A all B (equal_lines(A,B) <-> -distinct_lines(A,B))).  [assumption].
5 (all A all B (incident_point_and_line(A,B) <-> -apart_point_and_line(A,B))).  [assumption].
6 -(all A all B all C (incident_point_and_line(B,orthogonal_through_point(C,A)) -> equal_lines(orthogonal_through_point(C,A),orthogonal_through_point(C,B)))).  [assumption].
7 -incident_point_and_line(A,B) | -apart_point_and_line(A,B).  [clausify(5)].
8 incident_point_and_line(c2,orthogonal_through_point(c3,c1)).  [clausify(6)].
9 equal_lines(A,B) | distinct_lines(A,B).  [clausify(4)].
10 -equal_lines(orthogonal_through_point(c3,c1),orthogonal_through_point(c3,c2)).  [clausify(6)].
11 -unorthogonal_lines(orthogonal_through_point(A,B),A).  [clausify(1)].
12 -apart_point_and_line(A,orthogonal_through_point(B,A)).  [clausify(2)].
13 -distinct_lines(A,B) | apart_point_and_line(C,A) | apart_point_and_line(C,B) | unorthogonal_lines(A,D) | unorthogonal_lines(B,D).  [clausify(3)].
14 -apart_point_and_line(c2,orthogonal_through_point(c3,c1)).  [resolve(7,a,8,a)].
15 distinct_lines(orthogonal_through_point(c3,c1),orthogonal_through_point(c3,c2)).  [resolve(10,a,9,a)].
16 -distinct_lines(orthogonal_through_point(c3,c1),A) | apart_point_and_line(c2,A) | unorthogonal_lines(orthogonal_through_point(c3,c1),B) | unorthogonal_lines(A,B).  [resolve(13,b,14,a)].
17 -distinct_lines(orthogonal_through_point(c3,c1),orthogonal_through_point(A,c2)) | unorthogonal_lines(orthogonal_through_point(c3,c1),B) | unorthogonal_lines(orthogonal_through_point(A,c2),B).  [resolve(16,b,12,a)].
18 -distinct_lines(orthogonal_through_point(c3,c1),orthogonal_through_point(A,c2)) | unorthogonal_lines(orthogonal_through_point(A,c2),c3).  [resolve(17,b,11,a)].
19 -distinct_lines(orthogonal_through_point(c3,c1),orthogonal_through_point(c3,c2)).  [resolve(18,b,11,a)].
20 $F.  [resolve(15,a,19,a)].

============================== end of proof ==========================
