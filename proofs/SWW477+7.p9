============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n124.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 07:35:13 CDT 2014
% CPUTime    : 43.65 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 57502 was started by sandbox on n124.star.cs.uiowa.edu,
Fri Jun  6 07:35:21 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_57470_n124.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 34.80 (+ 0.12) seconds.
% Length of proof is 17.
% Level of proof is 5.
% Maximum clause weight is 233.000.
% Given clauses 1555.


1 (all A (hBOOL(hAPP(ty,bool,hAPP(exp(list(char)),fun(ty,bool),hAPP(fun(list(char),option(ty)),fun(exp(list(char)),fun(ty,bool)),hAPP(fun(nat,option(product_prod(list(char),fun(product_prod(list(char),list(char)),option(val))))),fun(fun(list(char),option(ty)),fun(exp(list(char)),fun(ty,bool))),hAPP(list(product_prod(list(char),product_prod(list(char),product_prod(list(product_prod(list(char),ty)),list(product_prod(list(char),product_prod(list(ty),product_prod(ty,product_prod(list(list(char)),exp(list(char))))))))))),fun(fun(nat,option(product_prod(list(char),fun(product_prod(list(char),list(char)),option(val))))),fun(fun(list(char),option(ty)),fun(exp(list(char)),fun(ty,bool)))),wTrt,p),ha),e),ea),A)) -> (exists B (hBOOL(hAPP(ty,bool,hAPP(exp(list(char)),fun(ty,bool),hAPP(fun(list(char),option(ty)),fun(exp(list(char)),fun(ty,bool)),hAPP(fun(nat,option(product_prod(list(char),fun(product_prod(list(char),list(char)),option(val))))),fun(fun(list(char),option(ty)),fun(exp(list(char)),fun(ty,bool))),hAPP(list(product_prod(list(char),product_prod(list(char),product_prod(list(product_prod(list(char),ty)),list(product_prod(list(char),product_prod(list(ty),product_prod(ty,product_prod(list(list(char)),exp(list(char))))))))))),fun(fun(nat,option(product_prod(list(char),fun(product_prod(list(char),list(char)),option(val))))),fun(fun(list(char),option(ty)),fun(exp(list(char)),fun(ty,bool)))),wTrt,p),h_a),e),e_a),B)) & hBOOL(hAPP(ty,bool,hAPP(ty,fun(ty,bool),hAPP(list(product_prod(list(char),product_prod(list(char),product_prod(list(product_prod(list(char),ty)),list(product_prod(list(char),product_prod(list(ty),product_prod(ty,product_prod(list(list(char)),exp(list(char))))))))))),fun(ty,fun(ty,bool)),widen(product_prod(list(list(char)),exp(list(char)))),p),B),A)))))).  [assumption].
2 (all A nt != hAPP(list(char),ty,class,A)).  [assumption].
3 (all A all B all C all D (hBOOL(hAPP(ty,bool,hAPP(ty,fun(ty,bool),hAPP(list(product_prod(list(char),product_prod(list(char),product_prod(list(product_prod(list(char),ty)),list(product_prod(list(char),product_prod(list(ty),product_prod(ty,A)))))))),fun(ty,fun(ty,bool)),widen(A),B),C),D)) <-> (exists E (C = E & D = E)) | (exists F exists V6 (C = hAPP(list(char),ty,class,F) & D = hAPP(list(char),ty,class,V6) & hBOOL(hAPP(fun(product_prod(list(char),list(char)),bool),bool,hAPP(product_prod(list(char),list(char)),fun(fun(product_prod(list(char),list(char)),bool),bool),member(product_prod(list(char),list(char))),hAPP(list(char),product_prod(list(char),list(char)),hAPP(list(char),fun(list(char),product_prod(list(char),list(char))),product_Pair(list(char),list(char)),F),V6)),hAPP(fun(product_prod(list(char),list(char)),bool),fun(product_prod(list(char),list(char)),bool),transitive_rtrancl(list(char)),hAPP(list(product_prod(list(char),product_prod(list(char),product_prod(list(product_prod(list(char),ty)),list(product_prod(list(char),product_prod(list(ty),product_prod(ty,A)))))))),fun(product_prod(list(char),list(char)),bool),subcls1(A),B)))))) | (exists F (C = nt & D = hAPP(list(char),ty,class,F))))).  [assumption].
4 hBOOL(hAPP(ty,bool,hAPP(exp(list(char)),fun(ty,bool),hAPP(fun(list(char),option(ty)),fun(exp(list(char)),fun(ty,bool)),hAPP(fun(nat,option(product_prod(list(char),fun(product_prod(list(char),list(char)),option(val))))),fun(fun(list(char),option(ty)),fun(exp(list(char)),fun(ty,bool))),hAPP(list(product_prod(list(char),product_prod(list(char),product_prod(list(product_prod(list(char),ty)),list(product_prod(list(char),product_prod(list(ty),product_prod(ty,product_prod(list(list(char)),exp(list(char))))))))))),fun(fun(nat,option(product_prod(list(char),fun(product_prod(list(char),list(char)),option(val))))),fun(fun(list(char),option(ty)),fun(exp(list(char)),fun(ty,bool)))),wTrt,p),ha),e),ea),nt)).  [assumption].
5 -hBOOL(hAPP(ty,bool,hAPP(exp(list(char)),fun(ty,bool),hAPP(fun(list(char),option(ty)),fun(exp(list(char)),fun(ty,bool)),hAPP(fun(nat,option(product_prod(list(char),fun(product_prod(list(char),list(char)),option(val))))),fun(fun(list(char),option(ty)),fun(exp(list(char)),fun(ty,bool))),hAPP(list(product_prod(list(char),product_prod(list(char),product_prod(list(product_prod(list(char),ty)),list(product_prod(list(char),product_prod(list(ty),product_prod(ty,product_prod(list(list(char)),exp(list(char))))))))))),fun(fun(nat,option(product_prod(list(char),fun(product_prod(list(char),list(char)),option(val))))),fun(fun(list(char),option(ty)),fun(exp(list(char)),fun(ty,bool)))),wTrt,p),ha),e),ea),A)) | hBOOL(hAPP(ty,bool,hAPP(exp(list(char)),fun(ty,bool),hAPP(fun(list(char),option(ty)),fun(exp(list(char)),fun(ty,bool)),hAPP(fun(nat,option(product_prod(list(char),fun(product_prod(list(char),list(char)),option(val))))),fun(fun(list(char),option(ty)),fun(exp(list(char)),fun(ty,bool))),hAPP(list(product_prod(list(char),product_prod(list(char),product_prod(list(product_prod(list(char),ty)),list(product_prod(list(char),product_prod(list(ty),product_prod(ty,product_prod(list(list(char)),exp(list(char))))))))))),fun(fun(nat,option(product_prod(list(char),fun(product_prod(list(char),list(char)),option(val))))),fun(fun(list(char),option(ty)),fun(exp(list(char)),fun(ty,bool)))),wTrt,p),h_a),e),e_a),f1(A))).  [clausify(1)].
6 -hBOOL(hAPP(ty,bool,hAPP(exp(list(char)),fun(ty,bool),hAPP(fun(list(char),option(ty)),fun(exp(list(char)),fun(ty,bool)),hAPP(fun(nat,option(product_prod(list(char),fun(product_prod(list(char),list(char)),option(val))))),fun(fun(list(char),option(ty)),fun(exp(list(char)),fun(ty,bool))),hAPP(list(product_prod(list(char),product_prod(list(char),product_prod(list(product_prod(list(char),ty)),list(product_prod(list(char),product_prod(list(ty),product_prod(ty,product_prod(list(list(char)),exp(list(char))))))))))),fun(fun(nat,option(product_prod(list(char),fun(product_prod(list(char),list(char)),option(val))))),fun(fun(list(char),option(ty)),fun(exp(list(char)),fun(ty,bool)))),wTrt,p),ha),e),ea),A)) | hBOOL(hAPP(ty,bool,hAPP(ty,fun(ty,bool),hAPP(list(product_prod(list(char),product_prod(list(char),product_prod(list(product_prod(list(char),ty)),list(product_prod(list(char),product_prod(list(ty),product_prod(ty,product_prod(list(list(char)),exp(list(char))))))))))),fun(ty,fun(ty,bool)),widen(product_prod(list(list(char)),exp(list(char)))),p),f1(A)),A)).  [clausify(1)].
7 hAPP(list(char),ty,class,A) != nt.  [clausify(2)].
8 -hBOOL(hAPP(ty,bool,hAPP(ty,fun(ty,bool),hAPP(list(product_prod(list(char),product_prod(list(char),product_prod(list(product_prod(list(char),ty)),list(product_prod(list(char),product_prod(list(ty),product_prod(ty,A)))))))),fun(ty,fun(ty,bool)),widen(A),B),C),D)) | C = f145(A,B,C,D) | hAPP(list(char),ty,class,f147(A,B,C,D)) = D | hAPP(list(char),ty,class,f148(A,B,C,D)) = D.  [clausify(3)].
9 -hBOOL(hAPP(ty,bool,hAPP(ty,fun(ty,bool),hAPP(list(product_prod(list(char),product_prod(list(char),product_prod(list(product_prod(list(char),ty)),list(product_prod(list(char),product_prod(list(ty),product_prod(ty,A)))))))),fun(ty,fun(ty,bool)),widen(A),B),C),D)) | f145(A,B,C,D) = C | hAPP(list(char),ty,class,f147(A,B,C,D)) = D | hAPP(list(char),ty,class,f148(A,B,C,D)) = D.  [copy(8),flip(b)].
10 -hBOOL(hAPP(ty,bool,hAPP(ty,fun(ty,bool),hAPP(list(product_prod(list(char),product_prod(list(char),product_prod(list(product_prod(list(char),ty)),list(product_prod(list(char),product_prod(list(ty),product_prod(ty,A)))))))),fun(ty,fun(ty,bool)),widen(A),B),C),D)) | D = f145(A,B,C,D) | hAPP(list(char),ty,class,f147(A,B,C,D)) = D | hAPP(list(char),ty,class,f148(A,B,C,D)) = D.  [clausify(3)].
11 -hBOOL(hAPP(ty,bool,hAPP(ty,fun(ty,bool),hAPP(list(product_prod(list(char),product_prod(list(char),product_prod(list(product_prod(list(char),ty)),list(product_prod(list(char),product_prod(list(ty),product_prod(ty,A)))))))),fun(ty,fun(ty,bool)),widen(A),B),C),D)) | f145(A,B,C,D) = D | hAPP(list(char),ty,class,f147(A,B,C,D)) = D | hAPP(list(char),ty,class,f148(A,B,C,D)) = D.  [copy(10),flip(b)].
12 -hBOOL(hAPP(ty,bool,hAPP(exp(list(char)),fun(ty,bool),hAPP(fun(list(char),option(ty)),fun(exp(list(char)),fun(ty,bool)),hAPP(fun(nat,option(product_prod(list(char),fun(product_prod(list(char),list(char)),option(val))))),fun(fun(list(char),option(ty)),fun(exp(list(char)),fun(ty,bool))),hAPP(list(product_prod(list(char),product_prod(list(char),product_prod(list(product_prod(list(char),ty)),list(product_prod(list(char),product_prod(list(ty),product_prod(ty,product_prod(list(list(char)),exp(list(char))))))))))),fun(fun(nat,option(product_prod(list(char),fun(product_prod(list(char),list(char)),option(val))))),fun(fun(list(char),option(ty)),fun(exp(list(char)),fun(ty,bool)))),wTrt,p),h_a),e),e_a),nt)).  [assumption].
13 hBOOL(hAPP(ty,bool,hAPP(exp(list(char)),fun(ty,bool),hAPP(fun(list(char),option(ty)),fun(exp(list(char)),fun(ty,bool)),hAPP(fun(nat,option(product_prod(list(char),fun(product_prod(list(char),list(char)),option(val))))),fun(fun(list(char),option(ty)),fun(exp(list(char)),fun(ty,bool))),hAPP(list(product_prod(list(char),product_prod(list(char),product_prod(list(product_prod(list(char),ty)),list(product_prod(list(char),product_prod(list(ty),product_prod(ty,product_prod(list(list(char)),exp(list(char))))))))))),fun(fun(nat,option(product_prod(list(char),fun(product_prod(list(char),list(char)),option(val))))),fun(fun(list(char),option(ty)),fun(exp(list(char)),fun(ty,bool)))),wTrt,p),h_a),e),e_a),f1(nt))).  [resolve(5,a,4,a)].
14 hBOOL(hAPP(ty,bool,hAPP(ty,fun(ty,bool),hAPP(list(product_prod(list(char),product_prod(list(char),product_prod(list(product_prod(list(char),ty)),list(product_prod(list(char),product_prod(list(ty),product_prod(ty,product_prod(list(list(char)),exp(list(char))))))))))),fun(ty,fun(ty,bool)),widen(product_prod(list(list(char)),exp(list(char)))),p),f1(nt)),nt)).  [resolve(6,a,4,a)].
15 f145(product_prod(list(list(char)),exp(list(char))),p,f1(nt),nt) = nt | hAPP(list(char),ty,class,f147(product_prod(list(list(char)),exp(list(char))),p,f1(nt),nt)) = nt | hAPP(list(char),ty,class,f148(product_prod(list(list(char)),exp(list(char))),p,f1(nt),nt)) = nt.  [resolve(14,a,11,a)].
16 f145(product_prod(list(list(char)),exp(list(char))),p,f1(nt),nt) = nt | hAPP(list(char),ty,class,f148(product_prod(list(list(char)),exp(list(char))),p,f1(nt),nt)) = nt.  [resolve(7,a,15,b)].
17 f145(product_prod(list(list(char)),exp(list(char))),p,f1(nt),nt) = nt.  [resolve(7,a,16,b)].
18 f145(product_prod(list(list(char)),exp(list(char))),p,f1(nt),nt) = f1(nt) | hAPP(list(char),ty,class,f147(product_prod(list(list(char)),exp(list(char))),p,f1(nt),nt)) = nt | hAPP(list(char),ty,class,f148(product_prod(list(list(char)),exp(list(char))),p,f1(nt),nt)) = nt.  [resolve(14,a,9,a)].
19 nt = f1(nt) | hAPP(list(char),ty,class,f147(product_prod(list(list(char)),exp(list(char))),p,f1(nt),nt)) = nt | hAPP(list(char),ty,class,f148(product_prod(list(list(char)),exp(list(char))),p,f1(nt),nt)) = nt.  [para(17(a,1),18(a,1))].
20 f1(nt) = nt | hAPP(list(char),ty,class,f147(product_prod(list(list(char)),exp(list(char))),p,f1(nt),nt)) = nt | hAPP(list(char),ty,class,f148(product_prod(list(list(char)),exp(list(char))),p,f1(nt),nt)) = nt.  [copy(19),flip(a)].
21 f1(nt) = nt | hAPP(list(char),ty,class,f148(product_prod(list(list(char)),exp(list(char))),p,f1(nt),nt)) = nt.  [resolve(7,a,20,b)].
22 f1(nt) = nt.  [resolve(7,a,21,b)].
23 hBOOL(hAPP(ty,bool,hAPP(exp(list(char)),fun(ty,bool),hAPP(fun(list(char),option(ty)),fun(exp(list(char)),fun(ty,bool)),hAPP(fun(nat,option(product_prod(list(char),fun(product_prod(list(char),list(char)),option(val))))),fun(fun(list(char),option(ty)),fun(exp(list(char)),fun(ty,bool))),hAPP(list(product_prod(list(char),product_prod(list(char),product_prod(list(product_prod(list(char),ty)),list(product_prod(list(char),product_prod(list(ty),product_prod(ty,product_prod(list(list(char)),exp(list(char))))))))))),fun(fun(nat,option(product_prod(list(char),fun(product_prod(list(char),list(char)),option(val))))),fun(fun(list(char),option(ty)),fun(exp(list(char)),fun(ty,bool)))),wTrt,p),h_a),e),e_a),nt)).  [para(22(a,1),13(a,1,4))].
24 $F.  [resolve(12,a,23,a)].

============================== end of proof ==========================
