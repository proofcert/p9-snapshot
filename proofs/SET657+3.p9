============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n160.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 19:39:53 CDT 2014
% CPUTime    : 1.20 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 16633 was started by sandbox on n160.star.cs.uiowa.edu,
Fri Jun  6 19:39:53 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_16601_n160.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 1.03 (+ 0.02) seconds.
% Length of proof is 71.
% Level of proof is 8.
% Maximum clause weight is 12.000.
% Given clauses 1404.


1 (all A (ilf_type(A,binary_relation_type) -> field_of(A) = union(domain_of(A),range_of(A)))).  [assumption].
2 (all A (ilf_type(A,set_type) -> (all B (ilf_type(B,set_type) -> (all C (ilf_type(C,set_type) -> (member(C,union(A,B)) <-> member(C,A) | member(C,B)))))))).  [assumption].
3 (all A (ilf_type(A,set_type) -> (all B (ilf_type(B,set_type) -> (all C (ilf_type(C,subset_type(cross_product(A,B))) -> ilf_type(C,relation_type(A,B)))) & (all D (ilf_type(D,relation_type(A,B)) -> ilf_type(D,subset_type(cross_product(A,B))))))))).  [assumption].
4 (all A (ilf_type(A,set_type) -> (all B (ilf_type(B,set_type) -> (subset(A,B) <-> (all C (ilf_type(C,set_type) -> (member(C,A) -> member(C,B))))))))).  [assumption].
5 (all A (ilf_type(A,set_type) -> (ilf_type(A,binary_relation_type) <-> relation_like(A) & ilf_type(A,set_type)))).  [assumption].
6 (all A (ilf_type(A,set_type) -> (all B (ilf_type(B,set_type) -> (ilf_type(B,subset_type(A)) <-> ilf_type(B,member_type(power_set(A)))))))).  [assumption].
7 (all A (ilf_type(A,set_type) -> (all B (ilf_type(B,set_type) -> (member(A,power_set(B)) <-> (all C (ilf_type(C,set_type) -> (member(C,A) -> member(C,B))))))))).  [assumption].
8 (all A (ilf_type(A,set_type) -> -empty(power_set(A)) & ilf_type(power_set(A),set_type))).  [assumption].
9 (all A (ilf_type(A,set_type) -> (all B (-empty(B) & ilf_type(B,set_type) -> (ilf_type(A,member_type(B)) <-> member(A,B)))))).  [assumption].
10 (all A (ilf_type(A,set_type) -> (all B (ilf_type(B,set_type) -> (all C (ilf_type(C,subset_type(cross_product(A,B))) -> relation_like(C))))))).  [assumption].
11 (all A (ilf_type(A,set_type) -> (all B (ilf_type(B,set_type) -> (all C (ilf_type(C,relation_type(A,B)) -> domain(A,B,C) = domain_of(C))))))).  [assumption].
12 (all A (ilf_type(A,set_type) -> (all B (ilf_type(B,set_type) -> (all C (ilf_type(C,relation_type(A,B)) -> ilf_type(domain(A,B,C),subset_type(A)))))))).  [assumption].
13 (all A (ilf_type(A,set_type) -> (all B (ilf_type(B,set_type) -> (all C (ilf_type(C,relation_type(A,B)) -> range(A,B,C) = range_of(C))))))).  [assumption].
14 (all A (ilf_type(A,set_type) -> (all B (ilf_type(B,set_type) -> (all C (ilf_type(C,relation_type(A,B)) -> ilf_type(range(A,B,C),subset_type(B)))))))).  [assumption].
15 (all A ilf_type(A,set_type)).  [assumption].
16 -(all A (ilf_type(A,set_type) -> (all B (ilf_type(B,set_type) -> (all C (ilf_type(C,relation_type(A,B)) -> subset(field_of(C),union(A,B)))))))).  [assumption].
17 -ilf_type(A,set_type) | ilf_type(A,binary_relation_type) | -relation_like(A).  [clausify(5)].
18 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -ilf_type(C,subset_type(cross_product(A,B))) | relation_like(C).  [clausify(10)].
19 ilf_type(A,set_type).  [clausify(15)].
20 ilf_type(c4,relation_type(c2,c3)).  [clausify(16)].
21 -ilf_type(A,set_type) | -empty(power_set(A)).  [clausify(8)].
22 -empty(power_set(A)).  [resolve(19,a,21,a)].
23 -subset(field_of(c4),union(c2,c3)).  [clausify(16)].
24 -ilf_type(A,binary_relation_type) | field_of(A) = union(domain_of(A),range_of(A)).  [clausify(1)].
25 -ilf_type(A,binary_relation_type) | union(domain_of(A),range_of(A)) = field_of(A).  [copy(24),flip(b)].
26 -ilf_type(A,set_type) | -ilf_type(B,set_type) | subset(A,B) | member(f2(A,B),A).  [clausify(4)].
27 -ilf_type(A,set_type) | subset(B,A) | member(f2(B,A),B).  [resolve(19,a,26,a)].
28 subset(A,B) | member(f2(A,B),A).  [resolve(19,a,27,a)].
29 -ilf_type(A,set_type) | -ilf_type(B,set_type) | subset(A,B) | -member(f2(A,B),B).  [clausify(4)].
30 -ilf_type(A,set_type) | subset(B,A) | -member(f2(B,A),A).  [resolve(19,a,29,a)].
31 subset(A,B) | -member(f2(A,B),B).  [resolve(19,a,30,a)].
32 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -ilf_type(B,subset_type(A)) | ilf_type(B,member_type(power_set(A))).  [clausify(6)].
33 -ilf_type(A,set_type) | -ilf_type(A,subset_type(B)) | ilf_type(A,member_type(power_set(B))).  [resolve(19,a,32,a)].
34 -ilf_type(A,subset_type(B)) | ilf_type(A,member_type(power_set(B))).  [resolve(19,a,33,a)].
35 -ilf_type(A,set_type) | empty(B) | -ilf_type(B,set_type) | -ilf_type(A,member_type(B)) | member(A,B).  [clausify(9)].
36 empty(A) | -ilf_type(A,set_type) | -ilf_type(B,member_type(A)) | member(B,A).  [resolve(19,a,35,a)].
37 empty(A) | -ilf_type(B,member_type(A)) | member(B,A).  [resolve(19,a,36,b)].
38 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -ilf_type(C,set_type) | member(C,union(A,B)) | -member(C,A).  [clausify(2)].
39 -ilf_type(A,set_type) | -ilf_type(B,set_type) | member(B,union(C,A)) | -member(B,C).  [resolve(19,a,38,a)].
40 -ilf_type(A,set_type) | member(A,union(B,C)) | -member(A,B).  [resolve(19,a,39,a)].
41 member(A,union(B,C)) | -member(A,B).  [resolve(19,a,40,a)].
42 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -ilf_type(C,set_type) | member(C,union(A,B)) | -member(C,B).  [clausify(2)].
43 -ilf_type(A,set_type) | -ilf_type(B,set_type) | member(B,union(C,A)) | -member(B,A).  [resolve(19,a,42,a)].
44 -ilf_type(A,set_type) | member(A,union(B,C)) | -member(A,C).  [resolve(19,a,43,a)].
45 member(A,union(B,C)) | -member(A,C).  [resolve(19,a,44,a)].
46 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -ilf_type(C,relation_type(A,B)) | ilf_type(C,subset_type(cross_product(A,B))).  [clausify(3)].
47 -ilf_type(A,set_type) | -ilf_type(B,relation_type(C,A)) | ilf_type(B,subset_type(cross_product(C,A))).  [resolve(19,a,46,a)].
48 -ilf_type(A,relation_type(B,C)) | ilf_type(A,subset_type(cross_product(B,C))).  [resolve(19,a,47,a)].
49 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -ilf_type(C,relation_type(A,B)) | domain(A,B,C) = domain_of(C).  [clausify(11)].
50 -ilf_type(A,set_type) | -ilf_type(B,relation_type(C,A)) | domain(C,A,B) = domain_of(B).  [resolve(19,a,49,a)].
51 -ilf_type(A,relation_type(B,C)) | domain(B,C,A) = domain_of(A).  [resolve(19,a,50,a)].
52 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -ilf_type(C,relation_type(A,B)) | ilf_type(domain(A,B,C),subset_type(A)).  [clausify(12)].
53 -ilf_type(A,set_type) | -ilf_type(B,relation_type(C,A)) | ilf_type(domain(C,A,B),subset_type(C)).  [resolve(19,a,52,a)].
54 -ilf_type(A,relation_type(B,C)) | ilf_type(domain(B,C,A),subset_type(B)).  [resolve(19,a,53,a)].
55 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -ilf_type(C,relation_type(A,B)) | range(A,B,C) = range_of(C).  [clausify(13)].
56 -ilf_type(A,set_type) | -ilf_type(B,relation_type(C,A)) | range(C,A,B) = range_of(B).  [resolve(19,a,55,a)].
57 -ilf_type(A,relation_type(B,C)) | range(B,C,A) = range_of(A).  [resolve(19,a,56,a)].
58 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -ilf_type(C,relation_type(A,B)) | ilf_type(range(A,B,C),subset_type(B)).  [clausify(14)].
59 -ilf_type(A,set_type) | -ilf_type(B,relation_type(C,A)) | ilf_type(range(C,A,B),subset_type(A)).  [resolve(19,a,58,a)].
60 -ilf_type(A,relation_type(B,C)) | ilf_type(range(B,C,A),subset_type(C)).  [resolve(19,a,59,a)].
61 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -member(A,power_set(B)) | -ilf_type(C,set_type) | -member(C,A) | member(C,B).  [clausify(7)].
62 -ilf_type(A,set_type) | -member(B,power_set(A)) | -ilf_type(C,set_type) | -member(C,B) | member(C,A).  [resolve(19,a,61,a)].
63 -member(A,power_set(B)) | -ilf_type(C,set_type) | -member(C,A) | member(C,B).  [resolve(19,a,62,a)].
64 -member(A,power_set(B)) | -member(C,A) | member(C,B).  [resolve(19,a,63,b)].
65 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -ilf_type(C,set_type) | -member(C,union(A,B)) | member(C,A) | member(C,B).  [clausify(2)].
66 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -member(B,union(C,A)) | member(B,C) | member(B,A).  [resolve(19,a,65,a)].
67 -ilf_type(A,set_type) | -member(A,union(B,C)) | member(A,B) | member(A,C).  [resolve(19,a,66,a)].
68 -member(A,union(B,C)) | member(A,B) | member(A,C).  [resolve(19,a,67,a)].
69 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -ilf_type(C,subset_type(cross_product(A,B))) | -ilf_type(C,set_type) | ilf_type(C,binary_relation_type).  [resolve(18,d,17,c)].
70 -ilf_type(A,set_type) | -ilf_type(B,subset_type(cross_product(C,A))) | -ilf_type(B,set_type) | ilf_type(B,binary_relation_type).  [resolve(19,a,69,a)].
71 -ilf_type(A,subset_type(cross_product(B,C))) | -ilf_type(A,set_type) | ilf_type(A,binary_relation_type).  [resolve(19,a,70,a)].
72 -ilf_type(A,subset_type(cross_product(B,C))) | ilf_type(A,binary_relation_type).  [resolve(19,a,71,b)].
73 member(f2(field_of(c4),union(c2,c3)),field_of(c4)).  [resolve(28,a,23,a)].
74 -member(f2(field_of(c4),union(c2,c3)),union(c2,c3)).  [resolve(31,a,23,a)].
75 ilf_type(c4,subset_type(cross_product(c2,c3))).  [resolve(48,a,20,a)].
76 domain(c2,c3,c4) = domain_of(c4).  [resolve(51,a,20,a)].
77 ilf_type(domain(c2,c3,c4),subset_type(c2)).  [resolve(54,a,20,a)].
78 ilf_type(domain_of(c4),subset_type(c2)).  [para(76(a,1),77(a,1))].
79 range(c2,c3,c4) = range_of(c4).  [resolve(57,a,20,a)].
80 ilf_type(range(c2,c3,c4),subset_type(c3)).  [resolve(60,a,20,a)].
81 ilf_type(range_of(c4),subset_type(c3)).  [para(79(a,1),80(a,1))].
82 -member(f2(field_of(c4),union(c2,c3)),c3).  [resolve(45,a,74,a)].
83 -member(f2(field_of(c4),union(c2,c3)),c2).  [resolve(41,a,74,a)].
84 ilf_type(domain_of(c4),member_type(power_set(c2))).  [resolve(78,a,34,a)].
85 ilf_type(range_of(c4),member_type(power_set(c3))).  [resolve(81,a,34,a)].
86 ilf_type(c4,binary_relation_type).  [resolve(75,a,72,a)].
87 union(domain_of(c4),range_of(c4)) = field_of(c4).  [resolve(86,a,25,a)].
88 empty(power_set(c2)) | member(domain_of(c4),power_set(c2)).  [resolve(84,a,37,b)].
89 member(domain_of(c4),power_set(c2)).  [resolve(22,a,88,a)].
90 -member(A,domain_of(c4)) | member(A,c2).  [resolve(64,a,89,a)].
91 -member(f2(field_of(c4),union(c2,c3)),domain_of(c4)).  [resolve(90,b,83,a)].
92 empty(power_set(c3)) | member(range_of(c4),power_set(c3)).  [resolve(85,a,37,b)].
93 member(range_of(c4),power_set(c3)).  [resolve(22,a,92,a)].
94 -member(A,range_of(c4)) | member(A,c3).  [resolve(64,a,93,a)].
95 -member(f2(field_of(c4),union(c2,c3)),range_of(c4)).  [resolve(94,b,82,a)].
96 -member(f2(field_of(c4),union(c2,c3)),union(domain_of(c4),A)) | member(f2(field_of(c4),union(c2,c3)),A).  [resolve(68,b,91,a)].
97 -member(f2(field_of(c4),union(c2,c3)),union(domain_of(c4),range_of(c4))).  [resolve(96,b,95,a)].
98 -member(f2(field_of(c4),union(c2,c3)),field_of(c4)).  [para(87(a,1),97(a,2))].
99 $F.  [resolve(73,a,98,a)].

============================== end of proof ==========================
