============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n082.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Thu Jun  5 17:32:33 CDT 2014
% CPUTime    : 0.16 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 44080 was started by sandbox on n082.star.cs.uiowa.edu,
Thu Jun  5 17:32:33 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_44048_n082.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.04 (+ 0.00) seconds.
% Length of proof is 31.
% Level of proof is 6.
% Maximum clause weight is 27.000.
% Given clauses 90.


1 (all A all B (smaller_or_equal(A,B) <-> smaller(A,B) | A = B)).  [assumption].
2 (all A all B (greater_or_equal(A,B) <-> greater(A,B) | A = B)).  [assumption].
3 (all A all B (smaller(A,B) <-> greater(B,A))).  [assumption].
4 (all A all B all C (organization(A) & -has_immunity(A,B) & -has_immunity(A,C) -> (greater(capability(A,C),capability(A,B)) & greater_or_equal(position(A,C),position(A,B)) -> smaller(hazard_of_mortality(A,C),hazard_of_mortality(A,B))) & (greater_or_equal(capability(A,C),capability(A,B)) & greater(position(A,C),position(A,B)) -> smaller(hazard_of_mortality(A,C),hazard_of_mortality(A,B))) & (capability(A,C) = capability(A,B) & position(A,C) = position(A,B) -> hazard_of_mortality(A,C) = hazard_of_mortality(A,B)))).  [assumption].
5 (all A all B all C (organization(A) -> (greater(stock_of_knowledge(A,C),stock_of_knowledge(A,B)) & smaller_or_equal(internal_friction(A,C),internal_friction(A,B)) -> greater(capability(A,C),capability(A,B))) & (smaller_or_equal(stock_of_knowledge(A,C),stock_of_knowledge(A,B)) & greater(internal_friction(A,C),internal_friction(A,B)) -> smaller(capability(A,C),capability(A,B))) & (stock_of_knowledge(A,C) = stock_of_knowledge(A,B) & internal_friction(A,C) = internal_friction(A,B) -> capability(A,C) = capability(A,B)))).  [assumption].
6 (all A all B all C (organization(A) -> (greater(external_ties(A,C),external_ties(A,B)) -> greater(position(A,C),position(A,B))) & (external_ties(A,C) = external_ties(A,B) -> position(A,C) = position(A,B)))).  [assumption].
7 -(all A all B all C (organization(A) & -has_immunity(A,B) & -has_immunity(A,C) & stock_of_knowledge(A,C) = stock_of_knowledge(A,B) & greater(internal_friction(A,C),internal_friction(A,B)) & external_ties(A,B) = external_ties(A,C) -> greater(hazard_of_mortality(A,C),hazard_of_mortality(A,B)))).  [assumption].
8 organization(c1).  [clausify(7)].
9 -organization(A) | external_ties(A,B) != external_ties(A,C) | position(A,B) = position(A,C).  [clausify(6)].
10 -organization(A) | -smaller_or_equal(stock_of_knowledge(A,B),stock_of_knowledge(A,C)) | -greater(internal_friction(A,B),internal_friction(A,C)) | smaller(capability(A,B),capability(A,C)).  [clausify(5)].
11 -organization(A) | has_immunity(A,B) | has_immunity(A,C) | -greater(capability(A,C),capability(A,B)) | -greater_or_equal(position(A,C),position(A,B)) | smaller(hazard_of_mortality(A,C),hazard_of_mortality(A,B)).  [clausify(4)].
12 -smaller(A,B) | greater(B,A).  [clausify(3)].
13 -smaller_or_equal(stock_of_knowledge(c1,A),stock_of_knowledge(c1,B)) | -greater(internal_friction(c1,A),internal_friction(c1,B)) | smaller(capability(c1,A),capability(c1,B)).  [resolve(10,a,8,a)].
14 has_immunity(c1,A) | has_immunity(c1,B) | -greater(capability(c1,B),capability(c1,A)) | -greater_or_equal(position(c1,B),position(c1,A)) | smaller(hazard_of_mortality(c1,B),hazard_of_mortality(c1,A)).  [resolve(11,a,8,a)].
15 stock_of_knowledge(c1,c3) = stock_of_knowledge(c1,c2).  [clausify(7)].
16 greater(internal_friction(c1,c3),internal_friction(c1,c2)).  [clausify(7)].
17 external_ties(c1,c3) = external_ties(c1,c2).  [clausify(7)].
18 -has_immunity(c1,c2).  [clausify(7)].
19 -has_immunity(c1,c3).  [clausify(7)].
20 -greater(hazard_of_mortality(c1,c3),hazard_of_mortality(c1,c2)).  [clausify(7)].
21 smaller_or_equal(A,B) | B != A.  [clausify(1)].
22 greater_or_equal(A,B) | B != A.  [clausify(2)].
23 external_ties(c1,A) != external_ties(c1,B) | position(c1,A) = position(c1,B).  [resolve(9,a,8,a)].
24 -smaller_or_equal(stock_of_knowledge(c1,A),stock_of_knowledge(c1,B)) | -greater(internal_friction(c1,A),internal_friction(c1,B)) | greater(capability(c1,B),capability(c1,A)).  [resolve(13,c,12,a)].
25 has_immunity(c1,A) | has_immunity(c1,B) | -greater(capability(c1,B),capability(c1,A)) | -greater_or_equal(position(c1,B),position(c1,A)) | greater(hazard_of_mortality(c1,A),hazard_of_mortality(c1,B)).  [resolve(14,e,12,a)].
26 smaller_or_equal(A,A).  [xx_res(21,b)].
27 greater_or_equal(A,A).  [xx_res(22,b)].
28 position(c1,c3) = position(c1,c2).  [resolve(23,a,17,a)].
29 -smaller_or_equal(stock_of_knowledge(c1,c2),stock_of_knowledge(c1,A)) | -greater(internal_friction(c1,c3),internal_friction(c1,A)) | greater(capability(c1,A),capability(c1,c3)).  [para(15(a,1),24(a,1))].
30 -greater(internal_friction(c1,c3),internal_friction(c1,c2)) | greater(capability(c1,c2),capability(c1,c3)).  [resolve(29,a,26,a)].
31 greater(capability(c1,c2),capability(c1,c3)).  [resolve(16,a,30,a)].
32 has_immunity(c1,A) | -greater(capability(c1,A),capability(c1,c3)) | -greater_or_equal(position(c1,A),position(c1,c3)) | greater(hazard_of_mortality(c1,c3),hazard_of_mortality(c1,A)).  [resolve(25,a,19,a)].
33 -greater(capability(c1,c2),capability(c1,c3)) | -greater_or_equal(position(c1,c2),position(c1,c3)) | greater(hazard_of_mortality(c1,c3),hazard_of_mortality(c1,c2)).  [resolve(32,a,18,a)].
34 -greater_or_equal(position(c1,c2),position(c1,c3)) | greater(hazard_of_mortality(c1,c3),hazard_of_mortality(c1,c2)).  [resolve(33,a,31,a)].
35 -greater_or_equal(position(c1,c2),position(c1,c3)).  [resolve(34,b,20,a)].
36 -greater_or_equal(position(c1,c2),position(c1,c2)).  [para(28(a,1),35(a,2))].
37 $F.  [resolve(27,a,36,a)].

============================== end of proof ==========================
