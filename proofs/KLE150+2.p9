============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n140.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 00:22:08 CDT 2014
% CPUTime    : 0.13 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 63050 was started by sandbox on n140.star.cs.uiowa.edu,
Fri Jun  6 00:22:08 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_63018_n140.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.01 (+ 0.00) seconds: goals.
% Length of proof is 34.
% Level of proof is 7.
% Maximum clause weight is 20.000.
% Given clauses 43.


1 (all A all B addition(A,B) = addition(B,A)).  [assumption].
2 (all A addition(A,A) = A).  [assumption].
3 (all A all B all C multiplication(A,multiplication(B,C)) = multiplication(multiplication(A,B),C)).  [assumption].
4 (all A multiplication(A,one) = A).  [assumption].
5 (all A multiplication(zero,A) = zero).  [assumption].
6 (all A addition(one,multiplication(A,star(A))) = star(A)).  [assumption].
7 (all A all B all C (leq(addition(multiplication(A,C),B),C) -> leq(multiplication(star(A),B),C))).  [assumption].
8 (all A strong_iteration(A) = addition(multiplication(A,strong_iteration(A)),one)).  [assumption].
9 (all A all B (leq(A,B) <-> addition(A,B) = B)).  [assumption].
10 -(all A (leq(strong_iteration(multiplication(A,zero)),addition(one,multiplication(A,zero))) & leq(addition(one,multiplication(A,zero)),strong_iteration(multiplication(A,zero))))).  [assumption].
11 addition(A,A) = A.  [clausify(2)].
12 multiplication(A,one) = A.  [clausify(4)].
13 multiplication(zero,A) = zero.  [clausify(5)].
14 addition(A,B) = addition(B,A).  [clausify(1)].
15 star(A) = addition(one,multiplication(A,star(A))).  [clausify(6)].
16 addition(one,multiplication(A,star(A))) = star(A).  [copy(15),flip(a)].
17 strong_iteration(A) = addition(multiplication(A,strong_iteration(A)),one).  [clausify(8)].
18 strong_iteration(A) = addition(one,multiplication(A,strong_iteration(A))).  [para(14(a,1),17(a,2))].
19 addition(one,multiplication(A,strong_iteration(A))) = strong_iteration(A).  [copy(18),flip(a)].
20 multiplication(multiplication(A,B),C) = multiplication(A,multiplication(B,C)).  [clausify(3)].
21 -leq(strong_iteration(multiplication(c1,zero)),addition(one,multiplication(c1,zero))) | -leq(addition(one,multiplication(c1,zero)),strong_iteration(multiplication(c1,zero))).  [clausify(10)].
22 -leq(A,B) | addition(A,B) = B.  [clausify(9)].
23 leq(A,B) | addition(A,B) != B.  [clausify(9)].
24 -leq(addition(multiplication(A,B),C),B) | leq(multiplication(star(A),C),B).  [clausify(7)].
25 -leq(addition(A,multiplication(B,C)),C) | leq(multiplication(star(B),A),C).  [para(14(a,1),24(a,1))].
26 addition(one,multiplication(A,multiplication(B,star(multiplication(A,B))))) = star(multiplication(A,B)).  [para(20(a,1),16(a,1,2))].
27 addition(one,multiplication(A,multiplication(B,strong_iteration(multiplication(A,B))))) = strong_iteration(multiplication(A,B)).  [para(20(a,1),19(a,1,2))].
28 leq(A,A).  [resolve(23,b,11,a)].
29 -leq(strong_iteration(A),strong_iteration(A)) | leq(multiplication(star(A),one),strong_iteration(A)).  [para(19(a,1),25(a,1))].
30 -leq(strong_iteration(A),strong_iteration(A)) | leq(star(A),strong_iteration(A)).  [para(12(a,1),29(b,1))].
31 leq(star(A),strong_iteration(A)).  [resolve(28,a,30,a)].
32 addition(star(A),strong_iteration(A)) = strong_iteration(A).  [resolve(22,a,31,a)].
33 addition(one,multiplication(A,zero)) = star(multiplication(A,zero)).  [para(13(a,1),26(a,1,2,2))].
34 -leq(strong_iteration(multiplication(c1,zero)),star(multiplication(c1,zero))) | -leq(addition(one,multiplication(c1,zero)),strong_iteration(multiplication(c1,zero))).  [para(33(a,1),21(a,2))].
35 -leq(strong_iteration(multiplication(c1,zero)),star(multiplication(c1,zero))) | -leq(star(multiplication(c1,zero)),strong_iteration(multiplication(c1,zero))).  [para(33(a,1),34(b,1))].
36 -leq(strong_iteration(multiplication(c1,zero)),star(multiplication(c1,zero))).  [resolve(31,a,35,b)].
37 addition(strong_iteration(multiplication(c1,zero)),star(multiplication(c1,zero))) != star(multiplication(c1,zero)).  [resolve(23,a,36,a)].
38 addition(star(multiplication(c1,zero)),strong_iteration(multiplication(c1,zero))) != star(multiplication(c1,zero)).  [para(14(a,1),37(a,1))].
39 strong_iteration(multiplication(c1,zero)) != star(multiplication(c1,zero)).  [para(32(a,1),38(a,1))].
40 addition(one,multiplication(A,zero)) = strong_iteration(multiplication(A,zero)).  [para(13(a,1),27(a,1,2,2))].
41 star(multiplication(A,zero)) = strong_iteration(multiplication(A,zero)).  [para(33(a,1),40(a,1))].
42 strong_iteration(multiplication(A,zero)) = star(multiplication(A,zero)).  [copy(41),flip(a)].
43 $F.  [resolve(42,a,39,a)].

============================== end of proof ==========================
