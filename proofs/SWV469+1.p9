============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n114.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 11:17:43 CDT 2014
% CPUTime    : 24.81 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 3494 was started by sandbox on n114.star.cs.uiowa.edu,
Fri Jun  6 11:17:43 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_3462_n114.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 24.20 (+ 0.43) seconds.
% Length of proof is 40.
% Level of proof is 8.
% Maximum clause weight is 33.000.
% Given clauses 6225.


1 (all A leq(s(zero),host(A))).  [assumption].
2 (all A all B init(snoc(B,A)) = B).  [assumption].
3 (all A all B all C (elem(A,cons(B,C)) <-> A = B | elem(A,C))).  [assumption].
4 (all A leq(A,A)).  [assumption].
5 (all A all B (leq(A,B) | leq(B,A))).  [assumption].
6 (all A all B (leq(A,B) & leq(B,A) <-> A = B)).  [assumption].
7 (all A all B (leq(A,s(B)) <-> A = s(B) | leq(A,B))).  [assumption].
8 -(all A all B all C all D ((all E all F (elem(m_Ldr(F),queue(host(E))) -> -leq(host(E),host(F)))) & (all E all F (F != E & host(F) = host(E) -> -setIn(E,alive) | -setIn(F,alive))) & (all E all F (setIn(F,alive) & index(status,host(F)) = elec_2 -> -elem(m_Ack(E,F),queue(host(E))))) & (all E ((index(status,host(E)) = elec_1 | index(status,host(E)) = elec_2) & setIn(E,alive) -> index(elid,host(E)) = E)) & (all E all F (setIn(E,alive) & setIn(F,alive) & setIn(host(F),index(down,host(E))) & index(status,host(F)) = elec_2 -> leq(index(pendack,host(F)),host(E)))) & (all E all F (setIn(F,alive) & index(status,host(F)) = norm & index(ldr,host(F)) = host(F) -> -(setIn(E,alive) & setIn(host(F),index(down,host(E)))))) & (all E all V6 all F (-leq(host(F),host(E)) & setIn(E,alive) & setIn(F,alive) & host(F) = host(V6) & index(status,host(F)) = elec_2 -> -elem(m_Down(V6),queue(host(E))))) & (all E all F (-leq(host(E),host(F)) & setIn(E,alive) & setIn(F,alive) & index(status,host(E)) = elec_2 & index(status,host(F)) = elec_2 -> leq(index(pendack,host(F)),host(E)))) & (all E all V6 all F (setIn(F,alive) & elem(m_Ack(F,V6),queue(host(F))) & host(V6) = host(E) -> -(setIn(E,alive) & index(ldr,host(E)) = host(E) & index(status,host(E)) = norm))) & (all E all V6 all F (setIn(E,alive) & setIn(F,alive) & host(F) = host(V6) & index(status,host(E)) = elec_2 & index(status,host(F)) = elec_2 -> -elem(m_Ack(E,V6),queue(host(E))))) & (all E all V6 all F (setIn(E,alive) & setIn(F,alive) & elem(m_Down(V6),queue(host(E))) & host(F) = host(V6) & index(status,host(F)) = elec_2 -> leq(index(pendack,host(F)),host(E)))) & (all E all V6 all F (setIn(F,alive) & host(V6) = host(F) & index(status,host(F)) = norm & index(ldr,host(F)) = host(F) -> -(setIn(E,alive) & elem(m_Down(V6),queue(host(E)))))) & (all E all F (-leq(index(pendack,host(F)),host(E)) & setIn(F,alive) & index(status,host(F)) = elec_2 -> -(setIn(E,alive) & index(ldr,host(E)) = host(E) & index(status,host(E)) = norm))) & (all E all F (-leq(host(E),host(F)) & setIn(E,alive) & setIn(F,alive) & index(status,host(E)) = elec_2 & index(status,host(F)) = elec_2 -> -leq(index(pendack,host(E)),index(pendack,host(F))))) & (all E all V6 all F (setIn(F,alive) & elem(m_Down(V6),queue(host(F))) & host(V6) = host(E) & index(status,host(F)) = elec_2 -> -(setIn(E,alive) & index(ldr,host(E)) = host(E) & index(status,host(E)) = norm))) & (all E all V6 all F ((all V7 (-leq(host(F),V7) & leq(s(zero),V7) -> setIn(V7,index(down,host(F))) | V7 = host(V6))) & -leq(host(F),host(E)) & elem(m_Down(V6),queue(host(F))) & index(status,host(F)) = elec_1 -> -(setIn(E,alive) & index(ldr,host(E)) = host(E) & index(status,host(E)) = norm))) & queue(host(C)) = cons(m_Down(D),A) -> (setIn(C,alive) -> (-leq(host(C),host(D)) -> (-(index(ldr,host(C)) = host(D) & index(status,host(C)) = norm | index(status,host(C)) = wait & host(D) = host(index(elid,host(C)))) -> ((all E (-leq(host(C),E) & leq(s(zero),E) -> setIn(E,index(down,host(C))) | E = host(D))) & index(status,host(C)) = elec_1 -> (-leq(nbr_proc,host(C)) -> (all E (host(C) != host(E) -> (all V8 (host(C) = host(V8) -> (-leq(s(host(C)),host(E)) & setIn(V8,alive) -> -(setIn(E,alive) & index(ldr,host(E)) = host(E) & index(status,host(E)) = norm))))))))))))).  [assumption].
9 leq(s(zero),host(A)).  [clausify(1)].
10 init(snoc(A,B)) = A.  [clausify(2)].
11 elem(A,cons(B,C)) | B != A.  [clausify(3)].
12 leq(A,A).  [clausify(4)].
13 leq(A,B) | leq(B,A).  [clausify(5)].
14 -leq(A,B) | -leq(B,A) | B = A.  [clausify(6)].
15 -leq(A,s(B)) | s(B) = A | leq(A,B).  [clausify(7)].
16 -setIn(A,alive) | index(status,host(A)) != norm | index(ldr,host(A)) != host(A) | -setIn(B,alive) | -setIn(host(A),index(down,host(B))).  [clausify(8)].
17 -setIn(A,alive) | host(B) != host(A) | index(status,host(A)) != norm | index(ldr,host(A)) != host(A) | -setIn(C,alive) | -elem(m_Down(B),queue(host(C))).  [clausify(8)].
18 cons(m_Down(c4),c1) = queue(host(c3)).  [clausify(8)].
19 setIn(c3,alive).  [clausify(8)].
20 leq(host(c3),A) | -leq(s(zero),A) | setIn(A,index(down,host(c3))) | host(c4) = A.  [clausify(8)].
21 host(c5) != host(c3).  [clausify(8)].
22 -leq(s(host(c3)),host(c5)).  [clausify(8)].
23 setIn(c5,alive).  [clausify(8)].
24 index(ldr,host(c5)) = host(c5).  [clausify(8)].
25 index(status,host(c5)) = norm.  [clausify(8)].
26 norm = index(status,host(c5)).  [copy(25),flip(a)].
27 -setIn(A,alive) | host(B) != host(A) | index(status,host(A)) != index(status,host(c5)) | index(ldr,host(A)) != host(A) | -setIn(C,alive) | -elem(m_Down(B),queue(host(C))).  [para(26(a,1),17(c,2))].
28 -setIn(A,alive) | host(B) != host(A) | index(status,host(c5)) != index(status,host(A)) | index(ldr,host(A)) != host(A) | -setIn(C,alive) | -elem(m_Down(B),queue(host(C))).  [copy(27),flip(c)].
29 -setIn(A,alive) | index(status,host(A)) != index(status,host(c5)) | index(ldr,host(A)) != host(A) | -setIn(B,alive) | -setIn(host(A),index(down,host(B))).  [para(26(a,1),16(b,2))].
30 -setIn(A,alive) | index(status,host(c5)) != index(status,host(A)) | index(ldr,host(A)) != host(A) | -setIn(B,alive) | -setIn(host(A),index(down,host(B))).  [copy(29),flip(b)].
31 elem(A,cons(init(snoc(A,B)),C)).  [resolve(11,b,10,a)].
32 elem(A,cons(A,B)).  [para(10(a,1),31(a,2,1))].
33 leq(host(c3),host(A)) | setIn(host(A),index(down,host(c3))) | host(c4) = host(A).  [resolve(20,b,9,a)].
34 leq(host(c5),s(host(c3))).  [resolve(22,a,13,b)].
35 elem(m_Down(c4),queue(host(c3))).  [para(18(a,1),32(a,2))].
36 s(host(c3)) = host(c5) | leq(host(c5),host(c3)).  [resolve(34,a,15,a)].
37 -setIn(A,alive) | host(c4) != host(A) | index(status,host(c5)) != index(status,host(A)) | index(ldr,host(A)) != host(A) | -setIn(c3,alive).  [resolve(35,a,28,f)].
38 -setIn(A,alive) | host(c4) != host(A) | index(status,host(c5)) != index(status,host(A)) | index(ldr,host(A)) != host(A).  [resolve(19,a,37,e)].
39 host(c4) != host(c5) | index(status,host(c5)) != index(status,host(c5)) | index(ldr,host(c5)) != host(c5).  [resolve(38,a,23,a)].
40 host(c4) != host(c5) | index(status,host(c5)) != index(status,host(c5)) | host(c5) != host(c5).  [para(24(a,1),39(c,1))].
41 host(c5) != host(c4) | index(status,host(c5)) != index(status,host(c5)) | host(c5) != host(c5).  [copy(40),flip(a)].
42 host(c5) != host(c4) | host(c5) != host(c5).  [copy(41),xx(b)].
43 host(c5) != host(c4).  [copy(42),xx(b)].
44 leq(host(c3),host(A)) | host(c4) = host(A) | -setIn(A,alive) | index(status,host(c5)) != index(status,host(A)) | index(ldr,host(A)) != host(A) | -setIn(c3,alive).  [resolve(33,b,30,e)].
45 leq(host(c3),host(A)) | host(c4) = host(A) | -setIn(A,alive) | index(status,host(c5)) != index(status,host(A)) | index(ldr,host(A)) != host(A).  [resolve(19,a,44,f)].
46 s(host(c3)) = host(c5) | -leq(host(c3),host(c5)) | host(c5) = host(c3).  [resolve(36,b,14,b)].
47 s(host(c3)) = host(c5) | -leq(host(c3),host(c5)).  [resolve(21,a,46,c)].
48 leq(host(c3),host(c5)) | host(c4) = host(c5) | index(status,host(c5)) != index(status,host(c5)) | index(ldr,host(c5)) != host(c5).  [resolve(45,c,23,a)].
49 leq(host(c3),host(c5)) | host(c4) = host(c5) | index(status,host(c5)) != index(status,host(c5)) | host(c5) != host(c5).  [para(24(a,1),48(d,1))].
50 leq(host(c3),host(c5)) | host(c5) = host(c4) | index(status,host(c5)) != index(status,host(c5)) | host(c5) != host(c5).  [copy(49),flip(b)].
51 leq(host(c3),host(c5)) | host(c5) = host(c4) | host(c5) != host(c5).  [copy(50),xx(c)].
52 leq(host(c3),host(c5)) | host(c5) = host(c4).  [copy(51),xx(c)].
53 leq(host(c3),host(c5)).  [resolve(43,a,52,b)].
54 s(host(c3)) = host(c5).  [resolve(53,a,47,b)].
55 -leq(host(c5),host(c5)).  [para(54(a,1),22(a,1))].
56 $F.  [resolve(12,a,55,a)].

============================== end of proof ==========================
