============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n154.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Thu Jun  5 17:37:53 CDT 2014
% CPUTime    : 0.12 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 34609 was started by sandbox on n154.star.cs.uiowa.edu,
Thu Jun  5 17:37:53 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_34577_n154.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.01 (+ 0.00) seconds.
% Length of proof is 21.
% Level of proof is 6.
% Maximum clause weight is 21.000.
% Given clauses 19.


1 (all A all B (smaller_or_equal(A,B) <-> smaller(A,B) | A = B)).  [assumption].
2 (all A all B all C (organization(A) -> (greater(stock_of_knowledge(A,C),stock_of_knowledge(A,B)) & smaller_or_equal(internal_friction(A,C),internal_friction(A,B)) -> greater(capability(A,C),capability(A,B))) & (smaller_or_equal(stock_of_knowledge(A,C),stock_of_knowledge(A,B)) & greater(internal_friction(A,C),internal_friction(A,B)) -> smaller(capability(A,C),capability(A,B))) & (stock_of_knowledge(A,C) = stock_of_knowledge(A,B) & internal_friction(A,C) = internal_friction(A,B) -> capability(A,C) = capability(A,B)))).  [assumption].
3 (all A all B all C (organization(A) & greater(age(A,C),age(A,B)) -> greater(stock_of_knowledge(A,C),stock_of_knowledge(A,B)))).  [assumption].
4 (all A all B all C (organization(A) -> internal_friction(A,C) = internal_friction(A,B))).  [assumption].
5 -(all A all B all C (organization(A) & greater(age(A,C),age(A,B)) -> greater(capability(A,C),capability(A,B)))).  [assumption].
6 -organization(A) | internal_friction(A,B) = internal_friction(A,C).  [clausify(4)].
7 organization(c1).  [clausify(5)].
8 -organization(A) | -greater(age(A,B),age(A,C)) | greater(stock_of_knowledge(A,B),stock_of_knowledge(A,C)).  [clausify(3)].
9 -organization(A) | -greater(stock_of_knowledge(A,B),stock_of_knowledge(A,C)) | -smaller_or_equal(internal_friction(A,B),internal_friction(A,C)) | greater(capability(A,B),capability(A,C)).  [clausify(2)].
10 greater(age(c1,c3),age(c1,c2)).  [clausify(5)].
11 -greater(capability(c1,c3),capability(c1,c2)).  [clausify(5)].
12 smaller_or_equal(A,B) | B != A.  [clausify(1)].
13 internal_friction(c1,A) = internal_friction(c1,B).  [resolve(6,a,7,a)].
14 -greater(age(c1,A),age(c1,B)) | greater(stock_of_knowledge(c1,A),stock_of_knowledge(c1,B)).  [resolve(8,a,7,a)].
15 -greater(stock_of_knowledge(c1,A),stock_of_knowledge(c1,B)) | -smaller_or_equal(internal_friction(c1,A),internal_friction(c1,B)) | greater(capability(c1,A),capability(c1,B)).  [resolve(9,a,7,a)].
16 internal_friction(c1,A) = c_0.  [new_symbol(13)].
17 -greater(stock_of_knowledge(c1,A),stock_of_knowledge(c1,B)) | -smaller_or_equal(c_0,internal_friction(c1,B)) | greater(capability(c1,A),capability(c1,B)).  [para(16(a,1),15(b,1))].
18 -greater(stock_of_knowledge(c1,A),stock_of_knowledge(c1,B)) | -smaller_or_equal(c_0,c_0) | greater(capability(c1,A),capability(c1,B)).  [para(16(a,1),17(b,2))].
19 smaller_or_equal(A,A).  [xx_res(12,b)].
20 -greater(stock_of_knowledge(c1,A),stock_of_knowledge(c1,B)) | greater(capability(c1,A),capability(c1,B)).  [resolve(19,a,18,b)].
21 greater(stock_of_knowledge(c1,c3),stock_of_knowledge(c1,c2)).  [resolve(14,a,10,a)].
22 greater(capability(c1,c3),capability(c1,c2)).  [resolve(20,a,21,a)].
23 $F.  [resolve(11,a,22,a)].

============================== end of proof ==========================
