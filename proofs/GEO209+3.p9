============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n080.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 06:30:28 CDT 2014
% CPUTime    : 0.15 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 22514 was started by sandbox on n080.star.cs.uiowa.edu,
Fri Jun  6 06:30:28 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_22482_n080.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.01 (+ 0.00) seconds.
% Length of proof is 17.
% Level of proof is 4.
% Maximum clause weight is 9.000.
% Given clauses 38.


1 (all A all B all C (convergent_lines(A,B) -> convergent_lines(A,C) | convergent_lines(B,C))).  [assumption].
2 (all A all B (distinct_lines(A,B) -> convergent_lines(A,B))).  [assumption].
3 (all A all B (equal_lines(A,B) <-> -distinct_lines(A,B))).  [assumption].
4 (all A all B (parallel_lines(A,B) <-> -convergent_lines(A,B))).  [assumption].
5 -(all A all B all C all D (apart_point_and_line(A,B) & incident_point_and_line(A,C) & incident_point_and_line(A,D) & parallel_lines(C,B) & parallel_lines(D,B) -> equal_lines(C,D))).  [assumption].
6 -parallel_lines(A,B) | -convergent_lines(A,B).  [clausify(4)].
7 parallel_lines(c3,c2).  [clausify(5)].
8 parallel_lines(c4,c2).  [clausify(5)].
9 -equal_lines(c3,c4).  [clausify(5)].
10 equal_lines(A,B) | distinct_lines(A,B).  [clausify(3)].
11 -distinct_lines(A,B) | convergent_lines(A,B).  [clausify(2)].
12 -convergent_lines(A,B) | convergent_lines(A,C) | convergent_lines(B,C).  [clausify(1)].
13 -convergent_lines(c3,c2).  [resolve(6,a,7,a)].
14 -convergent_lines(c4,c2).  [resolve(6,a,8,a)].
15 distinct_lines(c3,c4).  [resolve(9,a,10,a)].
16 -convergent_lines(c3,A) | convergent_lines(A,c2).  [resolve(12,b,13,a)].
17 -convergent_lines(c3,c4).  [resolve(16,b,14,a)].
18 convergent_lines(c3,c4).  [resolve(15,a,11,a)].
19 $F.  [resolve(17,a,18,a)].

============================== end of proof ==========================
