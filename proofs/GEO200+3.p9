============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n161.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 05:56:38 CDT 2014
% CPUTime    : 0.15 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 35765 was started by sandbox on n161.star.cs.uiowa.edu,
Fri Jun  6 05:56:38 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_35733_n161.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.01 (+ 0.00) seconds.
% Length of proof is 26.
% Level of proof is 6.
% Maximum clause weight is 18.000.
% Given clauses 45.


1 (all A -distinct_lines(A,A)).  [assumption].
2 (all A all B all C (distinct_lines(A,B) -> distinct_lines(A,C) | distinct_lines(B,C))).  [assumption].
3 (all A all B all C all D (distinct_points(A,B) & distinct_lines(C,D) -> apart_point_and_line(A,C) | apart_point_and_line(A,D) | apart_point_and_line(B,C) | apart_point_and_line(B,D))).  [assumption].
4 (all A all B all C (apart_point_and_line(A,B) -> distinct_lines(B,C) | apart_point_and_line(A,C))).  [assumption].
5 (all A all B (distinct_lines(A,B) -> convergent_lines(A,B))).  [assumption].
6 (all A all B -convergent_lines(parallel_through_point(B,A),B)).  [assumption].
7 (all A all B -apart_point_and_line(A,parallel_through_point(B,A))).  [assumption].
8 (all A all B (equal_lines(A,B) <-> -distinct_lines(A,B))).  [assumption].
9 -(all A all B (distinct_points(A,B) -> equal_lines(line_connecting(A,B),line_connecting(B,A)))).  [assumption].
10 equal_lines(A,B) | distinct_lines(A,B).  [clausify(8)].
11 -equal_lines(line_connecting(c1,c2),line_connecting(c2,c1)).  [clausify(9)].
12 distinct_points(c1,c2).  [clausify(9)].
13 -distinct_lines(A,A).  [clausify(1)].
14 -convergent_lines(parallel_through_point(A,B),A).  [clausify(6)].
15 -apart_point_and_line(A,parallel_through_point(B,A)).  [clausify(7)].
16 -distinct_lines(A,B) | convergent_lines(A,B).  [clausify(5)].
17 -distinct_lines(A,B) | distinct_lines(A,C) | distinct_lines(B,C).  [clausify(2)].
18 -apart_point_and_line(A,B) | distinct_lines(B,C) | apart_point_and_line(A,C).  [clausify(4)].
19 -distinct_points(A,B) | -distinct_lines(C,D) | apart_point_and_line(A,C) | apart_point_and_line(A,D) | apart_point_and_line(B,C) | apart_point_and_line(B,D).  [clausify(3)].
20 distinct_lines(line_connecting(c1,c2),line_connecting(c2,c1)).  [resolve(11,a,10,a)].
21 -distinct_lines(parallel_through_point(A,B),A).  [resolve(16,b,14,a)].
22 -distinct_lines(A,B) | apart_point_and_line(c1,A) | apart_point_and_line(c1,B) | apart_point_and_line(c2,A) | apart_point_and_line(c2,B).  [resolve(19,a,12,a)].
23 -distinct_lines(A,B) | distinct_lines(B,A).  [resolve(17,b,13,a)].
24 -distinct_lines(A,parallel_through_point(A,B)).  [resolve(23,b,21,a)].
25 -apart_point_and_line(A,B) | apart_point_and_line(A,parallel_through_point(B,C)).  [resolve(18,b,24,a)].
26 -apart_point_and_line(A,B).  [resolve(25,b,15,a)].
27 -distinct_lines(A,B) | apart_point_and_line(c1,B) | apart_point_and_line(c2,A) | apart_point_and_line(c2,B).  [resolve(26,a,22,b)].
28 -distinct_lines(A,B) | apart_point_and_line(c2,A) | apart_point_and_line(c2,B).  [resolve(26,a,27,b)].
29 -distinct_lines(A,B) | apart_point_and_line(c2,B).  [resolve(26,a,28,b)].
30 -distinct_lines(A,B).  [resolve(26,a,29,b)].
31 $F.  [resolve(30,a,20,a)].

============================== end of proof ==========================
