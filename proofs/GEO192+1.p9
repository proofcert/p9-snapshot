============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n073.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 05:24:33 CDT 2014
% CPUTime    : 0.13 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 41612 was started by sandbox on n073.star.cs.uiowa.edu,
Fri Jun  6 05:24:33 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_41580_n073.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.01 (+ 0.00) seconds.
% Length of proof is 20.
% Level of proof is 5.
% Maximum clause weight is 11.000.
% Given clauses 69.


1 (all A -distinct_lines(A,A)).  [assumption].
2 (all A all B all C (distinct_lines(A,B) -> distinct_lines(A,C) | distinct_lines(B,C))).  [assumption].
3 (all A all B (convergent_lines(A,B) -> -apart_point_and_line(intersection_point(A,B),A))).  [assumption].
4 (all A all B (convergent_lines(A,B) -> -apart_point_and_line(intersection_point(A,B),B))).  [assumption].
5 (all A all B all C (apart_point_and_line(A,B) -> distinct_lines(B,C) | apart_point_and_line(A,C))).  [assumption].
6 -(all A all B all C (convergent_lines(A,B) -> (apart_point_and_line(intersection_point(A,B),C) -> distinct_lines(A,C) & distinct_lines(B,C)))).  [assumption].
7 convergent_lines(c1,c2).  [clausify(6)].
8 apart_point_and_line(intersection_point(c1,c2),c3).  [clausify(6)].
9 -distinct_lines(A,A).  [clausify(1)].
10 -distinct_lines(c1,c3) | -distinct_lines(c2,c3).  [clausify(6)].
11 -convergent_lines(A,B) | -apart_point_and_line(intersection_point(A,B),A).  [clausify(3)].
12 -convergent_lines(A,B) | -apart_point_and_line(intersection_point(A,B),B).  [clausify(4)].
13 -distinct_lines(A,B) | distinct_lines(A,C) | distinct_lines(B,C).  [clausify(2)].
14 -apart_point_and_line(A,B) | distinct_lines(B,C) | apart_point_and_line(A,C).  [clausify(5)].
15 -apart_point_and_line(intersection_point(c1,c2),c1).  [resolve(11,a,7,a)].
16 -apart_point_and_line(intersection_point(c1,c2),c2).  [resolve(12,a,7,a)].
17 distinct_lines(c3,A) | apart_point_and_line(intersection_point(c1,c2),A).  [resolve(14,a,8,a)].
18 apart_point_and_line(intersection_point(c1,c2),A) | distinct_lines(c3,B) | distinct_lines(A,B).  [resolve(17,a,13,a)].
19 apart_point_and_line(intersection_point(c1,c2),c2) | distinct_lines(c3,c3) | -distinct_lines(c1,c3).  [resolve(18,c,10,b)].
20 distinct_lines(c3,c3) | -distinct_lines(c1,c3).  [resolve(16,a,19,a)].
21 -distinct_lines(c1,c3).  [resolve(9,a,20,a)].
22 apart_point_and_line(intersection_point(c1,c2),c1) | distinct_lines(c3,c3).  [resolve(21,a,18,c)].
23 distinct_lines(c3,c3).  [resolve(15,a,22,a)].
24 $F.  [resolve(9,a,23,a)].

============================== end of proof ==========================
