============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n048.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 00:23:43 CDT 2014
% CPUTime    : 0.13 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 42815 was started by sandbox on n048.star.cs.uiowa.edu,
Fri Jun  6 00:23:43 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_42783_n048.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.01 (+ 0.00) seconds: goals.
% Length of proof is 26.
% Level of proof is 5.
% Maximum clause weight is 15.000.
% Given clauses 20.


1 (all A all B addition(A,B) = addition(B,A)).  [assumption].
2 (all A addition(A,A) = A).  [assumption].
3 (all A all B all C multiplication(A,multiplication(B,C)) = multiplication(multiplication(A,B),C)).  [assumption].
4 (all A multiplication(A,one) = A).  [assumption].
5 (all A all B all C multiplication(A,addition(B,C)) = addition(multiplication(A,B),multiplication(A,C))).  [assumption].
6 (all A strong_iteration(A) = addition(multiplication(A,strong_iteration(A)),one)).  [assumption].
7 (all A all B all C (leq(C,addition(multiplication(A,C),B)) -> leq(C,multiplication(strong_iteration(A),B)))).  [assumption].
8 (all A all B (leq(A,B) <-> addition(A,B) = B)).  [assumption].
9 -(all A all B leq(multiplication(A,strong_iteration(multiplication(B,A))),multiplication(strong_iteration(multiplication(A,B)),A))).  [assumption].
10 addition(A,A) = A.  [clausify(2)].
11 multiplication(A,one) = A.  [clausify(4)].
12 addition(A,B) = addition(B,A).  [clausify(1)].
13 strong_iteration(A) = addition(multiplication(A,strong_iteration(A)),one).  [clausify(6)].
14 strong_iteration(A) = addition(one,multiplication(A,strong_iteration(A))).  [para(12(a,1),13(a,2))].
15 addition(one,multiplication(A,strong_iteration(A))) = strong_iteration(A).  [copy(14),flip(a)].
16 multiplication(multiplication(A,B),C) = multiplication(A,multiplication(B,C)).  [clausify(3)].
17 multiplication(A,addition(B,C)) = addition(multiplication(A,B),multiplication(A,C)).  [clausify(5)].
18 addition(multiplication(A,B),multiplication(A,C)) = multiplication(A,addition(B,C)).  [copy(17),flip(a)].
19 -leq(multiplication(c1,strong_iteration(multiplication(c2,c1))),multiplication(strong_iteration(multiplication(c1,c2)),c1)).  [clausify(9)].
20 leq(A,B) | addition(A,B) != B.  [clausify(8)].
21 -leq(A,addition(multiplication(B,A),C)) | leq(A,multiplication(strong_iteration(B),C)).  [clausify(7)].
22 -leq(A,addition(B,multiplication(C,A))) | leq(A,multiplication(strong_iteration(C),B)).  [para(12(a,1),21(a,2))].
23 addition(one,multiplication(A,multiplication(B,strong_iteration(multiplication(A,B))))) = strong_iteration(multiplication(A,B)).  [para(16(a,1),15(a,1,2))].
24 addition(A,multiplication(A,B)) = multiplication(A,addition(one,B)).  [para(11(a,1),18(a,1,1))].
25 addition(A,multiplication(A,B)) = multiplication(A,addition(B,one)).  [para(12(a,1),24(a,2,2))].
26 multiplication(A,addition(B,one)) = addition(A,multiplication(A,B)).  [copy(25),flip(a)].
27 leq(A,A).  [resolve(20,b,10,a)].
28 -leq(multiplication(c1,strong_iteration(multiplication(c2,c1))),addition(c1,multiplication(multiplication(c1,c2),multiplication(c1,strong_iteration(multiplication(c2,c1)))))).  [resolve(22,b,19,a)].
29 -leq(multiplication(c1,strong_iteration(multiplication(c2,c1))),addition(c1,multiplication(c1,multiplication(c2,multiplication(c1,strong_iteration(multiplication(c2,c1))))))).  [para(16(a,1),28(a,2,2))].
30 -leq(multiplication(c1,strong_iteration(multiplication(c2,c1))),multiplication(c1,addition(multiplication(c2,multiplication(c1,strong_iteration(multiplication(c2,c1)))),one))).  [para(26(a,2),29(a,2))].
31 -leq(multiplication(c1,strong_iteration(multiplication(c2,c1))),multiplication(c1,addition(one,multiplication(c2,multiplication(c1,strong_iteration(multiplication(c2,c1))))))).  [para(12(a,1),30(a,2,2))].
32 -leq(multiplication(c1,strong_iteration(multiplication(c2,c1))),multiplication(c1,strong_iteration(multiplication(c2,c1)))).  [para(23(a,1),31(a,2,2))].
33 $F.  [resolve(32,a,27,a)].

============================== end of proof ==========================
