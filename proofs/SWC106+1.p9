============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n043.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 00:43:08 CDT 2014
% CPUTime    : 10.69 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 38996 was started by sandbox on n043.star.cs.uiowa.edu,
Fri Jun  6 00:43:08 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_38964_n043.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 10.41 (+ 0.07) seconds.
% Length of proof is 31.
% Level of proof is 8.
% Maximum clause weight is 14.000.
% Given clauses 2378.


1 (all A (ssList(A) -> (all B (ssList(B) -> (rearsegP(A,B) <-> (exists C (ssList(C) & app(C,B) = A))))))).  [assumption].
2 (all A (ssList(A) -> (all B (ssList(B) -> (neq(A,B) <-> A != B))))).  [assumption].
3 (all A (ssList(A) -> (all B (ssItem(B) -> nil != cons(B,A))))).  [assumption].
4 -(all A (ssList(A) -> (all B (ssList(B) -> (all C (ssList(C) -> (all D (ssList(D) -> B != D | A != C | (-neq(B,nil) | (all E (ssItem(E) -> (all F (ssList(F) -> cons(E,nil) != C | app(F,cons(E,nil)) != D)))) | neq(A,nil) & rearsegP(B,A)) & (-neq(B,nil) | neq(D,nil)))))))))).  [assumption].
5 -ssList(A) | -ssList(B) | rearsegP(A,B) | -ssList(C) | app(C,B) != A.  [clausify(1)].
6 -ssList(A) | -ssList(B) | neq(A,B) | B = A.  [clausify(2)].
7 ssList(nil).  [assumption].
8 -ssList(A) | -ssItem(B) | cons(B,A) != nil.  [clausify(3)].
9 ssList(c3).  [clausify(4)].
10 ssList(c4).  [clausify(4)].
11 c6 = c4.  [clausify(4)].
12 c5 = c3.  [clausify(4)].
13 neq(c4,nil).  [clausify(4)].
14 ssItem(c7) | -neq(c6,nil).  [clausify(4)].
15 ssItem(c7) | -neq(c4,nil).  [para(11(a,1),14(b,1))].
16 ssItem(c7).  [resolve(13,a,15,b)].
17 ssList(c8) | -neq(c6,nil).  [clausify(4)].
18 ssList(c8) | -neq(c4,nil).  [para(11(a,1),17(b,1))].
19 ssList(c8).  [resolve(13,a,18,b)].
20 cons(c7,nil) = c5 | -neq(c6,nil).  [clausify(4)].
21 cons(c7,nil) = c3 | -neq(c6,nil).  [para(12(a,1),20(a,2))].
22 cons(c7,nil) = c3 | -neq(c4,nil).  [para(11(a,1),21(b,1))].
23 cons(c7,nil) = c3.  [resolve(13,a,22,b)].
24 app(c8,cons(c7,nil)) = c6 | -neq(c6,nil).  [clausify(4)].
25 app(c8,c3) = c6 | -neq(c6,nil).  [para(23(a,1),24(a,1,2))].
26 app(c8,c3) = c4 | -neq(c6,nil).  [para(11(a,1),25(a,2))].
27 app(c8,c3) = c4 | -neq(c4,nil).  [para(11(a,1),26(b,1))].
28 app(c8,c3) = c4.  [resolve(13,a,27,b)].
29 -neq(c3,nil) | -rearsegP(c4,c3) | -neq(c6,nil).  [clausify(4)].
30 -neq(c3,nil) | -rearsegP(c4,c3) | -neq(c4,nil).  [para(11(a,1),29(c,1))].
31 -neq(c3,nil) | -rearsegP(c4,c3).  [resolve(13,a,30,c)].
32 -ssList(A) | neq(A,nil) | nil = A.  [resolve(7,a,6,b)].
33 -ssList(A) | rearsegP(A,c3) | -ssList(B) | app(B,c3) != A.  [resolve(9,a,5,b)].
34 -ssList(A) | cons(c7,A) != nil.  [resolve(16,a,8,b)].
35 cons(c7,nil) != nil.  [resolve(34,a,7,a)].
36 c3 != nil.  [para(23(a,1),35(a,1))].
37 neq(c3,nil) | nil = c3.  [resolve(32,a,9,a)].
38 neq(c3,nil) | c3 = nil.  [copy(37),flip(b)].
39 neq(c3,nil).  [resolve(36,a,38,b)].
40 -rearsegP(c4,c3).  [resolve(39,a,31,a)].
41 rearsegP(c4,c3) | -ssList(A) | app(A,c3) != c4.  [resolve(33,a,10,a)].
42 -ssList(A) | app(A,c3) != c4.  [resolve(40,a,41,a)].
43 app(c8,c3) != c4.  [resolve(42,a,19,a)].
44 c4 != c4.  [para(28(a,1),43(a,1))].
45 $F.  [copy(44),xx(a)].

============================== end of proof ==========================
