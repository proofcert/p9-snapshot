============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n101.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 06:15:43 CDT 2014
% CPUTime    : 0.15 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 36974 was started by sandbox on n101.star.cs.uiowa.edu,
Fri Jun  6 06:15:43 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_36942_n101.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.02 (+ 0.00) seconds.
% Length of proof is 49.
% Level of proof is 10.
% Maximum clause weight is 18.000.
% Given clauses 74.


1 (all A -distinct_lines(A,A)).  [assumption].
2 (all A -convergent_lines(A,A)).  [assumption].
3 (all A all B all C (distinct_lines(A,B) -> distinct_lines(A,C) | distinct_lines(B,C))).  [assumption].
4 (all A all B all C (convergent_lines(A,B) -> convergent_lines(A,C) | convergent_lines(B,C))).  [assumption].
5 (all A all B (convergent_lines(A,B) -> -apart_point_and_line(intersection_point(A,B),A))).  [assumption].
6 (all A all B all C all D (distinct_points(A,B) & distinct_lines(C,D) -> apart_point_and_line(A,C) | apart_point_and_line(A,D) | apart_point_and_line(B,C) | apart_point_and_line(B,D))).  [assumption].
7 (all A all B all C (apart_point_and_line(A,B) -> distinct_lines(B,C) | apart_point_and_line(A,C))).  [assumption].
8 (all A all B all C (convergent_lines(A,B) -> distinct_lines(B,C) | convergent_lines(A,C))).  [assumption].
9 (all A all B (distinct_lines(A,B) -> convergent_lines(A,B))).  [assumption].
10 (all A all B -convergent_lines(parallel_through_point(B,A),B)).  [assumption].
11 (all A all B -apart_point_and_line(A,parallel_through_point(B,A))).  [assumption].
12 (all A all B (equal_points(A,B) <-> -distinct_points(A,B))).  [assumption].
13 (all A all B (equal_lines(A,B) <-> -distinct_lines(A,B))).  [assumption].
14 -(all A all B all C (convergent_lines(A,B) & equal_lines(B,C) -> convergent_lines(A,C) & equal_points(intersection_point(A,B),intersection_point(A,C)))).  [assumption].
15 -equal_lines(A,B) | -distinct_lines(A,B).  [clausify(13)].
16 equal_lines(c2,c3).  [clausify(14)].
17 equal_points(A,B) | distinct_points(A,B).  [clausify(12)].
18 -convergent_lines(c1,c3) | -equal_points(intersection_point(c1,c2),intersection_point(c1,c3)).  [clausify(14)].
19 convergent_lines(c1,c2).  [clausify(14)].
20 -distinct_lines(A,A).  [clausify(1)].
21 -convergent_lines(A,A).  [clausify(2)].
22 -convergent_lines(parallel_through_point(A,B),A).  [clausify(10)].
23 -apart_point_and_line(A,parallel_through_point(B,A)).  [clausify(11)].
24 -convergent_lines(A,B) | -apart_point_and_line(intersection_point(A,B),A).  [clausify(5)].
25 -distinct_lines(A,B) | convergent_lines(A,B).  [clausify(9)].
26 -distinct_lines(A,B) | distinct_lines(A,C) | distinct_lines(B,C).  [clausify(3)].
27 -convergent_lines(A,B) | convergent_lines(A,C) | convergent_lines(B,C).  [clausify(4)].
28 -apart_point_and_line(A,B) | distinct_lines(B,C) | apart_point_and_line(A,C).  [clausify(7)].
29 -convergent_lines(A,B) | distinct_lines(B,C) | convergent_lines(A,C).  [clausify(8)].
30 -distinct_points(A,B) | -distinct_lines(C,D) | apart_point_and_line(A,C) | apart_point_and_line(A,D) | apart_point_and_line(B,C) | apart_point_and_line(B,D).  [clausify(6)].
31 -distinct_lines(c2,c3).  [resolve(15,a,16,a)].
32 -convergent_lines(c1,c3) | distinct_points(intersection_point(c1,c2),intersection_point(c1,c3)).  [resolve(18,b,17,a)].
33 -apart_point_and_line(intersection_point(c1,c2),c1).  [resolve(24,a,19,a)].
34 -distinct_lines(parallel_through_point(A,B),A).  [resolve(25,b,22,a)].
35 convergent_lines(c1,A) | convergent_lines(c2,A).  [resolve(27,a,19,a)].
36 -convergent_lines(A,c2) | convergent_lines(A,c3).  [resolve(29,b,31,a)].
37 -convergent_lines(c3,c2).  [resolve(36,b,21,a)].
38 -distinct_lines(A,B) | distinct_lines(B,A).  [resolve(26,b,20,a)].
39 -distinct_lines(c3,c2).  [resolve(38,b,31,a)].
40 -convergent_lines(A,B) | convergent_lines(B,A).  [resolve(27,b,21,a)].
41 -convergent_lines(c2,c3).  [resolve(40,b,37,a)].
42 convergent_lines(c1,c3).  [resolve(35,b,41,a)].
43 distinct_points(intersection_point(c1,c2),intersection_point(c1,c3)).  [resolve(42,a,32,a)].
44 convergent_lines(c1,A) | convergent_lines(c3,A).  [resolve(42,a,27,a)].
45 -apart_point_and_line(intersection_point(c1,c3),c1).  [resolve(24,a,42,a)].
46 -distinct_lines(c3,A) | distinct_lines(A,c2).  [resolve(26,b,39,a)].
47 -distinct_lines(c3,parallel_through_point(c2,A)).  [resolve(46,b,34,a)].
48 convergent_lines(c1,A) | convergent_lines(c3,B) | convergent_lines(A,B).  [resolve(44,b,27,a)].
49 convergent_lines(c1,c1) | convergent_lines(c3,c1).  [factor(48,a,c)].
50 convergent_lines(c3,c1).  [resolve(21,a,49,a)].
51 -apart_point_and_line(A,c3) | apart_point_and_line(A,parallel_through_point(c2,B)).  [resolve(28,b,47,a)].
52 -apart_point_and_line(A,c3).  [resolve(51,b,23,a)].
53 distinct_lines(c1,A) | convergent_lines(c3,A).  [resolve(50,a,29,a)].
54 -distinct_lines(A,B) | apart_point_and_line(intersection_point(c1,c2),A) | apart_point_and_line(intersection_point(c1,c2),B) | apart_point_and_line(intersection_point(c1,c3),A) | apart_point_and_line(intersection_point(c1,c3),B).  [resolve(30,a,43,a)].
55 -distinct_lines(c1,A) | apart_point_and_line(intersection_point(c1,c2),A) | apart_point_and_line(intersection_point(c1,c3),c1) | apart_point_and_line(intersection_point(c1,c3),A).  [resolve(54,b,33,a)].
56 -distinct_lines(c1,c3) | apart_point_and_line(intersection_point(c1,c3),c1) | apart_point_and_line(intersection_point(c1,c3),c3).  [resolve(55,b,52,a)].
57 -distinct_lines(c1,c3) | apart_point_and_line(intersection_point(c1,c3),c3).  [resolve(56,b,45,a)].
58 -distinct_lines(c1,c3).  [resolve(57,b,52,a)].
59 convergent_lines(c3,c3).  [resolve(58,a,53,a)].
60 $F.  [resolve(21,a,59,a)].

============================== end of proof ==========================
