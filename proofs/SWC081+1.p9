============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n111.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Thu Jun  5 21:11:13 CDT 2014
% CPUTime    : 256.23 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 64034 was started by sandbox on n111.star.cs.uiowa.edu,
Thu Jun  5 21:11:13 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_64002_n111.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 251.81 (+ 4.21) seconds.
% Length of proof is 52.
% Level of proof is 8.
% Maximum clause weight is 18.000.
% Given clauses 21952.


1 (all A (ssList(A) -> (all B (ssList(B) -> (frontsegP(A,B) <-> (exists C (ssList(C) & app(B,C) = A))))))).  [assumption].
2 (all A (ssList(A) -> (all B (ssList(B) -> (rearsegP(A,B) <-> (exists C (ssList(C) & app(C,B) = A))))))).  [assumption].
3 (all A (ssList(A) -> (all B (ssList(B) -> (neq(A,B) <-> A != B))))).  [assumption].
4 (all A (ssList(A) -> rearsegP(A,A))).  [assumption].
5 (all A (ssList(A) -> segmentP(A,A))).  [assumption].
6 (all A (ssList(A) -> (all B (ssList(B) -> (all C (ssList(C) -> (all D (ssList(D) -> (segmentP(A,B) -> segmentP(app(app(C,A),D),B)))))))))).  [assumption].
7 -(all A (ssList(A) -> (all B (ssList(B) -> (all C (ssList(C) -> (all D (ssList(D) -> B != D | A != C | -neq(B,nil) | (exists E (ssList(E) & neq(E,nil) & segmentP(B,E) & segmentP(A,E))) | (all F (ssList(F) -> -neq(F,nil) | -frontsegP(D,F) | -frontsegP(C,F))) & (nil != D | nil != C))))))))).  [assumption].
8 -ssList(A) | -ssList(B) | -frontsegP(A,B) | ssList(f4(A,B)).  [clausify(1)].
9 -ssList(A) | -ssList(B) | -frontsegP(A,B) | app(B,f4(A,B)) = A.  [clausify(1)].
10 -ssList(A) | -ssList(B) | -rearsegP(A,B) | ssList(f5(A,B)).  [clausify(2)].
11 -ssList(A) | -ssList(B) | -rearsegP(A,B) | app(f5(A,B),B) = A.  [clausify(2)].
12 -ssList(A) | -ssList(B) | -neq(A,B) | B != A.  [clausify(3)].
13 ssList(nil).  [assumption].
14 -ssList(A) | rearsegP(A,A).  [clausify(4)].
15 -ssList(A) | segmentP(A,A).  [clausify(5)].
16 -ssList(A) | -ssList(B) | -ssList(C) | -ssList(D) | -segmentP(A,B) | segmentP(app(app(C,A),D),B).  [clausify(6)].
17 ssList(c3).  [clausify(7)].
18 ssList(c4).  [clausify(7)].
19 c6 = c4.  [clausify(7)].
20 c5 = c3.  [clausify(7)].
21 neq(c4,nil).  [clausify(7)].
22 -ssList(A) | -neq(A,nil) | -segmentP(c4,A) | -segmentP(c3,A).  [clausify(7)].
23 ssList(c7) | nil = c6.  [clausify(7)].
24 ssList(c7) | nil = c4.  [para(19(a,1),23(b,2))].
25 ssList(c7) | c4 = nil.  [copy(24),flip(b)].
26 neq(c7,nil) | nil = c6.  [clausify(7)].
27 neq(c7,nil) | nil = c4.  [para(19(a,1),26(b,2))].
28 neq(c7,nil) | c4 = nil.  [copy(27),flip(b)].
29 frontsegP(c6,c7) | nil = c6.  [clausify(7)].
30 frontsegP(c4,c7) | nil = c6.  [para(19(a,1),29(a,1))].
31 frontsegP(c4,c7) | nil = c4.  [para(19(a,1),30(b,2))].
32 frontsegP(c4,c7) | c4 = nil.  [copy(31),flip(b)].
33 frontsegP(c5,c7) | nil = c6.  [clausify(7)].
34 frontsegP(c3,c7) | nil = c6.  [para(20(a,1),33(a,1))].
35 frontsegP(c3,c7) | nil = c4.  [para(19(a,1),34(b,2))].
36 frontsegP(c3,c7) | c4 = nil.  [copy(35),flip(b)].
37 -ssList(A) | -rearsegP(A,A) | ssList(f5(A,A)).  [factor(10,a,b)].
38 -ssList(A) | -rearsegP(A,A) | app(f5(A,A),A) = A.  [factor(11,a,b)].
39 -ssList(A) | -ssList(B) | -ssList(C) | -segmentP(A,A) | segmentP(app(app(B,A),C),A).  [factor(16,a,b)].
40 -ssList(c4) | -ssList(nil) | nil != c4.  [resolve(21,a,12,c)].
41 -ssList(c4) | -ssList(nil) | c4 != nil.  [copy(40),flip(c)].
42 -ssList(nil) | c4 != nil.  [resolve(18,a,41,a)].
43 c4 != nil.  [resolve(13,a,42,a)].
44 frontsegP(c3,c7).  [resolve(43,a,36,b)].
45 frontsegP(c4,c7).  [resolve(43,a,32,b)].
46 neq(c7,nil).  [resolve(43,a,28,b)].
47 ssList(c7).  [resolve(43,a,25,b)].
48 segmentP(c7,c7).  [resolve(47,a,15,a)].
49 rearsegP(c7,c7).  [resolve(47,a,14,a)].
50 -ssList(c3) | -ssList(c7) | app(c7,f4(c3,c7)) = c3.  [resolve(44,a,9,c)].
51 -ssList(c7) | app(c7,f4(c3,c7)) = c3.  [resolve(17,a,50,a)].
52 app(c7,f4(c3,c7)) = c3.  [resolve(47,a,51,a)].
53 -ssList(c3) | -ssList(c7) | ssList(f4(c3,c7)).  [resolve(44,a,8,c)].
54 -ssList(c7) | ssList(f4(c3,c7)).  [resolve(17,a,53,a)].
55 ssList(f4(c3,c7)).  [resolve(47,a,54,a)].
56 -ssList(c4) | -ssList(c7) | app(c7,f4(c4,c7)) = c4.  [resolve(45,a,9,c)].
57 -ssList(c7) | app(c7,f4(c4,c7)) = c4.  [resolve(18,a,56,a)].
58 app(c7,f4(c4,c7)) = c4.  [resolve(47,a,57,a)].
59 -ssList(c4) | -ssList(c7) | ssList(f4(c4,c7)).  [resolve(45,a,8,c)].
60 -ssList(c7) | ssList(f4(c4,c7)).  [resolve(18,a,59,a)].
61 ssList(f4(c4,c7)).  [resolve(47,a,60,a)].
62 -ssList(c7) | -segmentP(c4,c7) | -segmentP(c3,c7).  [resolve(46,a,22,b)].
63 -segmentP(c4,c7) | -segmentP(c3,c7).  [resolve(47,a,62,a)].
64 -ssList(c7) | -ssList(A) | -ssList(B) | segmentP(app(app(A,c7),B),c7).  [resolve(48,a,39,d)].
65 -ssList(A) | -ssList(B) | segmentP(app(app(A,c7),B),c7).  [resolve(47,a,64,a)].
66 -ssList(c7) | app(f5(c7,c7),c7) = c7.  [resolve(49,a,38,b)].
67 app(f5(c7,c7),c7) = c7.  [resolve(47,a,66,a)].
68 -ssList(c7) | ssList(f5(c7,c7)).  [resolve(49,a,37,b)].
69 ssList(f5(c7,c7)).  [resolve(47,a,68,a)].
70 -ssList(A) | segmentP(app(app(f5(c7,c7),c7),A),c7).  [resolve(65,a,69,a)].
71 -ssList(A) | segmentP(app(c7,A),c7).  [para(67(a,1),70(b,1,1))].
72 segmentP(app(c7,f4(c4,c7)),c7).  [resolve(71,a,61,a)].
73 segmentP(c4,c7).  [para(58(a,1),72(a,1))].
74 segmentP(app(c7,f4(c3,c7)),c7).  [resolve(71,a,55,a)].
75 segmentP(c3,c7).  [para(52(a,1),74(a,1))].
76 -segmentP(c3,c7).  [resolve(73,a,63,a)].
77 $F.  [resolve(75,a,76,a)].

============================== end of proof ==========================
