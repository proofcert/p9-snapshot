============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n056.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Thu Jun  5 14:51:13 CDT 2014
% CPUTime    : 0.13 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 45277 was started by sandbox on n056.star.cs.uiowa.edu,
Thu Jun  5 14:51:13 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_45245_n056.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.01 (+ 0.00) seconds.
% Length of proof is 29.
% Level of proof is 5.
% Maximum clause weight is 17.000.
% Given clauses 11.


1 (all A all B (environment(A) & subpopulations(first_movers,efficient_producers,A,B) -> in_environment(A,B))).  [assumption].
2 (all A all B (environment(A) & subpopulations(first_movers,efficient_producers,A,B) -> greater(number_of_organizations(A,B),zero))).  [assumption].
3 (all A (increases(A) -> -decreases(A))).  [assumption].
4 (all A all B (environment(A) & in_environment(A,B) & greater(number_of_organizations(A,B),zero) -> (greater(equilibrium(A),B) -> decreases(resources(A,B))) & (-greater(equilibrium(A),B) -> constant(resources(A,B))))).  [assumption].
5 (all A all B (environment(A) & subpopulations(first_movers,efficient_producers,A,B) -> (decreases(resources(A,B)) -> increases(difference(disbanding_rate(first_movers,B),disbanding_rate(efficient_producers,B)))) & (constant(resources(A,B)) -> -decreases(difference(disbanding_rate(first_movers,B),disbanding_rate(efficient_producers,B)))))).  [assumption].
6 -(all A all B (environment(A) & subpopulations(first_movers,efficient_producers,A,B) -> -decreases(difference(disbanding_rate(first_movers,B),disbanding_rate(efficient_producers,B))))).  [assumption].
7 -environment(A) | -subpopulations(first_movers,efficient_producers,A,B) | -constant(resources(A,B)) | -decreases(difference(disbanding_rate(first_movers,B),disbanding_rate(efficient_producers,B))).  [clausify(5)].
8 environment(c1).  [clausify(6)].
9 -environment(A) | -subpopulations(first_movers,efficient_producers,A,B) | in_environment(A,B).  [clausify(1)].
10 -environment(A) | -subpopulations(first_movers,efficient_producers,A,B) | greater(number_of_organizations(A,B),zero).  [clausify(2)].
11 -environment(A) | -in_environment(A,B) | -greater(number_of_organizations(A,B),zero) | -greater(equilibrium(A),B) | decreases(resources(A,B)).  [clausify(4)].
12 -environment(A) | -in_environment(A,B) | -greater(number_of_organizations(A,B),zero) | greater(equilibrium(A),B) | constant(resources(A,B)).  [clausify(4)].
13 -environment(A) | -subpopulations(first_movers,efficient_producers,A,B) | -decreases(resources(A,B)) | increases(difference(disbanding_rate(first_movers,B),disbanding_rate(efficient_producers,B))).  [clausify(5)].
14 -subpopulations(first_movers,efficient_producers,c1,A) | -decreases(resources(c1,A)) | increases(difference(disbanding_rate(first_movers,A),disbanding_rate(efficient_producers,A))).  [resolve(13,a,8,a)].
15 -increases(A) | -decreases(A).  [clausify(3)].
16 subpopulations(first_movers,efficient_producers,c1,c2).  [clausify(6)].
17 decreases(difference(disbanding_rate(first_movers,c2),disbanding_rate(efficient_producers,c2))).  [clausify(6)].
18 -subpopulations(first_movers,efficient_producers,c1,A) | -constant(resources(c1,A)) | -decreases(difference(disbanding_rate(first_movers,A),disbanding_rate(efficient_producers,A))).  [resolve(7,a,8,a)].
19 -subpopulations(first_movers,efficient_producers,c1,A) | in_environment(c1,A).  [resolve(9,a,8,a)].
20 -subpopulations(first_movers,efficient_producers,c1,A) | greater(number_of_organizations(c1,A),zero).  [resolve(10,a,8,a)].
21 -in_environment(c1,A) | -greater(number_of_organizations(c1,A),zero) | -greater(equilibrium(c1),A) | decreases(resources(c1,A)).  [resolve(11,a,8,a)].
22 -in_environment(c1,A) | -greater(number_of_organizations(c1,A),zero) | greater(equilibrium(c1),A) | constant(resources(c1,A)).  [resolve(12,a,8,a)].
23 -subpopulations(first_movers,efficient_producers,c1,A) | -decreases(resources(c1,A)) | -decreases(difference(disbanding_rate(first_movers,A),disbanding_rate(efficient_producers,A))).  [resolve(14,c,15,a)].
24 -constant(resources(c1,c2)) | -decreases(difference(disbanding_rate(first_movers,c2),disbanding_rate(efficient_producers,c2))).  [resolve(18,a,16,a)].
25 -constant(resources(c1,c2)).  [resolve(17,a,24,b)].
26 in_environment(c1,c2).  [resolve(19,a,16,a)].
27 greater(number_of_organizations(c1,c2),zero).  [resolve(20,a,16,a)].
28 -decreases(resources(c1,c2)) | -decreases(difference(disbanding_rate(first_movers,c2),disbanding_rate(efficient_producers,c2))).  [resolve(23,a,16,a)].
29 -decreases(resources(c1,c2)).  [resolve(17,a,28,b)].
30 -greater(number_of_organizations(c1,c2),zero) | greater(equilibrium(c1),c2) | constant(resources(c1,c2)).  [resolve(26,a,22,a)].
31 greater(equilibrium(c1),c2) | constant(resources(c1,c2)).  [resolve(27,a,30,a)].
32 greater(equilibrium(c1),c2).  [resolve(25,a,31,b)].
33 -greater(number_of_organizations(c1,c2),zero) | -greater(equilibrium(c1),c2) | decreases(resources(c1,c2)).  [resolve(26,a,21,a)].
34 -greater(equilibrium(c1),c2) | decreases(resources(c1,c2)).  [resolve(27,a,33,a)].
35 decreases(resources(c1,c2)).  [resolve(32,a,34,a)].
36 $F.  [resolve(29,a,35,a)].

============================== end of proof ==========================
