============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n063.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 08:40:53 CDT 2014
% CPUTime    : 0.37 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 53593 was started by sandbox on n063.star.cs.uiowa.edu,
Fri Jun  6 08:40:53 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_53561_n063.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.11 (+ 0.00) seconds.
% Length of proof is 32.
% Level of proof is 7.
% Maximum clause weight is 20.000.
% Given clauses 644.


1 (all A cast_to_subset(A) = A).  [assumption].
2 (all A all B (element(B,powerset(A)) -> subset_complement(A,B) = set_difference(A,B))).  [assumption].
3 (all A element(cast_to_subset(A),powerset(A))).  [assumption].
4 (all A all B (element(B,powerset(powerset(A))) -> element(union_of_subsets(A,B),powerset(A)))).  [assumption].
5 (all A all B (element(B,powerset(powerset(A))) -> union_of_subsets(A,B) = union(B))).  [assumption].
6 (all A all B all C (element(B,powerset(A)) & element(C,powerset(A)) -> subset_difference(A,B,C) = set_difference(B,C))).  [assumption].
7 (all A all B (element(B,powerset(powerset(A))) -> (B != empty_set -> subset_difference(A,cast_to_subset(A),union_of_subsets(A,B)) = meet_of_subsets(A,complements_of_subsets(A,B))))).  [assumption].
8 -(all A all B (element(B,powerset(powerset(A))) -> (B != empty_set -> meet_of_subsets(A,complements_of_subsets(A,B)) = subset_complement(A,union_of_subsets(A,B))))).  [assumption].
9 cast_to_subset(A) = A.  [clausify(1)].
10 -element(A,powerset(B)) | set_difference(B,A) = subset_complement(B,A).  [clausify(2)].
11 -element(A,powerset(B)) | subset_complement(B,A) = set_difference(B,A).  [copy(10),flip(b)].
12 element(cast_to_subset(A),powerset(A)).  [clausify(3)].
13 element(A,powerset(A)).  [para(9(a,1),12(a,1))].
14 -element(A,powerset(powerset(B))) | element(union_of_subsets(B,A),powerset(B)).  [clausify(4)].
15 -element(A,powerset(powerset(B))) | union(A) = union_of_subsets(B,A).  [clausify(5)].
16 -element(A,powerset(powerset(B))) | union_of_subsets(B,A) = union(A).  [copy(15),flip(b)].
17 -element(A,powerset(B)) | -element(C,powerset(B)) | subset_difference(B,A,C) = set_difference(A,C).  [clausify(6)].
18 -element(A,powerset(powerset(B))) | empty_set = A | subset_difference(B,cast_to_subset(B),union_of_subsets(B,A)) = meet_of_subsets(B,complements_of_subsets(B,A)).  [clausify(7)].
19 -element(A,powerset(powerset(B))) | empty_set = A | subset_difference(B,B,union_of_subsets(B,A)) = meet_of_subsets(B,complements_of_subsets(B,A)).  [para(9(a,1),18(c,1,2))].
20 element(c3,powerset(powerset(c2))).  [clausify(8)].
21 empty_set != c3.  [clausify(8)].
22 c3 != empty_set.  [copy(21),flip(a)].
23 meet_of_subsets(c2,complements_of_subsets(c2,c3)) != subset_complement(c2,union_of_subsets(c2,c3)).  [clausify(8)].
24 -element(A,powerset(B)) | subset_difference(B,B,A) = set_difference(B,A).  [resolve(17,a,13,a)].
25 empty_set = c3 | subset_difference(c2,c2,union_of_subsets(c2,c3)) = meet_of_subsets(c2,complements_of_subsets(c2,c3)).  [resolve(20,a,19,a)].
26 c3 = empty_set | subset_difference(c2,c2,union_of_subsets(c2,c3)) = meet_of_subsets(c2,complements_of_subsets(c2,c3)).  [copy(25),flip(a)].
27 subset_difference(c2,c2,union_of_subsets(c2,c3)) = meet_of_subsets(c2,complements_of_subsets(c2,c3)).  [resolve(22,a,26,a)].
28 union_of_subsets(c2,c3) = union(c3).  [resolve(20,a,16,a)].
29 element(union_of_subsets(c2,c3),powerset(c2)).  [resolve(20,a,14,a)].
30 element(union(c3),powerset(c2)).  [para(28(a,1),29(a,1))].
31 subset_difference(c2,c2,union(c3)) = meet_of_subsets(c2,complements_of_subsets(c2,c3)).  [para(28(a,1),27(a,1,3))].
32 meet_of_subsets(c2,complements_of_subsets(c2,c3)) != subset_complement(c2,union(c3)).  [para(28(a,1),23(a,2,2))].
33 subset_complement(c2,union(c3)) = set_difference(c2,union(c3)).  [resolve(30,a,11,a)].
34 meet_of_subsets(c2,complements_of_subsets(c2,c3)) != set_difference(c2,union(c3)).  [para(33(a,1),32(a,2))].
35 subset_difference(c2,c2,union(c3)) = set_difference(c2,union(c3)).  [resolve(24,a,30,a)].
36 meet_of_subsets(c2,complements_of_subsets(c2,c3)) = set_difference(c2,union(c3)).  [para(31(a,1),35(a,1))].
37 $F.  [resolve(34,a,36,a)].

============================== end of proof ==========================
