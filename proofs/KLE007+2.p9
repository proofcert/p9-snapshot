============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n067.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Thu Jun  5 13:17:23 CDT 2014
% CPUTime    : 0.12 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 60760 was started by sandbox on n067.star.cs.uiowa.edu,
Thu Jun  5 13:17:23 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_60728_n067.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.01 (+ 0.00) seconds.
% Length of proof is 32.
% Level of proof is 6.
% Maximum clause weight is 22.000.
% Given clauses 38.


1 (all A all B addition(A,B) = addition(B,A)).  [assumption].
2 (all A addition(A,A) = A).  [assumption].
3 (all A multiplication(A,one) = A).  [assumption].
4 (all A multiplication(one,A) = A).  [assumption].
5 (all A all B all C multiplication(A,addition(B,C)) = addition(multiplication(A,B),multiplication(A,C))).  [assumption].
6 (all A all B (leq(A,B) <-> addition(A,B) = B)).  [assumption].
7 (all A all B (complement(B,A) <-> multiplication(A,B) = zero & multiplication(B,A) = zero & addition(A,B) = one)).  [assumption].
8 (all A all B (test(A) -> (c(A) = B <-> complement(A,B)))).  [assumption].
9 -(all A all B (test(B) & test(A) -> leq(one,addition(multiplication(addition(A,c(A)),B),multiplication(addition(A,c(A)),c(B)))) & leq(addition(multiplication(addition(A,c(A)),B),multiplication(addition(A,c(A)),c(B))),one))).  [assumption].
10 test(c2).  [clausify(9)].
11 test(c1).  [clausify(9)].
12 -test(A) | c(A) != B | complement(A,B).  [clausify(8)].
13 addition(A,A) = A.  [clausify(2)].
14 multiplication(A,one) = A.  [clausify(3)].
15 multiplication(one,A) = A.  [clausify(4)].
16 addition(A,B) = addition(B,A).  [clausify(1)].
17 multiplication(A,addition(B,C)) = addition(multiplication(A,B),multiplication(A,C)).  [clausify(5)].
18 addition(multiplication(A,B),multiplication(A,C)) = multiplication(A,addition(B,C)).  [copy(17),flip(a)].
19 -leq(one,addition(multiplication(addition(c1,c(c1)),c2),multiplication(addition(c1,c(c1)),c(c2)))) | -leq(addition(multiplication(addition(c1,c(c1)),c2),multiplication(addition(c1,c(c1)),c(c2))),one).  [clausify(9)].
20 -leq(one,multiplication(addition(c1,c(c1)),addition(c2,c(c2)))) | -leq(addition(multiplication(addition(c1,c(c1)),c2),multiplication(addition(c1,c(c1)),c(c2))),one).  [para(18(a,1),19(a,2))].
21 -leq(one,multiplication(addition(c1,c(c1)),addition(c2,c(c2)))) | -leq(multiplication(addition(c1,c(c1)),addition(c2,c(c2))),one).  [para(18(a,1),20(b,1))].
22 leq(A,B) | addition(A,B) != B.  [clausify(6)].
23 -complement(A,B) | addition(B,A) = one.  [clausify(7)].
24 -complement(A,B) | addition(A,B) = one.  [para(16(a,1),23(b,1))].
25 c(c2) != A | complement(c2,A).  [resolve(12,a,10,a)].
26 c(c1) != A | complement(c1,A).  [resolve(12,a,11,a)].
27 leq(A,A).  [resolve(22,b,13,a)].
28 complement(c2,multiplication(one,c(c2))).  [resolve(25,a,15,a(flip))].
29 complement(c2,c(c2)).  [para(15(a,1),28(a,2))].
30 complement(c1,multiplication(one,c(c1))).  [resolve(26,a,15,a(flip))].
31 complement(c1,c(c1)).  [para(15(a,1),30(a,2))].
32 addition(c2,c(c2)) = one.  [resolve(29,a,24,a)].
33 -leq(one,multiplication(addition(c1,c(c1)),one)) | -leq(multiplication(addition(c1,c(c1)),addition(c2,c(c2))),one).  [para(32(a,1),21(a,2,2))].
34 -leq(one,addition(c1,c(c1))) | -leq(multiplication(addition(c1,c(c1)),addition(c2,c(c2))),one).  [para(14(a,1),33(a,2))].
35 -leq(one,addition(c1,c(c1))) | -leq(multiplication(addition(c1,c(c1)),one),one).  [para(32(a,1),34(b,1,2))].
36 -leq(one,addition(c1,c(c1))) | -leq(addition(c1,c(c1)),one).  [para(14(a,1),35(b,1))].
37 addition(c1,c(c1)) = one.  [resolve(31,a,24,a)].
38 -leq(one,one) | -leq(addition(c1,c(c1)),one).  [para(37(a,1),36(a,2))].
39 -leq(one,one) | -leq(one,one).  [para(37(a,1),38(b,1))].
40 -leq(one,one).  [copy(39),merge(b)].
41 $F.  [resolve(27,a,40,a)].

============================== end of proof ==========================
