============================== prooftrans ============================
% Command    : vampire_rel --proof tptp --output_axiom_names on --mode casc -t %d %s
% Computer   : n047.star.cs.uiowa.edu
% Model      : x86_64 x86_64
% CPU        : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz
% Memory     : 32286.75MB
% OS         : Linux 2.6.32-431.11.2.el6.x86_64
% CPULimit   : 300
% DateTime   : Fri Jun  6 04:10:18 CDT 2014
% CPUTime    : 0.15 
============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 42886 was started by sandbox on n047.star.cs.uiowa.edu,
Fri Jun  6 04:10:18 2014
The command was "./prover9 -t 300 -f /tmp/Prover9_42854_n047.star.cs.uiowa.edu".
============================== end of head ===========================

set(prolog_style_variables).
============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% SZS status Theorem
% SZS output start Refutation
% Proof 1 at 0.01 (+ 0.00) seconds.
% Length of proof is 26.
% Level of proof is 4.
% Maximum clause weight is 18.000.
% Given clauses 41.


1 (all A -convergent_lines(A,A)).  [assumption].
2 (all A all B (convergent_lines(A,B) -> -apart_point_and_line(intersection_point(A,B),A))).  [assumption].
3 (all A all B (convergent_lines(A,B) -> -apart_point_and_line(intersection_point(A,B),B))).  [assumption].
4 (all A all B all C all D (distinct_points(A,B) & distinct_lines(C,D) -> apart_point_and_line(A,C) | apart_point_and_line(A,D) | apart_point_and_line(B,C) | apart_point_and_line(B,D))).  [assumption].
5 (all A all B all C (convergent_lines(A,B) -> distinct_lines(B,C) | convergent_lines(A,C))).  [assumption].
6 (all A all B (equal_points(A,B) <-> -distinct_points(A,B))).  [assumption].
7 (all A all B (incident_point_and_line(A,B) <-> -apart_point_and_line(A,B))).  [assumption].
8 -(all A all B all C (convergent_lines(A,B) & incident_point_and_line(C,A) & incident_point_and_line(C,B) -> equal_points(C,intersection_point(A,B)))).  [assumption].
9 -incident_point_and_line(A,B) | -apart_point_and_line(A,B).  [clausify(7)].
10 incident_point_and_line(c3,c1).  [clausify(8)].
11 incident_point_and_line(c3,c2).  [clausify(8)].
12 -equal_points(c3,intersection_point(c1,c2)).  [clausify(8)].
13 equal_points(A,B) | distinct_points(A,B).  [clausify(6)].
14 convergent_lines(c1,c2).  [clausify(8)].
15 -convergent_lines(A,A).  [clausify(1)].
16 -convergent_lines(A,B) | -apart_point_and_line(intersection_point(A,B),A).  [clausify(2)].
17 -convergent_lines(A,B) | -apart_point_and_line(intersection_point(A,B),B).  [clausify(3)].
18 -convergent_lines(A,B) | distinct_lines(B,C) | convergent_lines(A,C).  [clausify(5)].
19 -distinct_points(A,B) | -distinct_lines(C,D) | apart_point_and_line(A,C) | apart_point_and_line(A,D) | apart_point_and_line(B,C) | apart_point_and_line(B,D).  [clausify(4)].
20 -apart_point_and_line(c3,c1).  [resolve(9,a,10,a)].
21 -apart_point_and_line(c3,c2).  [resolve(9,a,11,a)].
22 distinct_points(c3,intersection_point(c1,c2)).  [resolve(12,a,13,a)].
23 -apart_point_and_line(intersection_point(c1,c2),c1).  [resolve(16,a,14,a)].
24 -apart_point_and_line(intersection_point(c1,c2),c2).  [resolve(17,a,14,a)].
25 -distinct_lines(A,B) | apart_point_and_line(c3,A) | apart_point_and_line(c3,B) | apart_point_and_line(intersection_point(c1,c2),A) | apart_point_and_line(intersection_point(c1,c2),B).  [resolve(19,a,22,a)].
26 -distinct_lines(c2,A) | apart_point_and_line(c3,A) | apart_point_and_line(intersection_point(c1,c2),c2) | apart_point_and_line(intersection_point(c1,c2),A).  [resolve(25,b,21,a)].
27 -distinct_lines(c2,c1) | apart_point_and_line(intersection_point(c1,c2),c2) | apart_point_and_line(intersection_point(c1,c2),c1).  [resolve(26,b,20,a)].
28 -distinct_lines(c2,c1) | apart_point_and_line(intersection_point(c1,c2),c1).  [resolve(27,b,24,a)].
29 -distinct_lines(c2,c1).  [resolve(28,b,23,a)].
30 -convergent_lines(A,c2) | convergent_lines(A,c1).  [resolve(18,b,29,a)].
31 -convergent_lines(c1,c2).  [resolve(30,b,15,a)].
32 $F.  [resolve(14,a,31,a)].

============================== end of proof ==========================
