













15 -ilf_type(A,set_type) | ilf_type(A,binary_relation_type) | -relation_like(A).  [clausify(5)].
16 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -ilf_type(C,subset_type(cross_product(A,B))) | relation_like(C).  [clausify(9)].
17 ilf_type(A,set_type).  [clausify(13)].
18 ilf_type(c4,relation_type(c2,c3)).  [clausify(14)].
19 member(c5,domain(c2,c3,c4)) | member(ordered_pair(c5,c6),c4).  [clausify(14)].
20 -empty(c3).  [clausify(14)].
21 -ilf_type(A,set_type) | -empty(power_set(A)).  [clausify(8)].
22 -empty(power_set(A)).  [resolve(17,a,21,a)].
23 -member(c5,domain(c2,c3,c4)) | -ilf_type(A,member_type(c3)) | -member(ordered_pair(c5,A),c4).  [clausify(14)].
24 -ilf_type(A,set_type) | empty(B) | -ilf_type(B,set_type) | -ilf_type(A,member_type(B)) | member(A,B).  [clausify(4)].
25 empty(A) | -ilf_type(A,set_type) | -ilf_type(B,member_type(A)) | member(B,A).  [resolve(17,a,24,a)].
26 empty(A) | -ilf_type(B,member_type(A)) | member(B,A).  [resolve(17,a,25,b)].
27 -ilf_type(A,set_type) | empty(B) | -ilf_type(B,set_type) | ilf_type(A,member_type(B)) | -member(A,B).  [clausify(4)].
28 empty(A) | -ilf_type(A,set_type) | ilf_type(B,member_type(A)) | -member(B,A).  [resolve(17,a,27,a)].
29 empty(A) | ilf_type(B,member_type(A)) | -member(B,A).  [resolve(17,a,28,b)].
30 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -ilf_type(B,subset_type(A)) | ilf_type(B,member_type(power_set(A))).  [clausify(6)].
31 -ilf_type(A,set_type) | -ilf_type(A,subset_type(B)) | ilf_type(A,member_type(power_set(B))).  [resolve(17,a,30,a)].
32 -ilf_type(A,subset_type(B)) | ilf_type(A,member_type(power_set(B))).  [resolve(17,a,31,a)].
33 -ilf_type(A,set_type) | -ilf_type(B,binary_relation_type) | -member(A,domain_of(B)) | member(ordered_pair(A,f1(A,B)),B).  [clausify(1)].
34 -ilf_type(A,binary_relation_type) | -member(B,domain_of(A)) | member(ordered_pair(B,f1(B,A)),A).  [resolve(17,a,33,a)].
35 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -ilf_type(C,relation_type(A,B)) | ilf_type(C,subset_type(cross_product(A,B))).  [clausify(3)].
36 -ilf_type(A,set_type) | -ilf_type(B,relation_type(C,A)) | ilf_type(B,subset_type(cross_product(C,A))).  [resolve(17,a,35,a)].
37 -ilf_type(A,relation_type(B,C)) | ilf_type(A,subset_type(cross_product(B,C))).  [resolve(17,a,36,a)].
38 -ilf_type(A,set_type) | -ilf_type(B,binary_relation_type) | member(A,domain_of(B)) | -ilf_type(C,set_type) | -member(ordered_pair(A,C),B).  [clausify(1)].
39 -ilf_type(A,binary_relation_type) | member(B,domain_of(A)) | -ilf_type(C,set_type) | -member(ordered_pair(B,C),A).  [resolve(17,a,38,a)].
40 -ilf_type(A,binary_relation_type) | member(B,domain_of(A)) | -member(ordered_pair(B,C),A).  [resolve(17,a,39,c)].
41 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -ilf_type(C,binary_relation_type) | -member(ordered_pair(A,B),C) | member(B,range_of(C)).  [clausify(2)].
42 -ilf_type(A,set_type) | -ilf_type(B,binary_relation_type) | -member(ordered_pair(C,A),B) | member(A,range_of(B)).  [resolve(17,a,41,a)].
43 -ilf_type(A,binary_relation_type) | -member(ordered_pair(B,C),A) | member(C,range_of(A)).  [resolve(17,a,42,a)].
44 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -ilf_type(C,relation_type(A,B)) | domain(A,B,C) = domain_of(C).  [clausify(10)].
45 -ilf_type(A,set_type) | -ilf_type(B,relation_type(C,A)) | domain(C,A,B) = domain_of(B).  [resolve(17,a,44,a)].
46 -ilf_type(A,relation_type(B,C)) | domain(B,C,A) = domain_of(A).  [resolve(17,a,45,a)].
47 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -ilf_type(C,relation_type(A,B)) | range(A,B,C) = range_of(C).  [clausify(11)].
48 -ilf_type(A,set_type) | -ilf_type(B,relation_type(C,A)) | range(C,A,B) = range_of(B).  [resolve(17,a,47,a)].
49 -ilf_type(A,relation_type(B,C)) | range(B,C,A) = range_of(A).  [resolve(17,a,48,a)].
50 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -ilf_type(C,relation_type(A,B)) | ilf_type(range(A,B,C),subset_type(B)).  [clausify(12)].
51 -ilf_type(A,set_type) | -ilf_type(B,relation_type(C,A)) | ilf_type(range(C,A,B),subset_type(A)).  [resolve(17,a,50,a)].
52 -ilf_type(A,relation_type(B,C)) | ilf_type(range(B,C,A),subset_type(C)).  [resolve(17,a,51,a)].
53 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -member(A,power_set(B)) | -ilf_type(C,set_type) | -member(C,A) | member(C,B).  [clausify(7)].
54 -ilf_type(A,set_type) | -member(B,power_set(A)) | -ilf_type(C,set_type) | -member(C,B) | member(C,A).  [resolve(17,a,53,a)].
55 -member(A,power_set(B)) | -ilf_type(C,set_type) | -member(C,A) | member(C,B).  [resolve(17,a,54,a)].
56 -member(A,power_set(B)) | -member(C,A) | member(C,B).  [resolve(17,a,55,b)].
57 -ilf_type(A,set_type) | -ilf_type(B,set_type) | -ilf_type(C,subset_type(cross_product(A,B))) | -ilf_type(C,set_type) | ilf_type(C,binary_relation_type).  [resolve(16,d,15,c)].
58 -ilf_type(A,set_type) | -ilf_type(B,subset_type(cross_product(C,A))) | -ilf_type(B,set_type) | ilf_type(B,binary_relation_type).  [resolve(17,a,57,a)].
59 -ilf_type(A,subset_type(cross_product(B,C))) | -ilf_type(A,set_type) | ilf_type(A,binary_relation_type).  [resolve(17,a,58,a)].
60 -ilf_type(A,subset_type(cross_product(B,C))) | ilf_type(A,binary_relation_type).  [resolve(17,a,59,b)].
61 ilf_type(c4,subset_type(cross_product(c2,c3))).  [resolve(37,a,18,a)].
62 domain(c2,c3,c4) = domain_of(c4).  [resolve(46,a,18,a)].
63 -member(c5,domain_of(c4)) | -ilf_type(A,member_type(c3)) | -member(ordered_pair(c5,A),c4).  [para(62(a,1),23(a,2))].
64 member(c5,domain_of(c4)) | member(ordered_pair(c5,c6),c4).  [para(62(a,1),19(a,2))].
65 range(c2,c3,c4) = range_of(c4).  [resolve(49,a,18,a)].
66 ilf_type(range(c2,c3,c4),subset_type(c3)).  [resolve(52,a,18,a)].
67 ilf_type(range_of(c4),subset_type(c3)).  [para(65(a,1),66(a,1))].
68 ilf_type(range_of(c4),member_type(power_set(c3))).  [resolve(67,a,32,a)].
69 ilf_type(c4,binary_relation_type).  [resolve(61,a,60,a)].
70 empty(power_set(c3)) | member(range_of(c4),power_set(c3)).  [resolve(68,a,26,b)].
71 member(range_of(c4),power_set(c3)).  [resolve(22,a,70,a)].
72 -member(A,range_of(c4)) | member(A,c3).  [resolve(71,a,56,a)].
73 member(c5,domain_of(c4)) | -ilf_type(c4,binary_relation_type) | member(c5,domain_of(c4)).  [resolve(64,b,40,c)].
74 member(c5,domain_of(c4)) | -ilf_type(c4,binary_relation_type).  [copy(73),merge(c)].
75 member(c5,domain_of(c4)).  [resolve(69,a,74,b)].
76 -ilf_type(A,member_type(c3)) | -member(ordered_pair(c5,A),c4).  [resolve(75,a,63,a)].
77 -ilf_type(c4,binary_relation_type) | member(ordered_pair(c5,f1(c5,c4)),c4).  [resolve(75,a,34,b)].
78 member(ordered_pair(c5,f1(c5,c4)),c4).  [resolve(69,a,77,a)].
79 -ilf_type(f1(c5,c4),member_type(c3)).  [resolve(78,a,76,b)].
80 -ilf_type(c4,binary_relation_type) | member(f1(c5,c4),range_of(c4)).  [resolve(78,a,43,b)].
81 member(f1(c5,c4),range_of(c4)).  [resolve(69,a,80,a)].
82 ilf_type(A,member_type(c3)) | -member(A,c3).  [resolve(29,a,20,a)].
83 -member(f1(c5,c4),c3).  [resolve(82,a,79,a)].
84 -member(f1(c5,c4),range_of(c4)).  [resolve(72,b,83,a)].
85 $F.  [resolve(81,a,84,a)].